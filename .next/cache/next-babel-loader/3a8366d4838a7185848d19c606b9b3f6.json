{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../components/layouts/AppLayout';\nimport { getSetting, getWidgetsWithData, getMultipleWidgetWithData, getMultipleSetting } from '../../_variables/ajaxVariables';\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\nimport Posts from '../../components/includes/Posts/Posts';\nimport Link from 'next/link';\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent';\nimport SideBar from '../../components/includes/Sidebar/Sidebar';\nimport Footer from '../../components/includes/Footer/Footer';\n\nvar posts = function posts(props) {\n  var _useState = useState({\n    style: {}\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n\n    if (props.identity.postPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: props.identity.data.postsPageSidebar ? 'content withSidebar' : 'content withOutSidebar'\n  }, __jsx(\"div\", {\n    className: \"main\"\n  }, __jsx(\"div\", {\n    className: \"posts\"\n  }, __jsx(Posts, {\n    posts: props.postsSource.posts || []\n  })), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getPostsData.pageNo,\n    totalCount: props.postsSource.totalCount,\n    size: props.getPostsData.size,\n    maxPage: Math.ceil(parseInt(props.postsSource.totalCount) / parseInt(props.getPostsData.size)),\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })), __jsx(SideBar, {\n    isActive: props.identity.data.postsPageSidebar,\n    widgets: props.widgets,\n    position: \"postsPageSidebar\"\n  })), __jsx(Footer, null)));\n};\n\nposts.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, postsSource, widgets, settings, settingsData, getPostsData, widgetsData, postsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getMultipleSetting({\n            settings: ['identity', 'navigation', 'design']\n          }, true));\n\n        case 3:\n          settingsData = _context.sent;\n          settings = settingsData.data.settings ? settingsData.data.settings : []; //|| settings.identity\n\n          getPostsData = {\n            size: parseInt(query.size) || 30,\n            pageNo: parseInt(query.page) || 1,\n            postType: query.type || 'all',\n            fields: ['title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration'],\n            keyword: query.keyword || '',\n            author: query.author || 'all',\n            actor: query.actor || 'all',\n            status: 'published',\n            tag: query.tag || 'all',\n            category: query.category || 'all',\n            sort: query.sort || 'latest'\n          };\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(getMultipleWidgetWithData({\n            widgets: ['postsPageSidebar', 'home', 'footer']\n          }, true));\n\n        case 8:\n          widgetsData = _context.sent;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(getPosts(getPostsData));\n\n        case 11:\n          postsData = _context.sent;\n          widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n          postsSource = postsData.data ? postsData.data : [];\n          return _context.abrupt(\"return\", _objectSpread({}, settings, {\n            query: query,\n            postsSource: postsSource,\n            getPostsData: getPostsData,\n            pathname: pathname,\n            widgets: widgets\n          }));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(posts);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/posts/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getWidgetsWithData","getMultipleWidgetWithData","getMultipleSetting","getMeta","getPosts","SiteSettingSetter","withRouter","Posts","Link","PaginationComponent","SideBar","Footer","posts","props","style","state","setState","console","log","identity","postPageSidebar","gridArea","data","postsPageSidebar","postsSource","getPostsData","pageNo","totalCount","size","Math","ceil","parseInt","query","router","pathname","widgets","getInitialProps","req","res","err","settings","settingsData","page","postType","type","fields","keyword","author","actor","status","tag","category","sort","widgetsData","postsData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../components/layouts/AppLayout'\r\nimport { getSetting, getWidgetsWithData, getMultipleWidgetWithData, getMultipleSetting } from '../../_variables/ajaxVariables'\r\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport Posts from '../../components/includes/Posts/Posts'\r\nimport Link from 'next/link'\r\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent'\r\nimport SideBar from '../../components/includes/Sidebar/Sidebar'\r\nimport Footer from '../../components/includes/Footer/Footer'\r\n\r\nconst posts = props => {\r\n    const [ state, setState ] = useState({\r\n        style: {}\r\n    })\r\n\r\n    useEffect(() => {\r\nconsole.log( props)\r\n        if (props.identity.postPageSidebar) {\r\n            setState({\r\n                style: {\r\n                    gridArea: 'content'\r\n                }\r\n            })\r\n        }\r\n    }, [ props ]);\r\n\r\n    return (\r\n        <>\r\n            <AppLayout>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <div className={ props.identity.data.postsPageSidebar ? 'content withSidebar' : 'content withOutSidebar' }>\r\n                    <div className=\"main\">\r\n                        <div className='posts'>\r\n                            <Posts posts={ props.postsSource.posts || [] }/>\r\n\r\n                        </div>\r\n                        <PaginationComponent\r\n                            isActive={ true }\r\n                            currentPage={ props.getPostsData.pageNo }\r\n                            totalCount={ props.postsSource.totalCount }\r\n                            size={ props.getPostsData.size }\r\n                            maxPage={ Math.ceil(parseInt(props.postsSource.totalCount) / parseInt(props.getPostsData.size)) }\r\n                            queryData={ props.query || props.router.query }\r\n                            pathnameData={ props.pathname || props.router.pathname }\r\n                        />\r\n                    </div>\r\n                    <SideBar isActive={ props.identity.data.postsPageSidebar } widgets={ props.widgets } position='postsPageSidebar'/>\r\n                </div>\r\n                <Footer/>\r\n            </AppLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nposts.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n\r\n    let postsSource;\r\n    let widgets;\r\n    let settings;\r\n    const settingsData = await getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }, true)\r\n    settings = settingsData.data.settings ? settingsData.data.settings : []\r\n    //|| settings.identity\r\n    const getPostsData = {\r\n        size: parseInt(query.size)  || 30,\r\n        pageNo: parseInt(query.page) || 1,\r\n        postType: query.type || 'all',\r\n        fields: [ 'title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration' ],\r\n        keyword: query.keyword || '',\r\n        author: query.author || 'all',\r\n        actor: query.actor || 'all',\r\n        status: 'published',\r\n        tag: query.tag || 'all',\r\n        category: query.category || 'all',\r\n        sort: query.sort || 'latest',\r\n    }\r\n\r\n\r\n\r\n    const widgetsData =  await getMultipleWidgetWithData({ widgets: [ 'postsPageSidebar', 'home', 'footer' ] }, true)\r\n\r\n\r\n\r\n\r\n\r\n    const postsData = await getPosts(getPostsData)\r\n    widgets = widgetsData.data.widgets ? widgetsData.data.widgets : []\r\n    postsSource = postsData.data ? postsData.data : []\r\n\r\n    return { ...settings, query, postsSource, getPostsData, pathname, widgets }\r\n}\r\n\r\nexport default withRouter(posts);\r\n"]},"metadata":{},"sourceType":"module"}