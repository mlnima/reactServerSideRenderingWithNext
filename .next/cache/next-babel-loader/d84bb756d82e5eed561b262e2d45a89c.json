{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../components/layouts/AppLayout';\nimport { getSetting, getWidgetsWithData } from '../../_variables/ajaxVariables';\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\nimport Posts from '../../components/includes/Posts/Posts';\nimport Link from 'next/link';\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent';\nimport SideBar from '../../components/includes/Sidebar/Sidebar';\n\nvar posts = function posts(props) {\n  var _useState = useState({\n    style: {}\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n\n    if (props.identity.postPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: props.identity.postsPageSidebar ? 'content withSidebar' : 'content withOutSidebar'\n  }, __jsx(\"div\", {\n    className: \"main\"\n  }, __jsx(\"div\", {\n    className: \"posts\"\n  }, __jsx(Posts, {\n    posts: props.postsSource.posts || []\n  })), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getPostsData.pageNo,\n    totalCount: props.postsSource.totalCount,\n    size: props.getPostsData.size,\n    maxPage: Math.ceil(parseInt(props.postsSource.totalCount) / parseInt(props.getPostsData.size)),\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })), __jsx(SideBar, {\n    isActive: props.identity.postsPageSidebar,\n    widgets: props.widgets,\n    position: \"postsPageSidebar\"\n  }))));\n};\n\nposts.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, navigation, identity, postsSource, widgets, identityData, navigationData, widgetsData, getPostsData, postsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 3:\n          identityData = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 6:\n          navigationData = _context.sent;\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(getWidgetsWithData('postsPageSidebar'));\n\n        case 9:\n          widgetsData = _context.sent;\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          getPostsData = {\n            size: parseInt(query.size) || parseInt(identity.postsCountPerPage) || 30,\n            pageNo: parseInt(query.page) || 1,\n            postType: query.type || 'all',\n            fields: ['title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration'],\n            keyword: query.keyword || '',\n            author: query.author || 'all',\n            actor: query.actor || 'all',\n            status: 'published',\n            tag: query.tag || 'all',\n            category: query.category || 'all',\n            sort: query.sort || 'latest'\n          };\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(getPosts(getPostsData));\n\n        case 15:\n          postsData = _context.sent;\n          widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n          postsSource = postsData.data ? postsData.data : [];\n          return _context.abrupt(\"return\", {\n            identity: identity,\n            navigation: navigation,\n            query: query,\n            postsSource: postsSource,\n            getPostsData: getPostsData,\n            pathname: pathname,\n            widgets: widgets\n          });\n\n        case 19:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(posts);","map":null,"metadata":{},"sourceType":"module"}