{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport './AddWidgetWithPositionMenu.scss';\nimport { widgetModels } from './models';\nimport { addNewWidget, getWidgets } from '../../../../_variables/ajaxVariables';\nimport { AppContext } from '../../../../context/AppContext';\n\nconst AddWidgetWithPositionMenu = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    open: false\n  });\n  useEffect(() => {}, []);\n\n  const onOpenHandler = () => {\n    state.open ? setState(_objectSpread({}, state, {\n      open: false\n    })) : setState(_objectSpread({}, state, {\n      open: true\n    }));\n  };\n\n  const onAddNewWidget = (position, type) => {\n    let dataToSave = widgetModels;\n    dataToSave.position = position;\n    dataToSave.type = type;\n    addNewWidget(widgetModels).then(res => {\n      getWidgets('home').then(res => {\n        contextData.dispatchWidgetsSettings({\n          widgets: [...res.data.widgets]\n        });\n      });\n    });\n  };\n\n  if (state.open) {\n    return __jsx(\"div\", {\n      className: \"AddWidgetWithPositionMenu\"\n    }, __jsx(\"button\", {\n      className: \"positionsOpener\",\n      onClick: () => onOpenHandler()\n    }, props.name), __jsx(\"div\", {\n      className: \"AddWidgetWithPositionMenuPositions\"\n    }, __jsx(\"button\", {\n      className: \"AddWidgetWithPositionMenuPositionsBtn\",\n      onClick: () => onAddNewWidget('home', props.type)\n    }, \"Home Page\"), __jsx(\"button\", {\n      className: \"AddWidgetWithPositionMenuPositionsBtn\",\n      onClick: () => onAddNewWidget('homePageSidebar', props.type)\n    }, \"Home Page Sidebar\"), __jsx(\"button\", {\n      className: \"AddWidgetWithPositionMenuPositionsBtn\",\n      onClick: () => onAddNewWidget('postPageSidebar', props.type)\n    }, \"Post Page Sidebar\"), __jsx(\"button\", {\n      className: \"AddWidgetWithPositionMenuPositionsBtn\",\n      onClick: () => onAddNewWidget('postsPageSidebar', props.type)\n    }, \"Posts Page Sidebar\"), __jsx(\"button\", {\n      className: \"AddWidgetWithPositionMenuPositionsBtn\",\n      onClick: () => onAddNewWidget('tagsPageSidebar', props.type)\n    }, \"Tags Page Sidebar\"), __jsx(\"button\", {\n      className: \"AddWidgetWithPositionMenuPositionsBtn\",\n      onClick: () => onAddNewWidget('categoriesPageSidebar', props.type)\n    }, \"Categories Page Sidebar\"), __jsx(\"button\", {\n      className: \"AddWidgetWithPositionMenuPositionsBtn\",\n      onClick: () => onAddNewWidget('actorsPageSidebar', props.type)\n    }, \"Actors Page Sidebar\"), __jsx(\"button\", {\n      className: \"AddWidgetWithPositionMenuPositionsBtn\",\n      onClick: () => onAddNewWidget('footer', props.type)\n    }, \"Footer\")));\n  } else {\n    return __jsx(\"div\", {\n      className: \"AddWidgetWithPositionMenu\"\n    }, __jsx(\"button\", {\n      className: \"positionsOpener\",\n      onClick: () => onOpenHandler()\n    }, props.name));\n  }\n};\n\nexport default AddWidgetWithPositionMenu;","map":null,"metadata":{},"sourceType":"module"}