{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../components/layouts/AppLayout';\nimport { getSetting } from '../../_variables/ajaxVariables';\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\n\nconst posts = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  useEffect(() => {\n    console.log(props);\n  }, []);\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"posts\"\n  }, __jsx(SiteSettingSetter, props), \"posts\"));\n};\n\nposts.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let posts;\n  const getPostsData = {\n    size: 60,\n    pageNo: query.pageNo || 1,\n    postTypeQuery: 'all',\n    selectedFields: 'title',\n    searchQuery: '',\n    authorQuery: 'all',\n    statusQuery: 'all'\n  };\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  const postsData = await getPosts(getPostsData);\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  posts = postsData.data ? postsData.data : [];\n  return {\n    identity,\n    navigation,\n    query,\n    posts\n  };\n};\n\nexport default withRouter(posts);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/posts/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","getPosts","SiteSettingSetter","withRouter","posts","props","state","setState","console","log","getInitialProps","pathname","query","req","res","err","navigation","identity","getPostsData","size","pageNo","postTypeQuery","selectedFields","searchQuery","authorQuery","statusQuery","identityData","navigationData","postsData","data","setting"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,qCAAlC;AACA,OAAOC,iBAAP,MAA8B,iEAA9B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACnB,QAAM;AAAA,OAAEC,KAAF;AAAA,OAASC;AAAT,MAAsBZ,QAAQ,CAAC,EAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACH,GAFQ,EAEN,EAFM,CAAT;AAGA,SACI,MAAC,SAAD,QACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,MAAC,iBAAD,EAAyBA,KAAzB,CADJ,UADJ,CADJ;AAQH,CAbD;;AAeAD,KAAK,CAACM,eAAN,GAAwB,OAAO;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,GAAnB;AAAwBC,EAAAA,GAAxB;AAA6BC,EAAAA;AAA7B,CAAP,KAA8C;AAClE,MAAIC,UAAJ;AACA,MAAIC,QAAJ;AACA,MAAIb,KAAJ;AAGA,QAAMc,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAE,EADW;AAEjBC,IAAAA,MAAM,EAAER,KAAK,CAACQ,MAAN,IAAgB,CAFP;AAGjBC,IAAAA,aAAa,EAAC,KAHG;AAIjBC,IAAAA,cAAc,EAAC,OAJE;AAKjBC,IAAAA,WAAW,EAAC,EALK;AAMjBC,IAAAA,WAAW,EAAC,KANK;AAOjBC,IAAAA,WAAW,EAAC;AAPK,GAArB;AAUA,QAAMC,YAAY,GAAG,MAAM3B,UAAU,CAAC,UAAD,CAArC;AACA,QAAM4B,cAAc,GAAG,MAAM5B,UAAU,CAAC,YAAD,CAAvC;AACA,QAAM6B,SAAS,GAAG,MAAM3B,QAAQ,CAACiB,YAAD,CAAhC;AAEAD,EAAAA,QAAQ,GAAGS,YAAY,CAACG,IAAb,CAAkBC,OAAlB,GAA4BJ,YAAY,CAACG,IAAb,CAAkBC,OAAlB,CAA0BD,IAAtD,GAA6D,EAAxE;AACAb,EAAAA,UAAU,GAAGW,cAAc,CAACE,IAAf,CAAoBC,OAApB,GAA8BH,cAAc,CAACE,IAAf,CAAoBC,OAAlD,GAA4D,EAAzE;AACA1B,EAAAA,KAAK,GAAGwB,SAAS,CAACC,IAAV,GAAeD,SAAS,CAACC,IAAzB,GAA8B,EAAtC;AACA,SAAO;AAAEZ,IAAAA,QAAF;AAAYD,IAAAA,UAAZ;AAAwBJ,IAAAA,KAAxB;AAA+BR,IAAAA;AAA/B,GAAP;AACH,CAxBD;;AA0BA,eAAeD,UAAU,CAACC,KAAD,CAAzB","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../_variables/ajaxVariables'\r\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\r\nimport withRouter from 'next/dist/client/with-router'\r\n\r\nconst posts = props => {\r\n    const [ state, setState ] = useState({});\r\n    useEffect(() => {\r\n        console.log(props)\r\n    }, []);\r\n    return (\r\n        <AppLayout>\r\n            <div className='posts'>\r\n                <SiteSettingSetter  { ...props }/>\r\n                posts\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nposts.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let posts;\r\n\r\n\r\n    const getPostsData = {\r\n        size: 60,\r\n        pageNo: query.pageNo || 1,\r\n        postTypeQuery:'all',\r\n        selectedFields:'title',\r\n        searchQuery:'',\r\n        authorQuery:'all',\r\n        statusQuery:'all'\r\n\r\n    }\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    const postsData = await getPosts(getPostsData)\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    posts = postsData.data?postsData.data:[]\r\n    return { identity, navigation, query, posts }\r\n}\r\n\r\nexport default withRouter(posts);\r\n"]},"metadata":{},"sourceType":"module"}