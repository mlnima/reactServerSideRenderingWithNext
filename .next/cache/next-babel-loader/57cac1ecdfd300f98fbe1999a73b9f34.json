{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport jwtDecode from \"jwt-decode\";\nimport jwt from 'jsonwebtoken';\nimport axios from \"axios\";\nimport dataDecoder from '../server/tools/dataDecoder';\nimport dataEncoder from '../server/tools/dataEncoder';\nimport { withRouter } from \"next/router\";\nexport const AppContext = React.createContext();\n\nconst AppProvider = props => {\n  const {\n    0: state,\n    1: dispatchState\n  } = useState({\n    loading: false,\n    videoPreviewID: ''\n  });\n  const {\n    0: alert,\n    1: dispatchAlert\n  } = useState({\n    active: false,\n    alertMessage: '',\n    type: ''\n  }); // const[absolutePath,dispatchAbsolutePath]=useState('http://localhost:3000/')\n\n  const {\n    0: siteIdentity,\n    1: dispatchSiteIdentity\n  } = useState({\n    title: 'site title',\n    themeColor: '#000',\n    description: 'site description',\n    keywords: [],\n    customScripts: []\n  });\n  const {\n    0: siteDesign,\n    1: dispatchSiteDesign\n  } = useState({});\n  const {\n    0: settings,\n    1: dispatchSettings\n  } = useState({\n    adminPanelSideBar: false,\n    textEditorCurrentFile: '',\n    textEditorEditMode: false\n  });\n  const {\n    0: galleryData,\n    1: setGalleryData\n  } = useState({\n    path: './static'\n  });\n  const {\n    0: userData,\n    1: dispatchUserData\n  } = useState({});\n  const {\n    0: navigationData,\n    1: dispatchNavigationData\n  } = useState([]);\n  const {\n    0: editingPostData,\n    1: dispatchEditingPostData\n  } = useState({\n    categories: [],\n    actors: [],\n    tags: [],\n    title: '',\n    author: '',\n    description: '',\n    disLikes: 0,\n    mainThumbnail: '',\n    videoTrailerUrl: '',\n    videoEmbedCode: '',\n    likes: 0,\n    quality: '',\n    status: '',\n    postType: '',\n    sourceSite: '',\n    views: 0\n  });\n  const {\n    0: adminPosts,\n    1: dispatchAdminPosts\n  } = useState([]);\n  const {\n    0: adminPostsData,\n    1: dispatchAdminPostsData\n  } = useState({\n    pageNo: 1,\n    size: 30,\n    totalPosts: 0,\n    postType: 'all',\n    keyword: '',\n    status: 'all',\n    author: 'all',\n    fields: ['author', 'title', 'mainThumbnail', 'status', 'actors', 'tags', 'categories'],\n    checkedPosts: []\n  });\n  const {\n    0: widgetsSettings,\n    1: dispatchWidgetsSettings\n  } = useState({\n    widgets: []\n  }); // const [ adminWidgets, dispatchAdminWidgets ] = useState({\n  //     home:[],\n  //     homePageSidebar:[],\n  //     postPageSidebar:[],\n  //     postsPageSidebar:[],\n  //     footer:[],\n  //     tagsPageSidebar:[],\n  //     categoriesPageSidebar:[],\n  //     actorsPageSidebar:[],\n  //     header:[]\n  // });\n\n  const {\n    0: siteWidgets,\n    1: setSiteWidgets\n  } = useState([]);\n  const {\n    0: videoPostsDataForClient,\n    1: dispatchVideoPostsDataForClient\n  } = useState({\n    pageNo: 1,\n    size: 12,\n    totalPosts: 0,\n    postType: 'all',\n    keyword: '',\n    status: 'all',\n    author: 'all',\n    fields: ['title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration'],\n    checkedPosts: []\n  });\n  const {\n    0: functions,\n    1: dispatchFunctions\n  } = useState({\n    getAndSetUserInfo: async () => {\n      if (localStorage.wt) {\n        await axios.post('/api/v1/users/getUserInfo', {\n          token: localStorage.wt\n        }).then(res => {\n          // dispatchUserData({ ...userData, ...res.data.userData });\n          dispatchUserData(_objectSpread({}, userData, {}, dataDecoder(res.data).userData)); // console.log(dataDecoder(res.data) )\n        }).catch(err => {\n          console.log(err);\n        });\n      }\n    },\n    logOutUser: () => {\n      localStorage.removeItem('wt');\n      dispatchUserData({});\n      props.router.push('/');\n    },\n    goToAdminPanel: () => {\n      props.router.push('/admin');\n    },\n    goToHomePage: () => {// props.router.push('/')\n    },\n    savePosts: async data => {\n      const body = {\n        postData: data,\n        token: localStorage.wt\n      };\n      return axios.post('/api/v1/posts/createNewPost', body);\n    },\n    updatePost: async data => {\n      const body = {\n        postData: data,\n        token: localStorage.wt\n      };\n      return axios.post('/api/v1/posts/updatePost', body);\n    },\n    getPosts: async data => {\n      const body = _objectSpread({}, data);\n\n      return await axios.post('/api/v1/posts', body);\n    },\n    //exported to variables file ----\n    getPost: async _id => {\n      const body = {\n        _id,\n        token: localStorage.wt\n      };\n      return await axios.post('/api/v1/posts/post', body);\n    },\n    setEditingPostData: (name, value) => {\n      dispatchEditingPostData(editingPostData => _objectSpread({}, editingPostData, {\n        [name]: value\n      }));\n    },\n    bulkActionPost: (ids, status) => {\n      dispatchState(_objectSpread({}, state, {\n        loading: true\n      }));\n      const body = {\n        ids,\n        status,\n        token: localStorage.wt\n      };\n      axios.post('/api/v1/posts/postsBulkAction', body).then(() => {\n        props.router.push({\n          pathname: props.router.pathname,\n          query: _objectSpread({}, props.router.query)\n        });\n        dispatchState(_objectSpread({}, state, {\n          loading: false\n        }));\n      }).catch(() => {\n        dispatchState(_objectSpread({}, state, {\n          loading: false\n        }));\n      });\n    },\n    deletePost: id => {\n      const body = {\n        _id: id,\n        token: localStorage.wt\n      };\n      return axios.post('/api/v1/posts/deletePost', body);\n    },\n    updateSetting: async (type, data) => {\n      const body = {\n        token: localStorage.wt,\n        type,\n        data\n      };\n      return await axios.post(window.location.origin + '/api/v1/settings/update', body);\n    }\n  });\n  useEffect(() => {\n    functions.getAndSetUserInfo();\n  }, []);\n  return __jsx(\"div\", null, __jsx(AppContext.Provider, {\n    value: {\n      state,\n      dispatchState,\n      settings,\n      dispatchSettings,\n      userData,\n      dispatchUserData,\n      functions,\n      editingPostData,\n      dispatchEditingPostData,\n      adminPosts,\n      dispatchAdminPosts,\n      adminPostsData,\n      dispatchAdminPostsData,\n      videoPostsDataForClient,\n      dispatchVideoPostsDataForClient,\n      navigationData,\n      dispatchNavigationData,\n      dispatchSiteIdentity,\n      siteIdentity,\n      widgetsSettings,\n      dispatchWidgetsSettings,\n      siteDesign,\n      dispatchSiteDesign,\n      alert,\n      dispatchAlert,\n      siteWidgets,\n      setSiteWidgets // adminWidgets,\n      // dispatchAdminWidgets\n\n    }\n  }, props.children));\n};\n\nexport const AppProviderWithRouter = withRouter(AppProvider);","map":null,"metadata":{},"sourceType":"module"}