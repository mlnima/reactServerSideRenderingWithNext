{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport DropDownWidget from \"../DropDownWidget/DropDownWidget\";\nimport { AppContext } from \"../../../../context/AppContext\";\nimport FA from \"react-fontawesome\";\nimport withRouter from \"next/dist/client/with-router\";\nimport { updatePost, savePost } from '../../../../_variables/ajaxPostsVariables';\n\nvar ActionOnPost = function ActionOnPost(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {}, []);\n\n  var onSaveHandler = function onSaveHandler() {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n\n    if (props.postData._id) {\n      // contextData.functions.updatePost(contextData.editingPostData)\n      updatePost(props.postData, window.location.origin).then(function () {\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      })[\"catch\"](function (err) {\n        console.log(err);\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      });\n    } else {\n      savePost(props.postData, window.location.origin).then(function (res) {\n        props.router.push('/admin/post?id=' + res.data.savedPostData._id);\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      })[\"catch\"](function (err) {\n        contextData.dispatchAlert(_objectSpread({}, contextData.alert, {\n          active: true,\n          alertMessage: err.response.data.error,\n          type: 'error'\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      });\n    }\n  };\n\n  var onViewHandler = function onViewHandler() {\n    props.router.push('/' + props.postData.title);\n  };\n\n  return __jsx(\"div\", {\n    className: \"ActionOnPost\"\n  }, __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"button\", {\n    className: \"previewBtn\",\n    onClick: function onClick() {\n      return onViewHandler();\n    }\n  }, \"View\")), __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"select\", {\n    name: \"status\",\n    value: props.postData.status,\n    onChange: function onChange(e) {\n      return props.onChangeHandler(e);\n    }\n  }, __jsx(\"option\", {\n    value: \"published\"\n  }, \"Published\"), __jsx(\"option\", {\n    value: \"draft\"\n  }, \"Draft\"), __jsx(\"option\", {\n    value: \"trash\"\n  }, \"Trash\"))), __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"button\", {\n    className: \"SaveBtn\",\n    onClick: function onClick() {\n      return onSaveHandler();\n    }\n  }, \"Save\")));\n};\n\nActionOnPost.getInitialProps = function _callee(_ref) {\n  var query;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query;\n          return _context.abrupt(\"return\", {\n            query: query\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(ActionOnPost);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost.js"],"names":["React","useEffect","useState","useContext","DropDownWidget","AppContext","FA","withRouter","updatePost","savePost","ActionOnPost","props","contextData","state","setState","onSaveHandler","dispatchState","loading","postData","_id","window","location","origin","then","err","console","log","res","router","push","data","savedPostData","dispatchAlert","alert","active","alertMessage","response","error","type","onViewHandler","title","status","e","onChangeHandler","getInitialProps","query"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport DropDownWidget from \"../DropDownWidget/DropDownWidget\";\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport FA from \"react-fontawesome\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport { updatePost, savePost } from '../../../../_variables/ajaxPostsVariables'\r\n\r\nconst ActionOnPost = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ state, setState ] = useState({});\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const onSaveHandler = () => {\r\n        contextData.dispatchState({\r\n            ...contextData.state,\r\n            loading: true\r\n        })\r\n        if (props.postData._id) {\r\n            // contextData.functions.updatePost(contextData.editingPostData)\r\n            updatePost(props.postData, window.location.origin).then(() => {\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n            }).catch(err => {\r\n                console.log(err)\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n            })\r\n        } else {\r\n            savePost(props.postData, window.location.origin).then(res => {\r\n\r\n                props.router.push('/admin/post?id=' + res.data.savedPostData._id)\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n            }).catch(err => {\r\n\r\n                contextData.dispatchAlert({\r\n                    ...contextData.alert,\r\n                    active: true,\r\n                    alertMessage: err.response.data.error,\r\n                    type: 'error'\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n            })\r\n        }\r\n    };\r\n\r\n    const onViewHandler = () => {\r\n    props.router.push('/'+ props.postData.title)\r\n    }\r\n    \r\n    return (\r\n        <div className='ActionOnPost'>\r\n            <div className='ActionOnPostItem'>\r\n                <button className='previewBtn' onClick={ () => onViewHandler() }>View</button>\r\n            </div>\r\n            <div className='ActionOnPostItem'>\r\n                <select name='status' value={ props.postData.status } onChange={ e => props.onChangeHandler(e) }>\r\n                    <option value='published'>Published</option>\r\n                    <option value='draft'>Draft</option>\r\n                    <option value='trash'>Trash</option>\r\n                </select>\r\n            </div>\r\n            <div className='ActionOnPostItem'>\r\n                <button className='SaveBtn' onClick={ () => onSaveHandler() }>Save</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nActionOnPost.getInitialProps = async ({ query }) => {\r\n\r\n    return { query }\r\n};\r\nexport default withRouter(ActionOnPost);"]},"metadata":{},"sourceType":"module"}