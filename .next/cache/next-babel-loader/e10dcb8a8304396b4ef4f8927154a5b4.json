{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from 'next/dist/client/with-router';\nimport AdminLayout from '../../../../components/layouts/AdminLayout'; // import './TextEditor.scss'\n\nconst textEditor = props => {\n  let contextData = useContext(AppContext);\n  const textArea = useRef(null);\n  const message = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    file: '',\n    message: 'to leave this page please close text editor'\n  });\n  useEffect(() => {\n    if (contextData.settings.textEditorCurrentFile !== '') {\n      textArea.current.value = contextData.textEditorCurrentFile.textEditorCurrentFile;\n    } else {// props.history.push('/admin/FileManager')\n    }\n  }, [, contextData.settings.textEditorCurrentFile, contextData.settings.textEditorEditMode]);\n\n  const onCloseHandler = () => {\n    contextData.dispatchSettings(_objectSpread({}, contextData.dispatchSettings, {\n      textEditorCurrentFile: '',\n      textEditorEditMode: false\n    }));\n    props.router.push(props.router.back());\n  };\n\n  const ReadOnlyOrEditHandler = () => {\n    if (!contextData.settings.textEditorEditMode) {\n      return __jsx(\"textarea\", {\n        className: \"noEditMode\",\n        ref: textArea,\n        value: contextData.settings.textEditorEditMode\n      });\n    } else return __jsx(\"textarea\", {\n      className: \"EditMode\",\n      ref: textArea\n    });\n  };\n\n  let onEditModeHandler = () => {\n    contextData.dispatchSettings(_objectSpread({}, contextData.dispatchSettings, {\n      textEditorEditMode: true\n    }));\n  };\n\n  let onSaveHandler = () => {};\n\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: \"TextEditor\"\n  }, __jsx(\"div\", {\n    className: \"TextEditorControl\"\n  }, __jsx(\"button\", {\n    className: \"closeBtn fas fa-times\",\n    onClick: () => onCloseHandler()\n  }), __jsx(\"button\", {\n    className: \"editBtn fas fa-edit\",\n    onClick: () => onEditModeHandler()\n  }), __jsx(\"button\", {\n    className: \"editBtn fas fa-save\",\n    onClick: () => onSaveHandler()\n  })), __jsx(\"label\", {\n    ref: message\n  }, state.message), __jsx(ReadOnlyOrEditHandler, null)));\n};\n\nexport default withRouter(textEditor);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/fileManager/textEditor/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppContext","withRouter","AdminLayout","textEditor","props","contextData","textArea","message","state","setState","file","settings","textEditorCurrentFile","current","value","textEditorEditMode","onCloseHandler","dispatchSettings","router","push","back","ReadOnlyOrEditHandler","onEditModeHandler","onSaveHandler"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,WAAP,MAAwB,4CAAxB,C,CACA;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AACxB,MAAIC,WAAW,GAAGP,UAAU,CAACE,UAAD,CAA5B;AACA,QAAMM,QAAQ,GAAGP,MAAM,CAAC,IAAD,CAAvB;AACA,QAAMQ,OAAO,GAAGR,MAAM,CAAC,IAAD,CAAtB;AACA,QAAM;AAAA,OAAES,KAAF;AAAA,OAASC;AAAT,MAAsBZ,QAAQ,CAAC;AACjCa,IAAAA,IAAI,EAAE,EAD2B;AAEjCH,IAAAA,OAAO,EAAE;AAFwB,GAAD,CAApC;AAKAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,WAAW,CAACM,QAAZ,CAAqBC,qBAArB,KAA+C,EAAnD,EAAuD;AACnDN,MAAAA,QAAQ,CAACO,OAAT,CAAiBC,KAAjB,GAAyBT,WAAW,CAACO,qBAAZ,CAAkCA,qBAA3D;AACH,KAFD,MAEO,CACH;AACH;AACJ,GANQ,EAMN,GAAIP,WAAW,CAACM,QAAZ,CAAqBC,qBAAzB,EAAgDP,WAAW,CAACM,QAAZ,CAAqBI,kBAArE,CANM,CAAT;;AAQA,QAAMC,cAAc,GAAG,MAAM;AACzBX,IAAAA,WAAW,CAACY,gBAAZ,mBACOZ,WAAW,CAACY,gBADnB;AAEIL,MAAAA,qBAAqB,EAAE,EAF3B;AAGIG,MAAAA,kBAAkB,EAAE;AAHxB;AAKAX,IAAAA,KAAK,CAACc,MAAN,CAAaC,IAAb,CAAkBf,KAAK,CAACc,MAAN,CAAaE,IAAb,EAAlB;AACH,GAPD;;AASA,QAAMC,qBAAqB,GAAG,MAAM;AAChC,QAAI,CAAChB,WAAW,CAACM,QAAZ,CAAqBI,kBAA1B,EAA8C;AAC1C,aACI;AAAU,QAAA,SAAS,EAAC,YAApB;AAAiC,QAAA,GAAG,EAAGT,QAAvC;AAAkD,QAAA,KAAK,EAAGD,WAAW,CAACM,QAAZ,CAAqBI;AAA/E,QADJ;AAGH,KAJD,MAIO,OACH;AAAU,MAAA,SAAS,EAAC,UAApB;AAA+B,MAAA,GAAG,EAAGT;AAArC,MADG;AAGV,GARD;;AAUA,MAAIgB,iBAAiB,GAAG,MAAM;AAC1BjB,IAAAA,WAAW,CAACY,gBAAZ,mBACOZ,WAAW,CAACY,gBADnB;AAEIF,MAAAA,kBAAkB,EAAE;AAFxB;AAIH,GALD;;AAOA,MAAIQ,aAAa,GAAG,MAAM,CAEzB,CAFD;;AAIA,SACI,MAAC,WAAD,QACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAQ,IAAA,SAAS,EAAC,uBAAlB;AAA0C,IAAA,OAAO,EAAG,MAAMP,cAAc;AAAxE,IADJ,EAEI;AAAQ,IAAA,SAAS,EAAC,qBAAlB;AAAwC,IAAA,OAAO,EAAG,MAAMM,iBAAiB;AAAzE,IAFJ,EAGI;AAAQ,IAAA,SAAS,EAAC,qBAAlB;AAAwC,IAAA,OAAO,EAAG,MAAMC,aAAa;AAArE,IAHJ,CADJ,EAMI;AAAO,IAAA,GAAG,EAAGhB;AAAb,KAAyBC,KAAK,CAACD,OAA/B,CANJ,EAQI,MAAC,qBAAD,OARJ,CADJ,CADJ;AAeH,CA9DD;;AA+DA,eAAeN,UAAU,CAACE,UAAD,CAAzB","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport AdminLayout from '../../../../components/layouts/AdminLayout'\r\n// import './TextEditor.scss'\r\n\r\nconst textEditor = props => {\r\n    let contextData = useContext(AppContext)\r\n    const textArea = useRef(null)\r\n    const message = useRef(null)\r\n    const [ state, setState ] = useState({\r\n        file: '',\r\n        message: 'to leave this page please close text editor'\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (contextData.settings.textEditorCurrentFile !== '') {\r\n            textArea.current.value = contextData.textEditorCurrentFile.textEditorCurrentFile\r\n        } else {\r\n            // props.history.push('/admin/FileManager')\r\n        }\r\n    }, [ , contextData.settings.textEditorCurrentFile, contextData.settings.textEditorEditMode ]);\r\n\r\n    const onCloseHandler = () => {\r\n        contextData.dispatchSettings({\r\n            ...contextData.dispatchSettings,\r\n            textEditorCurrentFile: '',\r\n            textEditorEditMode: false\r\n        })\r\n        props.router.push(props.router.back())\r\n    };\r\n\r\n    const ReadOnlyOrEditHandler = () => {\r\n        if (!contextData.settings.textEditorEditMode) {\r\n            return (\r\n                <textarea className='noEditMode' ref={ textArea } value={ contextData.settings.textEditorEditMode }/>\r\n            )\r\n        } else return (\r\n            <textarea className='EditMode' ref={ textArea }/>\r\n        )\r\n    };\r\n\r\n    let onEditModeHandler = () => {\r\n        contextData.dispatchSettings({\r\n            ...contextData.dispatchSettings,\r\n            textEditorEditMode: true\r\n        })\r\n    };\r\n\r\n    let onSaveHandler = () => {\r\n\r\n    };\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <div className='TextEditor'>\r\n                <div className='TextEditorControl'>\r\n                    <button className='closeBtn fas fa-times' onClick={ () => onCloseHandler() }/>\r\n                    <button className='editBtn fas fa-edit' onClick={ () => onEditModeHandler() }/>\r\n                    <button className='editBtn fas fa-save' onClick={ () => onSaveHandler() }/>\r\n                </div>\r\n                <label ref={ message }>{ state.message }</label>\r\n                {/*<button className=\"fas fa-arrow-left\"/>*/ }\r\n                <ReadOnlyOrEditHandler/>\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n\r\n};\r\nexport default withRouter(textEditor);"]},"metadata":{},"sourceType":"module"}