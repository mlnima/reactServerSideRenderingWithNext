{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\nimport { getSetting, updateSetting } from '../../../_variables/ajaxVariables';\nimport './design.scss';\nimport { AppContext } from '../../../context/AppContext';\nimport { getAbsolutePath } from '../../../_variables/_variables';\n\nconst design = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: colors,\n    1: setColors\n  } = useState({\n    //body\n    bodyBackgroundColor: props.design.bodyBackgroundColor || '#000',\n    bodyTextColor: props.design.bodyTextColor || '#fff',\n    //homePageH1\n    homePageH1: props.design.homePageH1 || '#000',\n    //mobile theme\n    themeColor: props.design.themeColor || '#fff',\n    //top bar\n    topBarBackgroundColor: props.design.topBarBackgroundColor || '#181818',\n    topBarTextColor: props.design.topBarTextColor || '#fff',\n    //header\n    headerBackgroundColor: props.design.headerBackgroundColor || '#000',\n    headerTextColor: props.design.headerTextColor || '#fff',\n    //navigation\n    navigationBackgroundColor: props.design.navigationBackgroundColor || '#181818',\n    navigationTextColor: props.design.navigationTextColor || '#fff',\n    //footer\n    footerBackgroundColor: props.design.footerBackgroundColor || '#181818',\n    footerTextColor: props.design.footerTextColor || '#fff',\n    //widgets\n    widgetHeaderBackgroundColor: props.design.widgetHeaderBackgroundColor || '#222222',\n    widgetHeaderTextColor: props.design.widgetHeaderTextColor || '#fff',\n    widgetHeaderRedirectLinkBackgroundColor: props.design.widgetHeaderRedirectLinkBackgroundColor || '#fff',\n    widgetHeaderRedirectLinkTextColor: props.design.widgetHeaderRedirectLinkTextColor || '#fff',\n    widgetBodyBackgroundColor: props.design.widgetBodyBackgroundColor || 'transparent',\n    widgetBodyTextColor: props.design.widgetBodyTextColor || '#fff',\n    widgetBodyBorder: props.design.widgetBodyBorder || 'none',\n    //comments\n    commentsAuthorTextColor: '',\n    commentsDateTextColor: '',\n    commentsBodyTextColor: '',\n    commentsBackgroundColor: ''\n  });\n  const {\n    0: styles,\n    1: setStyles\n  } = useState({\n    h1: {\n      color: 'black'\n    },\n    body: {}\n  });\n\n  const onStyleChangeHandler = e => {\n    setStyles(_objectSpread({}, styles, {\n      [e.target.name]: JSON.parse(e.target.value)\n    }));\n  };\n\n  const renderStylesFields = Object.keys(styles).map(styleName => {\n    return __jsx(\"div\", {\n      className: \"styleItem\"\n    }, __jsx(\"h3\", null, styleName.replace(/([A-Z])/g, \" $1\")), __jsx(\"textarea\", {\n      name: styleName,\n      value: JSON.stringify(styles[styleName]),\n      className: \"styleArea\",\n      onChange: e => onStyleChangeHandler(e)\n    }), __jsx(\"button\", null, \"s\"));\n  });\n\n  const onChangeHandler = e => {\n    setColors(_objectSpread({}, colors, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const onSubmitHandler = e => {\n    e.preventDefault();\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    updateSetting('design', _objectSpread({}, colors)).then(() => {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  const renderColorsFields = Object.keys(colors).map(element => {\n    return __jsx(\"div\", {\n      key: element,\n      className: \"adminDesignSection\"\n    }, __jsx(\"div\", {\n      className: \"adminDesignSectionItems\"\n    }, __jsx(\"div\", {\n      className: \"adminDesignSectionItem\"\n    }, __jsx(\"p\", {\n      className: \"adminDesignSectionItemTitle\"\n    }, element.replace(/([A-Z])/g, \" $1\"), \" :\"), __jsx(\"input\", {\n      name: element,\n      value: colors[element],\n      onChange: e => onChangeHandler(e)\n    }), __jsx(\"div\", {\n      className: \"previewColor\",\n      style: {\n        backgroundColor: colors[element]\n      }\n    }))));\n  });\n  return __jsx(AdminLayout, null, __jsx(\"form\", {\n    className: \"adminDesign\",\n    onSubmit: e => onSubmitHandler(e)\n  }, __jsx(\"div\", {\n    className: \"styleItems\"\n  }, renderStylesFields), __jsx(\"div\", {\n    className: \"colorsContent\"\n  }, renderColorsFields), __jsx(\"button\", {\n    className: \"submitBtn\",\n    type: \"submit\"\n  }, \"save settings\")));\n};\n\ndesign.getInitialProps = async ({\n  req\n}) => {\n  const domainName = req ? await getAbsolutePath(req) : '';\n  let design;\n  const designData = await getSetting('design', false, domainName);\n  design = designData.data.setting ? designData.data.setting.data : {};\n  return {\n    design\n  };\n};\n\nexport default design;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/design/index.js"],"names":["React","useEffect","useState","useContext","useRef","AdminLayout","getSetting","updateSetting","AppContext","getAbsolutePath","design","props","contextData","colors","setColors","bodyBackgroundColor","bodyTextColor","homePageH1","themeColor","topBarBackgroundColor","topBarTextColor","headerBackgroundColor","headerTextColor","navigationBackgroundColor","navigationTextColor","footerBackgroundColor","footerTextColor","widgetHeaderBackgroundColor","widgetHeaderTextColor","widgetHeaderRedirectLinkBackgroundColor","widgetHeaderRedirectLinkTextColor","widgetBodyBackgroundColor","widgetBodyTextColor","widgetBodyBorder","commentsAuthorTextColor","commentsDateTextColor","commentsBodyTextColor","commentsBackgroundColor","styles","setStyles","h1","color","body","onStyleChangeHandler","e","target","name","JSON","parse","value","renderStylesFields","Object","keys","map","styleName","replace","stringify","onChangeHandler","onSubmitHandler","preventDefault","dispatchState","state","loading","then","renderColorsFields","element","backgroundColor","getInitialProps","req","domainName","designData","data","setting"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\r\n\r\nimport { getSetting, updateSetting } from '../../../_variables/ajaxVariables'\r\nimport './design.scss'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport { getAbsolutePath } from '../../../_variables/_variables'\r\n\r\nconst design = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ colors, setColors ] = useState({\r\n        //body\r\n        bodyBackgroundColor: props.design.bodyBackgroundColor || '#000',\r\n        bodyTextColor: props.design.bodyTextColor || '#fff',\r\n        //homePageH1\r\n        homePageH1: props.design.homePageH1 || '#000',\r\n        //mobile theme\r\n        themeColor: props.design.themeColor || '#fff',\r\n        //top bar\r\n        topBarBackgroundColor: props.design.topBarBackgroundColor || '#181818',\r\n        topBarTextColor: props.design.topBarTextColor || '#fff',\r\n        //header\r\n        headerBackgroundColor: props.design.headerBackgroundColor || '#000',\r\n        headerTextColor: props.design.headerTextColor || '#fff',\r\n        //navigation\r\n        navigationBackgroundColor: props.design.navigationBackgroundColor || '#181818',\r\n        navigationTextColor: props.design.navigationTextColor || '#fff',\r\n        //footer\r\n        footerBackgroundColor: props.design.footerBackgroundColor || '#181818',\r\n        footerTextColor: props.design.footerTextColor || '#fff',\r\n        //widgets\r\n        widgetHeaderBackgroundColor: props.design.widgetHeaderBackgroundColor || '#222222',\r\n        widgetHeaderTextColor: props.design.widgetHeaderTextColor || '#fff',\r\n        widgetHeaderRedirectLinkBackgroundColor: props.design.widgetHeaderRedirectLinkBackgroundColor || '#fff',\r\n        widgetHeaderRedirectLinkTextColor: props.design.widgetHeaderRedirectLinkTextColor || '#fff',\r\n        widgetBodyBackgroundColor: props.design.widgetBodyBackgroundColor || 'transparent',\r\n        widgetBodyTextColor: props.design.widgetBodyTextColor || '#fff',\r\n        widgetBodyBorder: props.design.widgetBodyBorder || 'none',\r\n        //comments\r\n        commentsAuthorTextColor: '',\r\n        commentsDateTextColor: '',\r\n        commentsBodyTextColor: '',\r\n        commentsBackgroundColor: '',\r\n\r\n    });\r\n\r\n\r\n    const [styles,setStyles]=useState({\r\n        h1:{\r\n            color:'black'\r\n        },\r\n        body:{}\r\n    })\r\n\r\n\r\n    const onStyleChangeHandler = e =>{\r\n        setStyles({\r\n            ...styles,\r\n            [e.target.name]: JSON.parse(e.target.value)\r\n        })\r\n    }\r\n\r\n\r\n    const renderStylesFields = Object.keys(styles).map(styleName=>{\r\n        return(\r\n            <div className='styleItem'>\r\n                   <h3>{styleName.replace(/([A-Z])/g, \" $1\")}</h3>\r\n                   <textarea name={styleName} value={JSON.stringify(styles[styleName])} className='styleArea' onChange={e=>onStyleChangeHandler(e)}/>\r\n                   <button>s</button>\r\n            </div>\r\n        )\r\n    })\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    const onChangeHandler = e => {\r\n        setColors({\r\n            ...colors,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    const onSubmitHandler = e => {\r\n        e.preventDefault()\r\n        contextData.dispatchState({\r\n            ...contextData.state,\r\n            loading: true\r\n        })\r\n        updateSetting('design', { ...colors }).then(() => {\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            })\r\n        })\r\n    };\r\n    const renderColorsFields = Object.keys(colors).map(element => {\r\n        return (\r\n            <div key={ element } className=\"adminDesignSection\">\r\n                <div className=\"adminDesignSectionItems\">\r\n                    <div className=\"adminDesignSectionItem\">\r\n                        <p className='adminDesignSectionItemTitle'>{ element.replace(/([A-Z])/g, \" $1\") } :</p>\r\n                        <input name={ element } value={ colors[element] } onChange={ e => onChangeHandler(e) }/>\r\n                        <div className=\"previewColor\" style={ { backgroundColor: colors[element] } }/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <form className='adminDesign' onSubmit={ e => onSubmitHandler(e) }>\r\n                <div className=\"styleItems\">\r\n                    {renderStylesFields}\r\n                </div>\r\n                <div className='colorsContent'>\r\n                    { renderColorsFields }\r\n                </div>\r\n                <button className='submitBtn' type='submit'>save settings</button>\r\n            </form>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\ndesign.getInitialProps = async ({ req }) => {\r\n    const domainName = req ? await getAbsolutePath(req) : '';\r\n    let design;\r\n    const designData = await getSetting('design', false, domainName);\r\n    design = designData.data.setting ? designData.data.setting.data : {}\r\n    return { design }\r\n}\r\nexport default design;\r\n"]},"metadata":{},"sourceType":"module"}