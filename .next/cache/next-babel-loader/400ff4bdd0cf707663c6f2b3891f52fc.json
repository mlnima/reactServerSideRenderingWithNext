{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\n\nconst actors = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    metaData: []\n  });\n  useEffect(() => {}, []);\n  const renderActors = state.metaData.map(meta => {\n    return __jsx(TagElement, {\n      key: meta._id,\n      name: meta.name\n    });\n  });\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"actors\"\n  }, renderActors));\n};\n\nactors.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let actors = [];\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n\n  if (query.meta) {\n    const categoriesData = await getMeta({\n      type: query.meta,\n      pageNo: 1,\n      size: 100\n    });\n    actors = categoriesData.data.meta ? categoriesData.data.meta : [];\n  }\n\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  return {\n    identity,\n    navigation,\n    query,\n    actors\n  };\n};\n\nexport default actors;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/actors/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","AppContext","TagElement","getSetting","getMeta","actors","props","contextData","state","setState","metaData","renderActors","map","meta","_id","name","getInitialProps","pathname","query","req","res","err","navigation","identity","identityData","navigationData","categoriesData","type","pageNo","size","data","setting"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,OAAT,QAAwB,wCAAxB;;AAEA,MAAMC,MAAM,GAAGC,KAAK,IAAI;AACpB,QAAMC,WAAW,GAAGT,UAAU,CAACG,UAAD,CAA9B;AACA,QAAM;AAAA,OAAEO,KAAF;AAAA,OAASC;AAAT,MAAsBZ,QAAQ,CAAC;AACjCa,IAAAA,QAAQ,EAAE;AADuB,GAAD,CAApC;AAGAd,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,EACN,EADM,CAAT;AAIA,QAAMe,YAAY,GAAGH,KAAK,CAACE,QAAN,CAAeE,GAAf,CAAmBC,IAAI,IAAI;AAC5C,WACI,MAAC,UAAD;AAAY,MAAA,GAAG,EAAEA,IAAI,CAACC,GAAtB;AAA2B,MAAA,IAAI,EAAED,IAAI,CAACE;AAAtC,MADJ;AAGH,GAJoB,CAArB;AAMA,SACI,MAAC,SAAD,QACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACKJ,YADL,CADJ,CADJ;AAOH,CAtBD;;AAwBAN,MAAM,CAACW,eAAP,GAAyB,OAAO;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,GAAnB;AAAwBC,EAAAA,GAAxB;AAA6BC,EAAAA;AAA7B,CAAP,KAA8C;AACnE,MAAIC,UAAJ;AACA,MAAIC,QAAJ;AACA,MAAIlB,MAAM,GAAG,EAAb;AACA,QAAMmB,YAAY,GAAG,MAAMrB,UAAU,CAAC,UAAD,CAArC;AACA,QAAMsB,cAAc,GAAG,MAAMtB,UAAU,CAAC,YAAD,CAAvC;;AAEA,MAAIe,KAAK,CAACL,IAAV,EAAgB;AACZ,UAAMa,cAAc,GAAG,MAAMtB,OAAO,CAAC;AACjCuB,MAAAA,IAAI,EAAET,KAAK,CAACL,IADqB;AAEjCe,MAAAA,MAAM,EAAE,CAFyB;AAGjCC,MAAAA,IAAI,EAAE;AAH2B,KAAD,CAApC;AAKAxB,IAAAA,MAAM,GAAGqB,cAAc,CAACI,IAAf,CAAoBjB,IAApB,GAA2Ba,cAAc,CAACI,IAAf,CAAoBjB,IAA/C,GAAsD,EAA/D;AACH;;AAEDU,EAAAA,QAAQ,GAAGC,YAAY,CAACM,IAAb,CAAkBC,OAAlB,GAA4BP,YAAY,CAACM,IAAb,CAAkBC,OAAlB,CAA0BD,IAAtD,GAA6D,EAAxE;AACAR,EAAAA,UAAU,GAAGG,cAAc,CAACK,IAAf,CAAoBC,OAApB,GAA8BN,cAAc,CAACK,IAAf,CAAoBC,OAAlD,GAA4D,EAAzE;AACA,SAAO;AAAER,IAAAA,QAAF;AAAYD,IAAAA,UAAZ;AAAwBJ,IAAAA,KAAxB;AAA+Bb,IAAAA;AAA/B,GAAP;AACH,CAnBD;;AAoBA,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport TagElement from '../../../components/includes/TagElement/TagElement'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\n\r\nconst actors = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        metaData: []\r\n    });\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n\r\n    const renderActors = state.metaData.map(meta => {\r\n        return (\r\n            <TagElement key={meta._id} name={meta.name}/>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div className='actors'>\r\n                {renderActors}\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nactors.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let actors = []\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n\r\n    if (query.meta) {\r\n        const categoriesData = await getMeta({\r\n            type: query.meta,\r\n            pageNo: 1,\r\n            size: 100\r\n        })\r\n        actors = categoriesData.data.meta ? categoriesData.data.meta : []\r\n    }\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    return { identity, navigation, query, actors }\r\n}\r\nexport default actors;\r\n"]},"metadata":{},"sourceType":"module"}