{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport { AppContext } from '../../../../context/AppContext';\n\nconst WidgetHeader = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    style: {}\n  });\n  useEffect(() => {\n    setState(_objectSpread({}, state, {\n      style: {\n        widgetHead: {\n          backgroundColor: contextData.siteDesign.widgetHeaderBackgroundColor,\n          color: contextData.siteDesign.widgetHeaderTextColor\n        },\n        redirectLink: {\n          backgroundColor: contextData.siteDesign.widgetHeaderRedirectLinkBackgroundColor,\n          color: contextData.siteDesign.widgetHeaderRedirectLinkTextColor\n        }\n      }\n    }));\n  }, [contextData.siteDesign]);\n\n  const RenderTitle = () => {\n    if (props.title) {\n      return __jsx(\"p\", {\n        className: \"WidgetHeaderTitle\"\n      }, props.title);\n    } else return null;\n  };\n\n  const RenderRedirectLink = () => {\n    if (props.redirectLink && props.redirectToTitle) {\n      return __jsx(Link, {\n        href: props.redirectLink\n      }, __jsx(\"a\", {\n        style: state.style.redirectLink\n      }, props.redirectToTitle));\n    } else return null;\n  };\n\n  if (props.title) {\n    return __jsx(\"div\", {\n      className: \"WidgetHeader\",\n      style: state.style.widgetHead\n    }, __jsx(RenderTitle, null), __jsx(RenderRedirectLink, null));\n  } else return null;\n};\n\nexport default WidgetHeader;","map":null,"metadata":{},"sourceType":"module"}