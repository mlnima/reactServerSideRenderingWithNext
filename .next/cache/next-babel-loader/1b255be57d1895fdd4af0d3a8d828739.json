{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../components/layouts/AppLayout';\nimport { getMultipleSetting } from '../_variables/ajaxVariables';\nimport SiteSettingSetter from '../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport { getAbsolutePath } from '../_variables/_variables';\n\nconst Error = props => {\n  const {\n    0: settings,\n    1: setSettings\n  } = useState({});\n  useEffect(() => {\n    console.log(props);\n  }, [props]);\n  return __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"p\", null, props.statusCode ? `An error ${props.statusCode} occurred on server` : 'An error occurred on client'));\n};\n\nError.getInitialProps = async ({\n  req,\n  res,\n  err\n}) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;\n  const data = res.settingData;\n  const domainName = req ? await getAbsolutePath(req) : '';\n  let settings;\n  const settingsData = await getMultipleSetting({\n    settings: ['identity', 'navigation', 'design']\n  }, true, domainName);\n  settings = settingsData.data.settings ? settingsData.data.settings : [];\n  return {\n    statusCode,\n    settings\n  };\n};\n\nexport default Error;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/_error.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getMultipleSetting","SiteSettingSetter","getAbsolutePath","Error","props","settings","setSettings","console","log","statusCode","getInitialProps","req","res","err","data","settingData","domainName","settingsData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,OAAOC,iBAAP,MAA8B,8DAA9B;AACA,SAASC,eAAT,QAAgC,0BAAhC;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACnB,QAAM;AAAA,OAAEC,QAAF;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,EAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACH,GAFQ,EAEN,CAAEA,KAAF,CAFM,CAAT;AAOA,SACI,MAAC,SAAD,QACI,MAAC,iBAAD,EAAwBA,KAAxB,CADJ,EAEI,iBACMA,KAAK,CAACK,UAAN,GACK,YAAYL,KAAK,CAACK,UAAY,qBADnC,GAEI,6BAHV,CAFJ,CADJ;AAUH,CApBD;;AAsBAN,KAAK,CAACO,eAAN,GAAwB,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,GAAP;AAAYC,EAAAA;AAAZ,CAAP,KAA6B;AACjD,QAAMJ,UAAU,GAAGG,GAAG,GAAGA,GAAG,CAACH,UAAP,GAAoBI,GAAG,GAAGA,GAAG,CAACJ,UAAP,GAAoB,GAAjE;AACA,QAAMK,IAAI,GAAGF,GAAG,CAACG,WAAjB;AACA,QAAMC,UAAU,GAAGL,GAAG,GAAG,MAAMT,eAAe,CAACS,GAAD,CAAxB,GAAgC,EAAtD;AACA,MAAIN,QAAJ;AACA,QAAMY,YAAY,GAAG,MAAMjB,kBAAkB,CAAC;AAAEK,IAAAA,QAAQ,EAAE,CAAE,UAAF,EAAc,YAAd,EAA4B,QAA5B;AAAZ,GAAD,EAAuD,IAAvD,EAA6DW,UAA7D,CAA7C;AACAX,EAAAA,QAAQ,GAAGY,YAAY,CAACH,IAAb,CAAkBT,QAAlB,GAA6BY,YAAY,CAACH,IAAb,CAAkBT,QAA/C,GAA0D,EAArE;AAEA,SAAO;AAAEI,IAAAA,UAAF;AAAcJ,IAAAA;AAAd,GAAP;AACH,CATD;;AAWA,eAAeF,KAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../components/layouts/AppLayout'\r\nimport { getMultipleSetting } from '../_variables/ajaxVariables'\r\nimport SiteSettingSetter from '../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport { getAbsolutePath } from '../_variables/_variables'\r\n\r\nconst Error = props => {\r\n    const [ settings, setSettings ] = useState({})\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n    }, [ props ]);\r\n\r\n\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            <SiteSettingSetter { ...props }/>\r\n            <p>\r\n                { props.statusCode\r\n                    ? `An error ${ props.statusCode } occurred on server`\r\n                    : 'An error occurred on client' }\r\n            </p>\r\n        </AppLayout>\r\n    )\r\n}\r\n\r\nError.getInitialProps = async ({ req, res, err }) => {\r\n    const statusCode = res ? res.statusCode : err ? err.statusCode : 404\r\n    const data = res.settingData\r\n    const domainName = req ? await getAbsolutePath(req) : ''\r\n    let settings;\r\n    const settingsData = await getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }, true, domainName)\r\n    settings = settingsData.data.settings ? settingsData.data.settings : []\r\n\r\n    return { statusCode, settings }\r\n}\r\n\r\nexport default Error\r\n"]},"metadata":{},"sourceType":"module"}