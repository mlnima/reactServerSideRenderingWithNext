{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../components/layouts/AppLayout';\nimport { getSetting } from '../../_variables/ajaxVariables';\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\n\nvar posts = function posts(props) {\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n  }, []);\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"posts\"\n  }, __jsx(SiteSettingSetter, props), \"posts\"));\n};\n\nposts.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, navigation, identity, posts, getPostsData, identityData, navigationData, postsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          getPostsData = {\n            size: 60,\n            pageNo: query.pageNo || 1,\n            postTypeQuery: 'all',\n            fields: ['all'],\n            searchQuery: '',\n            authorQuery: 'all',\n            statusQuery: 'all'\n          };\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 4:\n          identityData = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 7:\n          navigationData = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(getPosts(getPostsData));\n\n        case 10:\n          postsData = _context.sent;\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          posts = postsData.data ? postsData.data : [];\n          return _context.abrupt(\"return\", {\n            identity: identity,\n            navigation: navigation,\n            query: query,\n            posts: posts\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(posts);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/posts/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","getPosts","SiteSettingSetter","withRouter","posts","props","state","setState","console","log","getInitialProps","pathname","query","req","res","err","getPostsData","size","pageNo","postTypeQuery","fields","searchQuery","authorQuery","statusQuery","identityData","navigationData","postsData","identity","data","setting","navigation"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,qCAAlC;AACA,OAAOC,iBAAP,MAA8B,iEAA9B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;AAAA,kBACSV,QAAQ,CAAC,EAAD,CADjB;AAAA,MACXW,KADW;AAAA,MACJC,QADI;;AAEnBb,EAAAA,SAAS,CAAC,YAAM;AACZc,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACH,GAFQ,EAEN,EAFM,CAAT;AAGA,SACI,MAAC,SAAD,QACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,MAAC,iBAAD,EAAyBA,KAAzB,CADJ,UADJ,CADJ;AAQH,CAbD;;AAeAD,KAAK,CAACM,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,QAAT,QAASA,QAAT,EAAmBC,KAAnB,QAAmBA,KAAnB,EAA0BC,GAA1B,QAA0BA,GAA1B,EAA+BC,GAA/B,QAA+BA,GAA/B,EAAoCC,GAApC,QAAoCA,GAApC;AAMdC,UAAAA,YANc,GAMC;AACjBC,YAAAA,IAAI,EAAE,EADW;AAEjBC,YAAAA,MAAM,EAAEN,KAAK,CAACM,MAAN,IAAgB,CAFP;AAGjBC,YAAAA,aAAa,EAAC,KAHG;AAIjBC,YAAAA,MAAM,EAAC,CAAC,KAAD,CAJU;AAKjBC,YAAAA,WAAW,EAAC,EALK;AAMjBC,YAAAA,WAAW,EAAC,KANK;AAOjBC,YAAAA,WAAW,EAAC;AAPK,WAND;AAAA;AAAA,2CAgBOxB,UAAU,CAAC,UAAD,CAhBjB;;AAAA;AAgBdyB,UAAAA,YAhBc;AAAA;AAAA,2CAiBSzB,UAAU,CAAC,YAAD,CAjBnB;;AAAA;AAiBd0B,UAAAA,cAjBc;AAAA;AAAA,2CAkBIxB,QAAQ,CAACe,YAAD,CAlBZ;;AAAA;AAkBdU,UAAAA,SAlBc;AAoBpBC,UAAAA,QAAQ,GAAGH,YAAY,CAACI,IAAb,CAAkBC,OAAlB,GAA4BL,YAAY,CAACI,IAAb,CAAkBC,OAAlB,CAA0BD,IAAtD,GAA6D,EAAxE;AACAE,UAAAA,UAAU,GAAGL,cAAc,CAACG,IAAf,CAAoBC,OAApB,GAA8BJ,cAAc,CAACG,IAAf,CAAoBC,OAAlD,GAA4D,EAAzE;AACAzB,UAAAA,KAAK,GAAGsB,SAAS,CAACE,IAAV,GAAeF,SAAS,CAACE,IAAzB,GAA8B,EAAtC;AAtBoB,2CAuBb;AAAED,YAAAA,QAAQ,EAARA,QAAF;AAAYG,YAAAA,UAAU,EAAVA,UAAZ;AAAwBlB,YAAAA,KAAK,EAALA,KAAxB;AAA+BR,YAAAA,KAAK,EAALA;AAA/B,WAvBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AA0BA,eAAeD,UAAU,CAACC,KAAD,CAAzB","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../_variables/ajaxVariables'\r\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\r\nimport withRouter from 'next/dist/client/with-router'\r\n\r\nconst posts = props => {\r\n    const [ state, setState ] = useState({});\r\n    useEffect(() => {\r\n        console.log(props)\r\n    }, []);\r\n    return (\r\n        <AppLayout>\r\n            <div className='posts'>\r\n                <SiteSettingSetter  { ...props }/>\r\n                posts\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nposts.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let posts;\r\n\r\n\r\n    const getPostsData = {\r\n        size: 60,\r\n        pageNo: query.pageNo || 1,\r\n        postTypeQuery:'all',\r\n        fields:['all'],\r\n        searchQuery:'',\r\n        authorQuery:'all',\r\n        statusQuery:'all'\r\n\r\n    }\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    const postsData = await getPosts(getPostsData)\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    posts = postsData.data?postsData.data:[]\r\n    return { identity, navigation, query, posts }\r\n}\r\n\r\nexport default withRouter(posts);\r\n"]},"metadata":{},"sourceType":"module"}