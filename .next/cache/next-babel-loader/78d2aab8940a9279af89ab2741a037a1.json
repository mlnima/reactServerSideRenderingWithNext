{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from \"../../../components/layouts/AppLayout\";\nimport { getSetting, getWidgetsWithData } from '../../../_variables/ajaxVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport withRouter from 'next/dist/client/with-router';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport RenderMetaDataPages from '../../../components/includes/RenderMetaDataPages/RenderMetaDataPages';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\nimport CategoriesSidebar from '../../../components/includes/pages/Categories/CategoriesSidebar/CategoriesSidebar';\nimport SideBar from '../../../components/includes/SideBar/SideBar'; // import './categories.scss'import './categories.scss'\n\nconst categories = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    style: {}\n  });\n  useEffect(() => {\n    console.log(props);\n\n    if (props.identity.categoriesPagesSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n  const renderCategories = props.categoriesSource.metas.map(meta => {\n    return __jsx(CategoryElement, {\n      key: meta._id,\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    style: state.style,\n    className: props.identity.postPageSidebar ? 'content withSidebar' : 'content withOutSidebar'\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"categories\"\n  }, renderCategories), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getCategoriesData.pageNo,\n    totalCount: props.categoriesSource.totalCount,\n    size: props.getCategoriesData.size,\n    maxPage: Math.ceil(parseInt(props.categoriesSource.totalCount) / parseInt(props.getCategoriesData.size)) - 1,\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })), __jsx(SideBar, {\n    isActive: props.identity.categoriesPagesSidebar,\n    widgets: props.widgets,\n    position: \"categoriesPagesSidebar\"\n  }))));\n};\n\ncategories.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let widgets;\n  let categoriesSource;\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  const widgetsData = await getWidgetsWithData('categoriesPageSidebar');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n  const getCategoriesData = {\n    type: 'category',\n    searchForImageIn: 'categories',\n    pageNo: parseInt(query.page) || 1,\n    size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) || 30,\n    sort: query.sort || 'latest'\n  };\n  const categoriesData = await getMeta(getCategoriesData);\n  categoriesSource = categoriesData.data ? categoriesData.data : [];\n  return {\n    identity,\n    navigation,\n    query,\n    categoriesSource,\n    getCategoriesData,\n    pathname,\n    widgets\n  };\n};\n\nexport default withRouter(categories);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/categories/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getWidgetsWithData","AppContext","getMeta","withRouter","CategoryElement","RenderMetaDataPages","SiteSettingSetter","PaginationComponent","CategoriesSidebar","SideBar","categories","props","state","setState","style","console","log","identity","categoriesPagesSidebar","gridArea","renderCategories","categoriesSource","metas","map","meta","_id","imageUrl","noImageUrl","name","count","postPageSidebar","getCategoriesData","pageNo","totalCount","size","Math","ceil","parseInt","query","router","pathname","widgets","getInitialProps","req","res","err","navigation","identityData","navigationData","widgetsData","data","setting","type","searchForImageIn","page","tagsCountPerPage","sort","categoriesData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from \"../../../components/layouts/AppLayout\";\r\nimport { getSetting, getWidgetsWithData } from '../../../_variables/ajaxVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport withRouter from 'next/dist/client/with-router';\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\r\nimport RenderMetaDataPages from '../../../components/includes/RenderMetaDataPages/RenderMetaDataPages'\r\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent'\r\nimport CategoriesSidebar from '../../../components/includes/pages/Categories/CategoriesSidebar/CategoriesSidebar'\r\nimport SideBar from '../../../components/includes/SideBar/SideBar'\r\n\r\n// import './categories.scss'import './categories.scss'\r\n\r\nconst categories = props => {\r\n\r\n    const [state,setState]=useState({\r\n        style:{}\r\n    })\r\n    useEffect(() => {\r\n        console.log( props)\r\n        if (props.identity.categoriesPagesSidebar){\r\n            setState({\r\n                style: {\r\n                    gridArea:'content'\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [props]);\r\n\r\n    const renderCategories = props.categoriesSource.metas.map(meta => {\r\n        return (\r\n            <CategoryElement key={ meta._id } imageUrl={ meta.imageUrl } noImageUrl={ meta.noImageUrl } name={ meta.name } count={ meta.count }/>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <AppLayout>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <div style={state.style} className={ props.identity.postPageSidebar ? 'content withSidebar':'content withOutSidebar'  } >\r\n                    <div>\r\n                        <div className='categories'>\r\n                            { renderCategories }\r\n                        </div>\r\n                        <PaginationComponent\r\n                            isActive={ true }\r\n                            currentPage={ props.getCategoriesData.pageNo }\r\n                            totalCount={ props.categoriesSource.totalCount }\r\n                            size={ props.getCategoriesData.size }\r\n                            maxPage={ Math.ceil(parseInt(props.categoriesSource.totalCount) / parseInt(props.getCategoriesData.size)) - 1 }\r\n                            queryData={ props.query || props.router.query }\r\n                            pathnameData={ props.pathname || props.router.pathname }\r\n                        />\r\n                    </div>\r\n                    <SideBar isActive={props.identity.categoriesPagesSidebar} widgets={props.widgets} position='categoriesPagesSidebar'/>\r\n                    {/*<CategoriesSidebar isActive={props.identity.categoriesPagesSidebar} widgets={props.widgets} />*/}\r\n                </div>\r\n\r\n            </AppLayout>\r\n        </>\r\n    );\r\n};\r\n\r\ncategories.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let widgets;\r\n    let categoriesSource;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    const widgetsData = await getWidgetsWithData('categoriesPageSidebar')\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    widgets = widgetsData.data.widgets ? widgetsData.data.widgets : []\r\n\r\n    const getCategoriesData = {\r\n        type: 'category',\r\n        searchForImageIn: 'categories',\r\n        pageNo: parseInt(query.page) || 1,\r\n        size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) || 30,\r\n        sort: query.sort || 'latest',\r\n\r\n    }\r\n    const categoriesData = await getMeta(getCategoriesData)\r\n    categoriesSource = categoriesData.data ? categoriesData.data : []\r\n    return { identity, navigation, query, categoriesSource, getCategoriesData, pathname,widgets }\r\n}\r\nexport default withRouter(categories);\r\n"]},"metadata":{},"sourceType":"module"}