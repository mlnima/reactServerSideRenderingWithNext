{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { getPost } from '../../../_variables/ajaxPostsVariables';\nimport { getAbsolutePath } from '../../../_variables/_variables';\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\nimport TitleDescription from \"../../../components/adminIncludes/PostComponents/TitleDescription/TitleDescription\";\nimport ActionOnPost from \"../../../components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost\";\nimport DropDownWidget from \"../../../components/adminIncludes/PostComponents/DropDownWidget/DropDownWidget\";\nimport { AppContext } from \"../../../context/AppContext\";\nimport Format from \"../../../components/adminIncludes/PostComponents/Format/Format\";\nimport PostCategoriesTagsActors from \"../../../components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors\";\nimport VideoInformation from \"../../../components/adminIncludes/PostComponents/VideoInformation/VideoInformation\";\nimport withRouter from \"next/dist/client/with-router\";\nimport TextInputWithUploadBtn from '../../../components/adminIncludes/PostComponents/TextInputWithUploadBtn/TextInputWithUploadBtn';\nimport ImagePreview from '../../../components/adminIncludes/PostComponents/ImagePreview/ImagePreview';\nimport Link from 'next/link';\n\nconst Index = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    tags: [],\n    categories: [],\n    actors: [],\n    inSlideShow: false\n  });\n\n  const onChangeHandler = e => {\n    setState(_objectSpread({}, state, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const onPostMetaChangeHandler = (type, data) => {\n    setState(_objectSpread({}, state, {\n      [type]: data\n    }));\n  };\n\n  useEffect(() => {\n    if (props.router.query.new && state._id) {\n      props.router.reload();\n    } else {\n      setState(props.post);\n    }\n  }, [props]);\n  useEffect(() => {\n    console.log(props.router);\n  }, [props]);\n  return __jsx(React.Fragment, null, __jsx(AdminLayout, null, __jsx(Link, {\n    href: \"/admin/post?new=1\"\n  }, __jsx(\"a\", {\n    className: \"newPostLinkAdminPanel\"\n  }, \"New Post\")), __jsx(\"div\", {\n    className: \"Post\"\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(TitleDescription, {\n    postData: state,\n    onChangeHandler: onChangeHandler\n  }), __jsx(TextInputWithUploadBtn, {\n    postData: state,\n    onChangeHandler: onChangeHandler,\n    name: \"mainThumbnail\",\n    title: \"Main thumbnail\"\n  }), __jsx(ImagePreview, {\n    postData: state\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    component: VideoInformation,\n    title: \"Video Information\",\n    onChangeHandler: onChangeHandler\n  })), __jsx(\"div\", {\n    className: \"side\"\n  }, __jsx(DropDownWidget, {\n    postData: state,\n    component: ActionOnPost,\n    title: state.status,\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    component: Format,\n    title: \"Format\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    isNewPost: props.query.new === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"categories\",\n    title: \"Post Category\",\n    onChangeHandler: onChangeHandler,\n    onPostMetaChangeHandler: onPostMetaChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    isNewPost: props.query.new === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"tags\",\n    title: \"Post Tags\",\n    onChangeHandler: onChangeHandler,\n    onPostMetaChangeHandler: onPostMetaChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    isNewPost: props.query.new === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"actors\",\n    title: \"Post Actors\",\n    onChangeHandler: onChangeHandler,\n    onPostMetaChangeHandler: onPostMetaChangeHandler\n  })))));\n};\n\nIndex.getInitialProps = async ({\n  query,\n  req\n}) => {\n  const domainName = req ? await getAbsolutePath(req) : '';\n  let post;\n  let postData;\n  let requestBody;\n  const newPostData = {\n    status: 'published',\n    postType: 'video',\n    tags: [],\n    categories: [],\n    actors: [],\n    inSlideShow: false,\n    quality: '2160p',\n    views: 0,\n    likes: 0,\n    disLikes: 0\n  };\n\n  if (query.new) {\n    post = newPostData;\n  } else if (query.postTitle || query.id) {\n    requestBody = {\n      postTitle: query.postTitle,\n      _id: query.id\n    };\n    postData = await getPost(requestBody, true, domainName);\n    post = postData.data ? postData.data.post : newPostData;\n  }\n\n  return {\n    post,\n    query\n  };\n};\n\nexport default withRouter(Index);","map":null,"metadata":{},"sourceType":"module"}