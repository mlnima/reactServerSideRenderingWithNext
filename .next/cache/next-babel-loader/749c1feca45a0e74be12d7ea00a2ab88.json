{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../components/layouts/AdminLayout';\nimport FileManagerControl from '../../../components/adminIncludes/FileManagerComponents/FileManagerControl/FileManagerControl';\nimport FileManagerArea from '../../../components/adminIncludes/FileManagerComponents/FileManagerArea/FileManagerArea';\nimport { readPath } from '../../../_variables/_ajaxFilesVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport withRouter from 'next/dist/client/with-router';\nimport UploadedPopView from '../../../components/adminIncludes/FileManagerComponents/UploadedPopView/UploadedPopView';\n\nconst fileManager = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    path: '.',\n    files: [],\n    clickedItem: '/static/uploads/image/2020/4/706185_561483320532764_1215505165_o.jpg',\n    file: '',\n    editFile: false,\n    action: '',\n    _do: '',\n    // AlertBox:false,\n    DeleteAlertBox: false,\n    confirm: Date.now(),\n    didDataChange: false,\n    message: '',\n    report: '',\n    inputBox: false,\n    newItemName: ''\n  });\n  useEffect(() => {\n    setData();\n  }, [state.path, state.didDataChange]);\n  useEffect(() => {\n    console.log(state.clickedItem);\n  }, [state.clickedItem]);\n\n  const setData = () => {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    readPath(state.path).then(res => {\n      if (res.data.type === 'dir') {\n        setState(_objectSpread({}, state, {\n          files: res.data.data\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      } else if (res.data.type === 'file') {\n        contextData.dispatchSettings(_objectSpread({}, contextData.settings, {\n          textEditorCurrentFile: res.data.data\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        })); // props.router.push('/admin/fileManager/textEditor')\n      } else {\n        setState(_objectSpread({}, state, {\n          error: true\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }\n    }).catch(err => {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  const setStateHandler = (key, value) => {\n    setState(_objectSpread({}, state, {\n      [key]: value\n    }));\n  };\n\n  return __jsx(AdminLayout, null, __jsx(UploadedPopView, {\n    clickedItem: state.clickedItem,\n    setStateHandler: setStateHandler\n  }), __jsx(\"div\", {\n    className: \"fileManager\"\n  }, __jsx(FileManagerControl, {\n    setStateHandler: setStateHandler,\n    data: state\n  }), __jsx(FileManagerArea, {\n    setStateHandler: setStateHandler,\n    data: state\n  })));\n};\n\nexport default withRouter(fileManager);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/fileManager/index.js"],"names":["React","useEffect","useState","useContext","useRef","AdminLayout","FileManagerControl","FileManagerArea","readPath","AppContext","withRouter","UploadedPopView","fileManager","props","contextData","state","setState","path","files","clickedItem","file","editFile","action","_do","DeleteAlertBox","confirm","Date","now","didDataChange","message","report","inputBox","newItemName","setData","console","log","dispatchState","loading","then","res","data","type","dispatchSettings","settings","textEditorCurrentFile","error","catch","err","setStateHandler","key","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../components/layouts/AdminLayout'\r\nimport FileManagerControl from '../../../components/adminIncludes/FileManagerComponents/FileManagerControl/FileManagerControl'\r\nimport FileManagerArea from '../../../components/adminIncludes/FileManagerComponents/FileManagerArea/FileManagerArea';\r\nimport { readPath } from '../../../_variables/_ajaxFilesVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport UploadedPopView from '../../../components/adminIncludes/FileManagerComponents/UploadedPopView/UploadedPopView'\r\n\r\nconst fileManager = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        path: '.',\r\n        files: [],\r\n        clickedItem: '/static/uploads/image/2020/4/706185_561483320532764_1215505165_o.jpg',\r\n        file: '',\r\n        editFile: false,\r\n        action: '',\r\n        _do: '',\r\n        // AlertBox:false,\r\n        DeleteAlertBox: false,\r\n        confirm: Date.now(),\r\n        didDataChange: false,\r\n        message: '',\r\n        report: '',\r\n        inputBox: false,\r\n        newItemName: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        setData()\r\n    }, [ state.path, state.didDataChange ]);\r\n\r\n    useEffect(() => {\r\n        console.log(state.clickedItem )\r\n    }, [state.clickedItem]);\r\n    const setData = () => {\r\n        contextData.dispatchState({\r\n            ...contextData.state,\r\n            loading: true\r\n        });\r\n        readPath(state.path).then(res => {\r\n            if (res.data.type === 'dir') {\r\n                setState({\r\n                    ...state,\r\n                    files: res.data.data\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                });\r\n            } else if (res.data.type === 'file') {\r\n                contextData.dispatchSettings({\r\n                    ...contextData.settings,\r\n                    textEditorCurrentFile: res.data.data\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                });\r\n                // props.router.push('/admin/fileManager/textEditor')\r\n            } else {\r\n                setState({\r\n                    ...state,\r\n                    error: true\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            });\r\n        })\r\n    }\r\n\r\n    const setStateHandler = (key, value) => {\r\n        setState({\r\n            ...state,\r\n            [key]: value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <UploadedPopView clickedItem={ state.clickedItem } setStateHandler={ setStateHandler }/>\r\n            <div className='fileManager'>\r\n                <FileManagerControl setStateHandler={ setStateHandler } data={ state }/>\r\n                <FileManagerArea setStateHandler={ setStateHandler } data={ state }/>\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n};\r\nexport default withRouter(fileManager);\r\n"]},"metadata":{},"sourceType":"module"}