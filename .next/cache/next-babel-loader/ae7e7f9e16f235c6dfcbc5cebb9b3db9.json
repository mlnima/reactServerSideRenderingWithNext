{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../components/layouts/AppLayout';\nimport { getSetting } from '../../_variables/ajaxVariables';\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\nimport Posts from '../../components/includes/Posts/Posts';\nimport Link from 'next/link';\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent';\n\nconst posts = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    posts: [],\n    totalCount: 0\n  });\n  const {\n    0: postsData,\n    1: setPostsData\n  } = useState({\n    size: 30,\n    pageNo: 1,\n    postType: 'all',\n    fields: ['all'],\n    keyword: '',\n    author: 'all',\n    status: 'all'\n  });\n  useEffect(() => {\n    if (props.postsSource.posts) {\n      setState(_objectSpread({}, state, {\n        posts: props.postsSource.posts,\n        totalCount: props.postsSource.totalCount\n      }));\n    }\n\n    if (props.getPostsData) {\n      setPostsData(props.getPostsData);\n    }\n  }, [props]);\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"posts\"\n  }, __jsx(SiteSettingSetter, props), __jsx(Posts, {\n    posts: props.postsSource.posts || state.posts\n  }), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: postsData.pageNo,\n    totalCount: state.totalCount,\n    size: postsData.size,\n    maxPage: Math.ceil(parseInt(state.totalCount) / parseInt(postsData.size)) - 1\n  })));\n};\n\nposts.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let postsSource;\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  const getPostsData = {\n    size: parseInt(query.size) || parseInt(identity.postsCountPerPage) || 30,\n    pageNo: parseInt(query.page) || 1,\n    postType: query.type || 'all',\n    fields: ['title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration'],\n    keyword: query.keyword || '',\n    author: query.author || 'all',\n    actor: query.actor || 'all',\n    status: 'published',\n    tag: query.tag || 'all',\n    category: query.category || 'all',\n    sort: query.sort || 'latest'\n  };\n  const postsData = await getPosts(getPostsData);\n  postsSource = postsData.data ? postsData.data : [];\n  return {\n    identity,\n    navigation,\n    query,\n    postsSource,\n    getPostsData\n  };\n};\n\nexport default withRouter(posts);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/posts/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","getPosts","SiteSettingSetter","withRouter","Posts","Link","PaginationComponent","posts","props","state","setState","totalCount","postsData","setPostsData","size","pageNo","postType","fields","keyword","author","status","postsSource","getPostsData","Math","ceil","parseInt","getInitialProps","pathname","query","req","res","err","navigation","identity","identityData","navigationData","data","setting","postsCountPerPage","page","type","actor","tag","category","sort"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../_variables/ajaxVariables'\r\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport Posts from '../../components/includes/Posts/Posts'\r\nimport Link from 'next/link'\r\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent'\r\n\r\nconst posts = props => {\r\n    const [ state, setState ] = useState({\r\n        posts: [],\r\n        totalCount: 0\r\n    });\r\n\r\n    const [ postsData, setPostsData ] = useState({\r\n        size: 30,\r\n        pageNo: 1,\r\n        postType: 'all',\r\n        fields: [ 'all' ],\r\n        keyword: '',\r\n        author: 'all',\r\n        status: 'all',\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (props.postsSource.posts) {\r\n            setState({\r\n                ...state,\r\n                posts: props.postsSource.posts,\r\n                totalCount: props.postsSource.totalCount\r\n            })\r\n        }\r\n        if (props.getPostsData) {\r\n            setPostsData(props.getPostsData)\r\n        }\r\n    }, [ props ]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div className='posts'>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <Posts posts={ props.postsSource.posts || state.posts }/>\r\n                <PaginationComponent\r\n                    isActive={ true }\r\n                    currentPage={postsData.pageNo }\r\n                    totalCount={ state.totalCount }\r\n                    size={ postsData.size }\r\n                    maxPage={ Math.ceil(parseInt(state.totalCount) / parseInt(postsData.size))- 1 }\r\n                  \r\n                />\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nposts.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let postsSource;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n\r\n    const getPostsData = {\r\n        size: parseInt(query.size) || parseInt(identity.postsCountPerPage) ||30,\r\n        pageNo: parseInt(query.page) || 1,\r\n        postType: query.type || 'all',\r\n        fields:  [ 'title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration' ],\r\n        keyword: query.keyword || '',\r\n        author: query.author || 'all',\r\n        actor: query.actor || 'all',\r\n        status: 'published',\r\n        tag: query.tag || 'all',\r\n        category: query.category || 'all',\r\n        sort: query.sort || 'latest',\r\n    }\r\n\r\n\r\n    const postsData = await getPosts(getPostsData)\r\n\r\n\r\n    postsSource = postsData.data ? postsData.data : []\r\n    return { identity, navigation, query, postsSource, getPostsData }\r\n}\r\n\r\nexport default withRouter(posts);\r\n"]},"metadata":{},"sourceType":"module"}