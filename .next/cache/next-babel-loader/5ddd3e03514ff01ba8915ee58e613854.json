{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\n\nconst queryGeneratorForUnCacheRequest = requestItems => {\n  let query = '?';\n\n  for (const item in requestItems) {\n    query += `${item}=${requestItems[item]}`;\n  }\n\n  return query;\n};\n\nconst cacheQueryGenerator = cache => {\n  return cache ? 'cache=1' : '';\n};\n\nexport const getPosts = async (data, cache, domainName) => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(domainName + `/api/v1/posts${queryGeneratorForUnCacheRequest(data)}`, body, {\n    headers: {\n      'cache-control': 'no-cache'\n    }\n  }); // return await axios.post(domainName +`/api/v1/posts`, body)\n};\nexport const getPost = async (data, cache, domainName) => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(domainName + '/api/v1/posts/post', body);\n};\nexport const updatePost = async (data, domainName) => {\n  const body = {\n    postData: data,\n    token: localStorage.wt\n  };\n  return await axios.post(domainName + `/api/v1/posts/updatePost`, body);\n};\nexport const savePost = async (data, domainName) => {\n  const body = {\n    postData: data,\n    token: localStorage.wt\n  };\n  return await axios.post(domainName + `/api/v1/posts/createNewPost`, body);\n};\nexport const getMeta = async (data, cache, domainName) => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(domainName + `/api/v1/posts/getMeta?pageNo=${data.pageNo}&type=${data.type}`, body);\n};\nexport const newComment = async data => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(window.location.origin + `/api/v1/posts/newComment`, body);\n};\nexport const getComments = async (data, cache, domainName) => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(domainName + `/api/v1/posts/getComments`, body);\n};\nexport const updateComment = async data => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(window.location.origin + `/api/v1/posts/updateComment`, body);\n};\nexport const likeDislikeView = async (id, type) => {\n  const body = {\n    id,\n    type\n  };\n  return await axios.post(window.location.origin + '/api/v1/posts/likeDislikeView', body);\n};","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/_variables/ajaxPostsVariables.js"],"names":["axios","queryGeneratorForUnCacheRequest","requestItems","query","item","cacheQueryGenerator","cache","getPosts","data","domainName","body","post","headers","getPost","updatePost","postData","token","localStorage","wt","savePost","getMeta","pageNo","type","newComment","window","location","origin","getComments","updateComment","likeDislikeView","id"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nconst queryGeneratorForUnCacheRequest = (requestItems)=>{\r\n    let query = '?'\r\n    for(const item in requestItems){\r\n        query += `${item}=${requestItems[item]}`\r\n    }\r\n    return query\r\n}\r\n\r\nconst cacheQueryGenerator = cache =>{\r\n    return cache?'cache=1':''\r\n}\r\n\r\n\r\nexport const getPosts = async (data,cache,domainName) => {\r\n\r\n    const body = {\r\n        ...data,\r\n    };\r\n    return await axios.post(domainName +`/api/v1/posts${queryGeneratorForUnCacheRequest(data)}`, body,{\r\n        headers: {\r\n            'cache-control': 'no-cache',\r\n        },\r\n    })\r\n    // return await axios.post(domainName +`/api/v1/posts`, body)\r\n};\r\n\r\nexport const getPost = async (data,cache,domainName) => {\r\n    const body = {\r\n        ...data,\r\n    };\r\n    return await axios.post(domainName +'/api/v1/posts/post' , body)\r\n};\r\n\r\nexport const updatePost = async (data,domainName) => {\r\n    const body = {\r\n        postData: data,\r\n        token: localStorage.wt\r\n    };\r\n    return await axios.post(domainName +`/api/v1/posts/updatePost`, body)\r\n};\r\n\r\nexport const savePost = async (data,domainName) => {\r\n    const body = {\r\n        postData: data,\r\n        token: localStorage.wt\r\n    };\r\n    return await axios.post(domainName +`/api/v1/posts/createNewPost`, body)\r\n};\r\n\r\n\r\n\r\n\r\n\r\nexport const getMeta = async (data,cache,domainName) => {\r\n    const body = {\r\n        ...data,\r\n    };\r\n    return await axios.post(domainName +`/api/v1/posts/getMeta?pageNo=${data.pageNo}&type=${data.type}`, body)\r\n};\r\n\r\n\r\nexport const newComment = async (data) => {\r\n    const body = {\r\n        ...data,\r\n    };\r\n    return await axios.post(window.location.origin +`/api/v1/posts/newComment`, body)\r\n};\r\n\r\nexport const getComments = async (data,cache,domainName) => {\r\n    const body = {\r\n        ...data,\r\n    };\r\n    return await axios.post(domainName +`/api/v1/posts/getComments`, body)\r\n};\r\n\r\nexport const updateComment = async (data) => {\r\n    const body = {\r\n        ...data,\r\n    };\r\n    return await axios.post(window.location.origin +`/api/v1/posts/updateComment`, body)\r\n};\r\n\r\nexport const likeDislikeView = async (id,type) => {\r\n    const body = {\r\n        id,\r\n        type\r\n    };\r\n    return await axios.post(window.location.origin +'/api/v1/posts/likeDislikeView', body)\r\n};\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}