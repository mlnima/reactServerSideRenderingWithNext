{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getSetting, getWidgetsWithData } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\nimport SideBar from '../../../components/includes/Sidebar/Sidebar';\n\nconst tags = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    style: {}\n  });\n  useEffect(() => {\n    console.log(props);\n\n    if (props.identity.tagsPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n  const renderTags = props.tagsSource.metas.map(meta => {\n    return __jsx(TagElement, {\n      key: props.tagsSource.metas.indexOf(meta),\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    style: state.style,\n    className: props.identity.tagsPageSidebar ? 'content withSidebar' : 'content withOutSidebar'\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"tags\"\n  }, renderTags), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getTagsData.pageNo,\n    totalCount: props.tagsSource.totalCount,\n    size: props.getTagsData.size,\n    maxPage: Math.ceil(parseInt(props.tagsSource.totalCount) / parseInt(props.getTagsData.size)) - 1,\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })), __jsx(SideBar, {\n    isActive: props.identity.tagsPageSidebar,\n    widgets: props.widgets,\n    position: \"tagsPageSidebar\"\n  }))));\n};\n\ntags.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let tagsSource;\n  let widgets;\n  const widgetsData = await getWidgetsWithData('tagsPageSidebar');\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  const getTagsData = {\n    type: 'tag',\n    searchForImageIn: 'tags',\n    pageNo: parseInt(query.page) || 1,\n    size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) || 30,\n    sort: query.sort || 'latest'\n  };\n  const tagsData = await getMeta(getTagsData);\n  tagsSource = tagsData.data ? tagsData.data : {\n    tags: [],\n    totalCount: 0\n  };\n  widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n  return {\n    identity,\n    navigation,\n    query,\n    tagsSource,\n    getTagsData,\n    pathname,\n    widgets\n  };\n};\n\nexport default withRouter(tags);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/tags/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getWidgetsWithData","getMeta","AppContext","TagElement","CategoryElement","PaginationComponent","SiteSettingSetter","withRouter","SideBar","tags","props","state","setState","style","console","log","identity","tagsPageSidebar","gridArea","renderTags","tagsSource","metas","map","meta","indexOf","imageUrl","noImageUrl","name","count","getTagsData","pageNo","totalCount","size","Math","ceil","parseInt","query","router","pathname","widgets","getInitialProps","req","res","err","navigation","widgetsData","identityData","navigationData","data","setting","type","searchForImageIn","page","tagsCountPerPage","sort","tagsData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { getSetting, getWidgetsWithData } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport TagElement from '../../../components/includes/TagElement/TagElement'\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement'\r\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent'\r\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport SideBar from '../../../components/includes/Sidebar/Sidebar'\r\n\r\nconst tags = props => {\r\n\r\n    const [state,setState]=useState({\r\n        style:{}\r\n    })\r\n    useEffect(() => {\r\n        console.log( props)\r\n        if (props.identity.tagsPageSidebar){\r\n            setState({\r\n                style: {\r\n                    gridArea:'content'\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [props]);\r\n\r\n    const renderTags = props.tagsSource.metas.map(meta => {\r\n            return (\r\n                <TagElement key={props.tagsSource.metas.indexOf(meta)} imageUrl={meta.imageUrl} noImageUrl={meta.noImageUrl} name={meta.name} count={meta.count}/>\r\n            )\r\n    })\r\n\r\n    return (\r\n        <>\r\n        <AppLayout>\r\n            <SiteSettingSetter  { ...props }/>\r\n            <div style={state.style} className={ props.identity.tagsPageSidebar ? 'content withSidebar':'content withOutSidebar'  } >\r\n                <div>\r\n                    <div className='tags'>\r\n                        {renderTags}\r\n                    </div>\r\n                    <PaginationComponent\r\n                        isActive={ true }\r\n                        currentPage={props.getTagsData.pageNo }\r\n                        totalCount={ props.tagsSource.totalCount }\r\n                        size={ props.getTagsData.size }\r\n                        maxPage={ Math.ceil(parseInt(props.tagsSource.totalCount) / parseInt(props.getTagsData.size))- 1 }\r\n                        queryData={props.query || props.router.query}\r\n                        pathnameData={props.pathname ||props.router.pathname }\r\n                    />\r\n                </div>\r\n                <SideBar isActive={props.identity.tagsPageSidebar} widgets={props.widgets} position='tagsPageSidebar'/>\r\n            </div>\r\n        </AppLayout>\r\n            </>\r\n    );\r\n};\r\n\r\n\r\n\r\ntags.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let tagsSource;\r\n    let widgets;\r\n    const widgetsData = await getWidgetsWithData('tagsPageSidebar')\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n\r\n    const getTagsData = {\r\n        type: 'tag',\r\n        searchForImageIn:'tags',\r\n        pageNo: parseInt(query.page) || 1,\r\n        size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) ||30,\r\n        sort: query.sort || 'latest',\r\n\r\n    }\r\n\r\n\r\n        const tagsData = await getMeta(getTagsData)\r\n        tagsSource = tagsData.data ? tagsData.data : {tags:[],totalCount:0}\r\n         widgets = widgetsData.data.widgets ? widgetsData.data.widgets : []\r\n\r\n\r\n    return { identity, navigation, query, tagsSource,getTagsData,pathname,widgets }\r\n}\r\nexport default withRouter(tags);\r\n"]},"metadata":{},"sourceType":"module"}