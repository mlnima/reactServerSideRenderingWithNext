{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from \"../../../components/layouts/AppLayout\";\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport withRouter from 'next/dist/client/with-router';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport RenderMetaDataPages from '../../../components/includes/RenderMetaDataPages/RenderMetaDataPages';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter'; // import './categories.scss'import './categories.scss'\n\nconst categories = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    metaData: []\n  });\n  useEffect(() => {\n    console.log(props);\n  }, [props]);\n  useEffect(() => {\n    // if (props.navigation) {\n    //     contextData.dispatchNavigationData(props.navigation.data)\n    // }\n    // if (props.identity) {\n    //     contextData.dispatchSiteIdentity(siteIdentity => ({\n    //         ...siteIdentity,\n    //         ...props.identity\n    //     }))\n    // }\n    if (props.categories.length) {\n      setState(_objectSpread({}, state, {\n        metaData: props.categories\n      }));\n    } else if (props.categories.length < 1) {\n      getMeta({\n        type: 'category',\n        pageNo: 1,\n        size: 100,\n        searchForImageIn: 'categories'\n      }).then(res => {\n        console.log(res);\n        setState(_objectSpread({}, state, {\n          metaData: res.data.metas\n        }));\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [props]);\n  const renderCategories = state.metaData.map(meta => {\n    if (meta.count > 0) {\n      return __jsx(CategoryElement, {\n        key: meta._id,\n        imageUrl: meta.imageUrl,\n        noImageUrl: meta.noImageUrl,\n        name: meta.name,\n        count: meta.count\n      });\n    }\n  });\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"categories\"\n  }, __jsx(SiteSettingSetter, props), __jsx(RenderMetaDataPages, props)));\n};\n\ncategories.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let categories = [];\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n\n  if (query.meta) {\n    const categoriesData = await getMeta({\n      type: query.meta,\n      pageNo: 1,\n      size: 100,\n      searchForImageIn: 'categories'\n    });\n    categories = categoriesData.data.metas ? categoriesData.data.metas : [];\n  }\n\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  return {\n    identity,\n    navigation,\n    query,\n    categories\n  };\n};\n\nexport default withRouter(categories);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/categories/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","AppContext","getMeta","withRouter","CategoryElement","RenderMetaDataPages","SiteSettingSetter","categories","props","contextData","state","setState","metaData","console","log","length","type","pageNo","size","searchForImageIn","then","res","data","metas","catch","err","renderCategories","map","meta","count","_id","imageUrl","noImageUrl","name","getInitialProps","pathname","query","req","navigation","identity","identityData","navigationData","categoriesData","setting"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from \"../../../components/layouts/AppLayout\";\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport withRouter from 'next/dist/client/with-router';\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\r\nimport RenderMetaDataPages from '../../../components/includes/RenderMetaDataPages/RenderMetaDataPages'\r\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\n// import './categories.scss'import './categories.scss'\r\n\r\nconst categories = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        metaData: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(props )\r\n    }, [props]);\r\n\r\n    useEffect(() => {\r\n        // if (props.navigation) {\r\n        //     contextData.dispatchNavigationData(props.navigation.data)\r\n        // }\r\n        // if (props.identity) {\r\n        //     contextData.dispatchSiteIdentity(siteIdentity => ({\r\n        //         ...siteIdentity,\r\n        //         ...props.identity\r\n        //     }))\r\n        // }\r\n        if (props.categories.length){\r\n            setState({\r\n                ...state,\r\n                metaData: props.categories\r\n            })\r\n        }else if (props.categories.length<1){\r\n            getMeta({\r\n                type: 'category',\r\n                pageNo: 1,\r\n                size: 100,\r\n                searchForImageIn:'categories',\r\n            }).then(res=>{\r\n                console.log(res )\r\n                setState({\r\n                    ...state,\r\n                    metaData: res.data.metas\r\n                })\r\n            }).catch(err=>{\r\n                console.log( err)\r\n            })\r\n        }\r\n    }, [ props ]);\r\n\r\n    const renderCategories = state.metaData.map(meta => {\r\n        if (meta.count>0){\r\n            return (\r\n                <CategoryElement key={meta._id} imageUrl={meta.imageUrl} noImageUrl={meta.noImageUrl} name={meta.name} count={meta.count}/>\r\n            )\r\n        }\r\n\r\n    })\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div className='categories'>\r\n               <SiteSettingSetter  {...props}/>\r\n                {/*{ renderCategories }*/}\r\n                <RenderMetaDataPages {...props}/>\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\ncategories.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let categories = []\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n\r\n    if (query.meta) {\r\n        const categoriesData = await getMeta({\r\n            type: query.meta,\r\n            pageNo: 1,\r\n            size: 100,\r\n            searchForImageIn:'categories',\r\n        })\r\n        categories = categoriesData.data.metas ? categoriesData.data.metas : []\r\n    }\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    return { identity, navigation, query, categories }\r\n}\r\nexport default withRouter(categories);\r\n"]},"metadata":{},"sourceType":"module"}