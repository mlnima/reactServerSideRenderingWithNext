{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport DropDownWidget from \"../DropDownWidget/DropDownWidget\";\nimport { AppContext } from \"../../../../context/AppContext\";\nimport FA from \"react-fontawesome\";\nimport withRouter from \"next/dist/client/with-router\";\n\nvar ActionOnPost = function ActionOnPost(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {}, []);\n\n  var onSaveHandler = function onSaveHandler() {\n    console.log(props);\n\n    if (contextData.editingPostData._id) {\n      contextData.functions.updatePost(contextData.editingPostData);\n    } else {\n      contextData.functions.savePosts(contextData.editingPostData);\n    }\n  };\n\n  var onStatusChangeHandler = function onStatusChangeHandler(e) {\n    contextData.dispatchEditingPostData(function (editingPostData) {\n      return _objectSpread({}, editingPostData, {\n        status: e.target.value\n      });\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: \"ActionOnPost\"\n  }, __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"button\", {\n    className: \"saveDraftBtn\"\n  }, \"Save Draft\"), __jsx(\"button\", {\n    className: \"previewBtn\"\n  }, \"Preview\")), __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"p\", null, __jsx(FA, {\n    className: \"fontawesomeMedium\",\n    name: \"key\"\n  }), \" Status:\", contextData.editingPostData.status), __jsx(\"select\", {\n    defaultValue: contextData.editingPostData.status ? contextData.editingPostData.status : 'draft',\n    onChange: function onChange(e) {\n      return onStatusChangeHandler(e);\n    }\n  }, __jsx(\"option\", {\n    value: contextData.editingPostData.status\n  }, contextData.editingPostData.status.charAt(0).toUpperCase() + contextData.editingPostData.status.slice(1)), __jsx(\"option\", {\n    value: \"published\"\n  }, \"Published\"), __jsx(\"option\", {\n    value: \"draft\"\n  }, \"Draft\"), __jsx(\"option\", {\n    value: \"trash\"\n  }, \"Trash\"))), __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"button\", {\n    className: \"SaveBtn\",\n    onClick: function onClick() {\n      return onSaveHandler();\n    }\n  }, \"Save\")));\n};\n\nActionOnPost.getInitialProps = function _callee(_ref) {\n  var query;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query;\n          return _context.abrupt(\"return\", {\n            query: query\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(ActionOnPost);","map":null,"metadata":{},"sourceType":"module"}