{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../components/layouts/AppLayout';\nimport { getSetting } from '../../_variables/ajaxVariables';\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\nimport Posts from '../../components/includes/Posts/Posts';\nimport Link from 'next/link';\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent';\n\nvar posts = function posts(props) {\n  var _useState = useState({\n    posts: [],\n    totalCount: 0\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"posts\"\n  }, __jsx(SiteSettingSetter, props), __jsx(Posts, {\n    posts: props.postsSource.posts || state.posts\n  }), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getPostsData.pageNo,\n    totalCount: props.postsSource.totalCount,\n    size: props.getPostsData.size,\n    maxPage: Math.ceil(_parseInt(props.postsSource.totalCount) / _parseInt(props.getPostsData.size)) - 1\n  })));\n};\n\nposts.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, navigation, identity, postsSource, identityData, navigationData, getPostsData, postsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 3:\n          identityData = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 6:\n          navigationData = _context.sent;\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          getPostsData = {\n            size: _parseInt(query.size) || _parseInt(identity.postsCountPerPage) || 30,\n            pageNo: _parseInt(query.page) || 1,\n            postType: query.type || 'all',\n            fields: ['title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration'],\n            keyword: query.keyword || '',\n            author: query.author || 'all',\n            actor: query.actor || 'all',\n            status: 'published',\n            tag: query.tag || 'all',\n            category: query.category || 'all',\n            sort: query.sort || 'latest'\n          };\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(getPosts(getPostsData));\n\n        case 12:\n          postsData = _context.sent;\n          postsSource = postsData.data ? postsData.data : [];\n          return _context.abrupt(\"return\", {\n            identity: identity,\n            navigation: navigation,\n            query: query,\n            postsSource: postsSource,\n            getPostsData: getPostsData\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(posts);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/posts/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","getPosts","SiteSettingSetter","withRouter","Posts","Link","PaginationComponent","posts","props","totalCount","state","setState","postsSource","getPostsData","pageNo","size","Math","ceil","getInitialProps","pathname","query","req","res","err","identityData","navigationData","identity","data","setting","navigation","postsCountPerPage","page","postType","type","fields","keyword","author","actor","status","tag","category","sort","postsData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../_variables/ajaxVariables'\r\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport Posts from '../../components/includes/Posts/Posts'\r\nimport Link from 'next/link'\r\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent'\r\n\r\nconst posts = props => {\r\n    const [ state, setState ] = useState({\r\n        posts: [],\r\n        totalCount: 0\r\n    });\r\n    \r\n    return (\r\n        <AppLayout>\r\n            <div className='posts'>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <Posts posts={ props.postsSource.posts || state.posts }/>\r\n                <PaginationComponent\r\n                    isActive={ true }\r\n                    currentPage={props.getPostsData.pageNo }\r\n                    totalCount={ props.postsSource.totalCount }\r\n                    size={ props.getPostsData.size }\r\n                    maxPage={ Math.ceil(parseInt( props.postsSource.totalCount) / parseInt(props.getPostsData.size))- 1 }\r\n                />\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nposts.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let postsSource;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n\r\n    const getPostsData = {\r\n        size: parseInt(query.size) || parseInt(identity.postsCountPerPage) ||30,\r\n        pageNo: parseInt(query.page) || 1,\r\n        postType: query.type || 'all',\r\n        fields:  [ 'title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration' ],\r\n        keyword: query.keyword || '',\r\n        author: query.author || 'all',\r\n        actor: query.actor || 'all',\r\n        status: 'published',\r\n        tag: query.tag || 'all',\r\n        category: query.category || 'all',\r\n        sort: query.sort || 'latest',\r\n    }\r\n\r\n    const postsData = await getPosts(getPostsData)\r\n\r\n    postsSource = postsData.data ? postsData.data : []\r\n    return { identity, navigation, query, postsSource, getPostsData }\r\n}\r\n\r\nexport default withRouter(posts);\r\n"]},"metadata":{},"sourceType":"module"}