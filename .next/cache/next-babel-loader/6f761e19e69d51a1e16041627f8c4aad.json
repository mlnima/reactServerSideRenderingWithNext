{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport './AdminRenderComments.scss';\n\nconst AdminRenderComments = props => {\n  const {\n    0: hovered,\n    1: setHovered\n  } = useState('');\n  const {\n    0: checkedItems,\n    1: setCheckedItems\n  } = useState([]);\n  useEffect(() => {\n    console.log(checkedItems);\n  }, [checkedItems]);\n\n  const onChangeHandler = (e, id) => {\n    e.target.checked ? setCheckedItems([...checkedItems, id]) : setCheckedItems(checkedItems.filter(i => i !== id));\n  };\n\n  const renderComments = props.comments.map(comment => {\n    const HoveredHandler = () => {\n      if (hovered === comment._id) {\n        return __jsx(\"div\", {\n          className: \"commentControl\"\n        }, __jsx(\"button\", null, \"Approve\"), __jsx(\"button\", null, \"Delete\"), __jsx(\"button\", null, \"Spam\"), __jsx(\"button\", null, \"Pending\"));\n      } else return null;\n    };\n\n    return __jsx(\"div\", {\n      key: props.comments.indexOf(comment),\n      className: \"adminCommentsItem\",\n      onMouseOver: () => setHovered(comment._id)\n    }, __jsx(\"div\", {\n      className: \"adminCommentsItemHead\"\n    }, __jsx(\"input\", {\n      type: \"checkbox\",\n      checked: checkedItems.includes(comment._id),\n      onChange: e => onChangeHandler(e, comment._id)\n    }), __jsx(\"p\", null, comment.author)), __jsx(\"div\", {\n      className: \"adminCommentsItemBody\"\n    }, __jsx(\"p\", null, comment.body), __jsx(HoveredHandler, null)));\n  });\n  return __jsx(\"div\", {\n    className: \"AdminRenderComments\"\n  }, renderComments);\n};\n\nexport default AdminRenderComments;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/commentsPageComponents/AdminRenderComments/AdminRenderComments.js"],"names":["React","useEffect","useState","useContext","useRef","AdminRenderComments","props","hovered","setHovered","checkedItems","setCheckedItems","console","log","onChangeHandler","e","id","target","checked","filter","i","renderComments","comments","map","comment","HoveredHandler","_id","indexOf","includes","author","body"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAO,4BAAP;;AAEA,MAAMC,mBAAmB,GAAGC,KAAK,IAAI;AAEjC,QAAM;AAAA,OAACC,OAAD;AAAA,OAASC;AAAT,MAAuBN,QAAQ,CAAC,EAAD,CAArC;AACA,QAAM;AAAA,OAAEO,YAAF;AAAA,OAAgBC;AAAhB,MAAoCR,QAAQ,CAAC,EAAD,CAAlD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AACH,GAFQ,EAEN,CAAEA,YAAF,CAFM,CAAT;;AAIA,QAAMI,eAAe,GAAG,CAACC,CAAD,EAAIC,EAAJ,KAAW;AAC/BD,IAAAA,CAAC,CAACE,MAAF,CAASC,OAAT,GACIP,eAAe,CAAC,CAAE,GAAGD,YAAL,EAAmBM,EAAnB,CAAD,CADnB,GAEIL,eAAe,CAACD,YAAY,CAACS,MAAb,CAAoBC,CAAC,IAAIA,CAAC,KAAKJ,EAA/B,CAAD,CAFnB;AAGH,GAJD;;AAUA,QAAMK,cAAc,GAAGd,KAAK,CAACe,QAAN,CAAeC,GAAf,CAAmBC,OAAO,IAAI;AACjD,UAAMC,cAAc,GAAG,MAAI;AACvB,UAAIjB,OAAO,KAAKgB,OAAO,CAACE,GAAxB,EAA4B;AACxB,eACI;AAAK,UAAA,SAAS,EAAC;AAAf,WACI,gCADJ,EAEI,+BAFJ,EAGI,6BAHJ,EAII,gCAJJ,CADJ;AAQH,OATD,MASM,OAAO,IAAP;AAET,KAZD;;AAaA,WACI;AAAK,MAAA,GAAG,EAAGnB,KAAK,CAACe,QAAN,CAAeK,OAAf,CAAuBH,OAAvB,CAAX;AAA6C,MAAA,SAAS,EAAC,mBAAvD;AAA4E,MAAA,WAAW,EAAE,MAAIf,UAAU,CAACe,OAAO,CAACE,GAAT;AAAvG,OACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,OAAO,EAAGhB,YAAY,CAACkB,QAAb,CAAsBJ,OAAO,CAACE,GAA9B,CAAjC;AAAsE,MAAA,QAAQ,EAAEX,CAAC,IAAED,eAAe,CAACC,CAAD,EAAGS,OAAO,CAACE,GAAX;AAAlG,MADJ,EAEI,iBAAIF,OAAO,CAACK,MAAZ,CAFJ,CADJ,EAKI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI,iBAAKL,OAAO,CAACM,IAAb,CADJ,EAEI,MAAC,cAAD,OAFJ,CALJ,CADJ;AAYH,GA1BsB,CAAvB;AA2BA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACMT,cADN,CADJ;AAKH,CAnDD;;AAoDA,eAAef,mBAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport './AdminRenderComments.scss'\r\n\r\nconst AdminRenderComments = props => {\r\n\r\n    const [hovered,setHovered] = useState('')\r\n    const [ checkedItems, setCheckedItems ] = useState([])\r\n\r\n    useEffect(() => {\r\n        console.log(checkedItems)\r\n    }, [ checkedItems ]);\r\n\r\n    const onChangeHandler = (e, id) => {\r\n        e.target.checked ?\r\n            setCheckedItems([ ...checkedItems, id ]) :\r\n            setCheckedItems(checkedItems.filter(i => i !== id))\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const renderComments = props.comments.map(comment => {\r\n        const HoveredHandler = ()=>{\r\n            if (hovered === comment._id){\r\n                return(\r\n                    <div className='commentControl'>\r\n                        <button>Approve</button>\r\n                        <button>Delete</button>\r\n                        <button>Spam</button>\r\n                        <button>Pending</button>\r\n                    </div>\r\n                )\r\n            }else return null\r\n\r\n        }\r\n        return (\r\n            <div key={ props.comments.indexOf(comment) } className='adminCommentsItem'  onMouseOver={()=>setHovered(comment._id)}>\r\n                <div className=\"adminCommentsItemHead\">\r\n                    <input type='checkbox' checked={ checkedItems.includes(comment._id) } onChange={e=>onChangeHandler(e,comment._id)}/>\r\n                    <p>{comment.author}</p>\r\n                </div>\r\n                <div className=\"adminCommentsItemBody\">\r\n                    <p>{ comment.body }</p>\r\n                    <HoveredHandler/>\r\n                </div>\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className='AdminRenderComments'>\r\n            { renderComments }\r\n        </div>\r\n    );\r\n};\r\nexport default AdminRenderComments;\r\n"]},"metadata":{},"sourceType":"module"}