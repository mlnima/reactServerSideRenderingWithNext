{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../components/layouts/AdminLayout';\nimport { getComments } from '../../../_variables/ajaxPostsVariables';\nimport AdminRenderComments from '../../../components/adminIncludes/commentsPageComponents/AdminRenderComments/AdminRenderComments';\nimport AdminCommentsControl from '../../../components/adminIncludes/commentsPageComponents/AdminCommentsControl/AdminCommentsControl';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\nimport AppLayout from '../../../components/layouts/AppLayout';\n\nconst comments = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  useEffect(() => {\n    setState(props);\n  }, [props]);\n  return __jsx(AdminLayout, null, __jsx(\"div\", null, __jsx(AdminCommentsControl, {\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  }), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getCommentsData.pageNo,\n    totalCount: props.totalComments,\n    size: props.getCommentsData.size,\n    maxPage: Math.ceil(parseInt(props.totalComments) / parseInt(props.getCommentsData.size)),\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  }), __jsx(AdminRenderComments, state)));\n};\n\ncomments.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let comments;\n  const getCommentsData = {\n    size: parseInt(query.size) || 30,\n    pageNo: parseInt(query.page) || 1,\n    keyword: query.keyword || '',\n    sort: query.sort || 'latest',\n    status: query.status || 'all'\n  };\n  const commentsData = await getComments(getCommentsData);\n  comments = commentsData.data;\n  return {\n    query,\n    pathname,\n    comments: comments.comments,\n    totalComments: comments.count,\n    getCommentsData\n  };\n};\n\nexport default comments;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/comments/index.js"],"names":["React","useEffect","useState","useContext","useRef","AdminLayout","getComments","AdminRenderComments","AdminCommentsControl","PaginationComponent","AppLayout","comments","props","state","setState","query","router","pathname","getCommentsData","pageNo","totalComments","size","Math","ceil","parseInt","getInitialProps","req","res","err","page","keyword","sort","status","commentsData","data","count"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,SAAQC,WAAR,QAA0B,wCAA1B;AACA,OAAOC,mBAAP,MAAgC,kGAAhC;AACA,OAAOC,oBAAP,MAAiC,oGAAjC;AACA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,SAAP,MAAsB,uCAAtB;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACtB,QAAM;AAAA,OAAEC,KAAF;AAAA,OAASC;AAAT,MAAsBZ,QAAQ,CAAC,EAAD,CAApC;AAIAD,EAAAA,SAAS,CAAC,MAAI;AACVa,IAAAA,QAAQ,CAACF,KAAD,CAAR;AACH,GAFQ,EAEP,CAAEA,KAAF,CAFO,CAAT;AAMA,SACI,MAAC,WAAD,QACI,mBACI,MAAC,oBAAD;AACI,IAAA,SAAS,EAAEA,KAAK,CAACG,KAAN,IAAeH,KAAK,CAACI,MAAN,CAAaD,KAD3C;AAEI,IAAA,YAAY,EAAEH,KAAK,CAACK,QAAN,IAAiBL,KAAK,CAACI,MAAN,CAAaC;AAFhD,IADJ,EAKI,MAAC,mBAAD;AACI,IAAA,QAAQ,EAAG,IADf;AAEI,IAAA,WAAW,EAAGL,KAAK,CAACM,eAAN,CAAsBC,MAFxC;AAGI,IAAA,UAAU,EAAGP,KAAK,CAACQ,aAHvB;AAII,IAAA,IAAI,EAAGR,KAAK,CAACM,eAAN,CAAsBG,IAJjC;AAKI,IAAA,OAAO,EAAGC,IAAI,CAACC,IAAL,CAAUC,QAAQ,CAACZ,KAAK,CAACQ,aAAP,CAAR,GAAgCI,QAAQ,CAACZ,KAAK,CAACM,eAAN,CAAsBG,IAAvB,CAAlD,CALd;AAMI,IAAA,SAAS,EAAET,KAAK,CAACG,KAAN,IAAeH,KAAK,CAACI,MAAN,CAAaD,KAN3C;AAOI,IAAA,YAAY,EAAEH,KAAK,CAACK,QAAN,IAAiBL,KAAK,CAACI,MAAN,CAAaC;AAPhD,IALJ,EAcG,MAAC,mBAAD,EAAyBJ,KAAzB,CAdH,CADJ,CADJ;AAoBH,CA/BD;;AAiCAF,QAAQ,CAACc,eAAT,GAA2B,OAAO;AAAER,EAAAA,QAAF;AAAYF,EAAAA,KAAZ;AAAmBW,EAAAA,GAAnB;AAAwBC,EAAAA,GAAxB;AAA6BC,EAAAA;AAA7B,CAAP,KAA6C;AACpE,MAAIjB,QAAJ;AACA,QAAMO,eAAe,GAAG;AACpBG,IAAAA,IAAI,EAAEG,QAAQ,CAACT,KAAK,CAACM,IAAP,CAAR,IAAwB,EADV;AAEpBF,IAAAA,MAAM,EAAEK,QAAQ,CAACT,KAAK,CAACc,IAAP,CAAR,IAAwB,CAFZ;AAGpBC,IAAAA,OAAO,EAAEf,KAAK,CAACe,OAAN,IAAiB,EAHN;AAIpBC,IAAAA,IAAI,EAAEhB,KAAK,CAACgB,IAAN,IAAc,QAJA;AAKpBC,IAAAA,MAAM,EAAEjB,KAAK,CAACiB,MAAN,IAAgB;AALJ,GAAxB;AAOA,QAAMC,YAAY,GAAG,MAAM3B,WAAW,CAACY,eAAD,CAAtC;AACAP,EAAAA,QAAQ,GAACsB,YAAY,CAACC,IAAtB;AACA,SAAO;AAAGnB,IAAAA,KAAH;AAASE,IAAAA,QAAT;AAAkBN,IAAAA,QAAQ,EAACA,QAAQ,CAACA,QAApC;AAA6CS,IAAAA,aAAa,EAACT,QAAQ,CAACwB,KAApE;AAA0EjB,IAAAA;AAA1E,GAAP;AACH,CAZD;;AAaA,eAAeP,QAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../components/layouts/AdminLayout'\r\nimport {getComments} from '../../../_variables/ajaxPostsVariables'\r\nimport AdminRenderComments from '../../../components/adminIncludes/commentsPageComponents/AdminRenderComments/AdminRenderComments'\r\nimport AdminCommentsControl from '../../../components/adminIncludes/commentsPageComponents/AdminCommentsControl/AdminCommentsControl'\r\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent'\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\n\r\nconst comments = props => {\r\n    const [ state, setState ] = useState({});\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        setState(props)\r\n    },[ props]);\r\n\r\n\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <div>\r\n                <AdminCommentsControl\r\n                    queryData={props.query || props.router.query}\r\n                    pathnameData={props.pathname ||props.router.pathname }\r\n                />\r\n                <PaginationComponent\r\n                    isActive={ true }\r\n                    currentPage={ props.getCommentsData.pageNo }\r\n                    totalCount={ props.totalComments }\r\n                    size={ props.getCommentsData.size }\r\n                    maxPage={ Math.ceil(parseInt(props.totalComments) / parseInt(props.getCommentsData.size)) }\r\n                    queryData={props.query || props.router.query}\r\n                    pathnameData={props.pathname ||props.router.pathname }\r\n                />\r\n               <AdminRenderComments {...state}/>\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\ncomments.getInitialProps = async ({ pathname, query, req, res, err }) =>{\r\n    let comments;\r\n    const getCommentsData = {\r\n        size: parseInt(query.size)  ||30,\r\n        pageNo: parseInt(query.page) || 1,\r\n        keyword: query.keyword || '',\r\n        sort: query.sort || 'latest',\r\n        status: query.status || 'all',\r\n    }\r\n    const commentsData = await getComments(getCommentsData)\r\n    comments=commentsData.data\r\n    return {  query,pathname,comments:comments.comments,totalComments:comments.count,getCommentsData }\r\n}\r\nexport default comments;\r\n"]},"metadata":{},"sourceType":"module"}