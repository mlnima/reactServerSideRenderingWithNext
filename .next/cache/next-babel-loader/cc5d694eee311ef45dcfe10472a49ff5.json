{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../components/layouts/AdminLayout';\nimport { getComments } from '../../../_variables/ajaxPostsVariables';\n\nvar comments = function comments(props) {\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n  }, [props]);\n  return __jsx(AdminLayout, null, __jsx(\"div\", null, \"comments\"));\n};\n\ncomments.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, comments, getCommentsData, commentsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          getCommentsData = {\n            size: _parseInt(query.size) || 30,\n            pageNo: _parseInt(query.page) || 1,\n            keyword: query.keyword || '',\n            sort: query.sort || 'latest' // status: 'published',\n\n          };\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getComments(getCommentsData));\n\n        case 4:\n          commentsData = _context.sent;\n          comments = commentsData.data.comments;\n          return _context.abrupt(\"return\", {\n            query: query,\n            pathname: pathname,\n            comments: comments\n          });\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default comments;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/comments/index.js"],"names":["React","useEffect","useState","useContext","useRef","AdminLayout","getComments","comments","props","state","setState","console","log","getInitialProps","pathname","query","req","res","err","getCommentsData","size","pageNo","page","keyword","sort","commentsData","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,SAAQC,WAAR,QAA0B,wCAA1B;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AAAA,kBACMN,QAAQ,CAAC,EAAD,CADd;AAAA,MACdO,KADc;AAAA,MACPC,QADO;;AAEtBT,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,OAAO,CAACC,GAAR,CAAaJ,KAAb;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;AAGA,SACI,MAAC,WAAD,QACI,8BADJ,CADJ;AAOH,CAZD;;AAcAD,QAAQ,CAACM,eAAT,GAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,QAAT,QAASA,QAAT,EAAmBC,KAAnB,QAAmBA,KAAnB,EAA0BC,GAA1B,QAA0BA,GAA1B,EAA+BC,GAA/B,QAA+BA,GAA/B,EAAoCC,GAApC,QAAoCA,GAApC;AAEjBC,UAAAA,eAFiB,GAEC;AACpBC,YAAAA,IAAI,EAAE,UAASL,KAAK,CAACK,IAAf,KAAyB,EADX;AAEpBC,YAAAA,MAAM,EAAE,UAASN,KAAK,CAACO,IAAf,KAAwB,CAFZ;AAGpBC,YAAAA,OAAO,EAAER,KAAK,CAACQ,OAAN,IAAiB,EAHN;AAIpBC,YAAAA,IAAI,EAAET,KAAK,CAACS,IAAN,IAAc,QAJA,CAKpB;;AALoB,WAFD;AAAA;AAAA,2CASIlB,WAAW,CAACa,eAAD,CATf;;AAAA;AASjBM,UAAAA,YATiB;AAUvBlB,UAAAA,QAAQ,GAACkB,YAAY,CAACC,IAAb,CAAkBnB,QAA3B;AAVuB,2CAWhB;AAAGQ,YAAAA,KAAK,EAALA,KAAH;AAASD,YAAAA,QAAQ,EAARA,QAAT;AAAkBP,YAAAA,QAAQ,EAARA;AAAlB,WAXgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAaA,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../components/layouts/AdminLayout'\r\nimport {getComments} from '../../../_variables/ajaxPostsVariables'\r\n\r\nconst comments = props => {\r\n    const [ state, setState ] = useState({});\r\n    useEffect(() => {\r\n        console.log( props)\r\n    }, [props]);\r\n    return (\r\n        <AdminLayout>\r\n            <div>\r\n                comments\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\ncomments.getInitialProps = async ({ pathname, query, req, res, err }) =>{\r\n    let comments;\r\n    const getCommentsData = {\r\n        size: parseInt(query.size)  || 30,\r\n        pageNo: parseInt(query.page) || 1,\r\n        keyword: query.keyword || '',\r\n        sort: query.sort || 'latest',\r\n        // status: 'published',\r\n    }\r\n    const commentsData = await getComments(getCommentsData)\r\n    comments=commentsData.data.comments\r\n    return {  query,pathname,comments }\r\n}\r\nexport default comments;\r\n"]},"metadata":{},"sourceType":"module"}