{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport axios from \"axios\";\nimport { getPost } from \"../../_variables/ajaxPostsVariables\";\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\nimport withRouter from \"next/dist/client/with-router\";\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\nimport Head from \"next/head\";\nimport { getSetting } from \"../../_variables/ajaxVariables\";\nimport { AppContext } from \"../../context/AppContext\";\n\nconst Post = props => {\n  const contextData = useContext(AppContext); // const RenderMeta = () => {\n  //     if (props.post.title) {\n  //         return (\n  //             <Head>\n  //                 <title>{ props.post.title }</title>\n  //                 <meta name=\"description\" content={ props.post.description }/>\n  //                 <meta name=\"keywords\" content={ [ ...props.post.tags, ...props.post.categories, ...props.post.actors ] }/>\n  //                 <meta property=\"og:title\" content={ props.post.title }/>\n  //                 <meta property=\"og:type\" content={ props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType }/>\n  //                 {/*url should define*/ }\n  //                 <meta property=\"og:url\" content={ props.post.videoEmbedCode }/>\n  //                 <meta property=\"og:image\" content={ props.post.mainThumbnail }/>\n  //             </Head>\n  //         )\n  //     } else return null\n  // }\n  // useEffect(()=>{\n  //     console.log( props)\n  //         if(props.navigation){\n  //             contextData.dispatchNavigationData(props.navigation.data)\n  //         }\n  // },[props ]);\n\n  useEffect(() => {\n    if (props.navigation) {\n      contextData.dispatchNavigationData(props.navigation.data);\n    }\n\n    if (props.identity) {\n      contextData.dispatchSiteIdentity(siteIdentity => _objectSpread({}, siteIdentity, {}, props.identity));\n    }\n  }, [props]);\n  return __jsx(AppLayout, null, __jsx(React.Fragment, null, __jsx(\"div\", {\n    className: \"post\"\n  }, __jsx(PostSidebar, null), __jsx(\"div\", {\n    className: \"main\"\n  }, __jsx(Iframe, {\n    iframeCode: props.post.videoEmbedCode,\n    meta: {\n      description: props.post.description,\n      title: props.post.title,\n      duration: props.post.duration,\n      thumbnailUrl: props.post.mainThumbnail,\n      embedURL: props.post.videoEmbedCode,\n      uploadDate: props.post.lastModify\n    }\n  }), __jsx(PostInfo, {\n    title: props.post.title,\n    description: props.post.description,\n    tags: props.post.tags,\n    actors: props.post.actors,\n    categories: props.post.categories,\n    id: props.post._id,\n    likes: props.post.likes,\n    disLikes: props.post.disLikes,\n    views: props.post.views,\n    videoEmbedCode: props.post.videoEmbedCode\n  })))));\n};\n\nPost.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let post;\n  let navigation;\n  let identity;\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  const postBody = {\n    postTitle: query.postTitle\n  };\n  const postData = await axios.post('http://localhost:3000/api/v1/posts/post', postBody);\n  post = postData.data.post;\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  return {\n    post,\n    query,\n    navigation,\n    identity\n  };\n};\n\nexport default withRouter(Post);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/post/index.js"],"names":["React","useEffect","useState","useContext","AppLayout","axios","getPost","Iframe","PostInfo","withRouter","PostSidebar","Head","getSetting","AppContext","Post","props","contextData","navigation","dispatchNavigationData","data","identity","dispatchSiteIdentity","siteIdentity","post","videoEmbedCode","description","title","duration","thumbnailUrl","mainThumbnail","embedURL","uploadDate","lastModify","tags","actors","categories","_id","likes","disLikes","views","getInitialProps","pathname","query","req","res","err","identityData","navigationData","postBody","postTitle","postData","setting"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport AppLayout from \"../../components/layouts/AppLayout\";\r\nimport axios from \"axios\";\r\nimport { getPost } from \"../../_variables/ajaxPostsVariables\";\r\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\r\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\r\nimport Head from \"next/head\";\r\nimport { getSetting } from \"../../_variables/ajaxVariables\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nconst Post = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n\r\n    // const RenderMeta = () => {\r\n    //     if (props.post.title) {\r\n    //         return (\r\n    //             <Head>\r\n    //                 <title>{ props.post.title }</title>\r\n    //                 <meta name=\"description\" content={ props.post.description }/>\r\n    //                 <meta name=\"keywords\" content={ [ ...props.post.tags, ...props.post.categories, ...props.post.actors ] }/>\r\n    //                 <meta property=\"og:title\" content={ props.post.title }/>\r\n    //                 <meta property=\"og:type\" content={ props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType }/>\r\n    //                 {/*url should define*/ }\r\n    //                 <meta property=\"og:url\" content={ props.post.videoEmbedCode }/>\r\n    //                 <meta property=\"og:image\" content={ props.post.mainThumbnail }/>\r\n    //             </Head>\r\n    //         )\r\n    //     } else return null\r\n    // }\r\n\r\n\r\n\r\n    // useEffect(()=>{\r\n    //     console.log( props)\r\n    //         if(props.navigation){\r\n    //             contextData.dispatchNavigationData(props.navigation.data)\r\n    //         }\r\n    // },[props ]);\r\n    useEffect(() => {\r\n        if (props.navigation) {\r\n            contextData.dispatchNavigationData(props.navigation.data)\r\n        }\r\n        if (props.identity) {\r\n            contextData.dispatchSiteIdentity(siteIdentity => ({\r\n                ...siteIdentity,\r\n                ...props.identity\r\n            }))\r\n        }\r\n    }, [ props ]);\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            <>\r\n                {/*<RenderMeta/>*/}\r\n                <div className='post'>\r\n                    <PostSidebar/>\r\n                    <div className=\"main\">\r\n                        <Iframe iframeCode={ props.post.videoEmbedCode } meta={ {\r\n                            description: props.post.description,\r\n                            title: props.post.title,\r\n                            duration: props.post.duration,\r\n                            thumbnailUrl: props.post.mainThumbnail,\r\n                            embedURL: props.post.videoEmbedCode,\r\n                            uploadDate: props.post.lastModify,\r\n                        } }/>\r\n\r\n                        <PostInfo\r\n                            title={ props.post.title }\r\n                            description={ props.post.description }\r\n                            tags={ props.post.tags }\r\n                            actors={ props.post.actors }\r\n                            categories={ props.post.categories }\r\n                            id={ props.post._id }\r\n                            likes={ props.post.likes }\r\n                            disLikes={ props.post.disLikes }\r\n                            views={ props.post.views }\r\n                            videoEmbedCode={ props.post.videoEmbedCode }\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let post;\r\n    let navigation;\r\n    let identity;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    const postBody = {\r\n        postTitle: query.postTitle,\r\n    };\r\n    const postData = await axios.post('http://localhost:3000/api/v1/posts/post', postBody);\r\n    post = postData.data.post\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    return { post, query,navigation,identity }\r\n};\r\n\r\nexport default withRouter(Post);"]},"metadata":{},"sourceType":"module"}