{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from '../../../context/AppContext';\nimport './AlertBox.scss';\n\nconst AlertBox = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  useEffect(() => {}, []);\n\n  const RenderAlertLogo = () => {\n    return contextData.alert.type === 'error' ? 'X' : contextData.alert.type === 'info' ? '!' : null;\n  };\n\n  const onCloseHandler = () => {\n    contextData.dispatchAlert(_objectSpread({}, contextData.alert, {\n      active: false,\n      alertMessage: '',\n      type: ''\n    }));\n  };\n\n  if (contextData.alert.active) {\n    return __jsx(\"div\", {\n      className: \"alert-box\"\n    }, __jsx(\"button\", {\n      className: \"close-alert\",\n      onClick: () => onCloseHandler()\n    }, \"X\"), __jsx(\"div\", {\n      className: \"alert-message\"\n    }, __jsx(\"p\", null, RenderAlertLogo), __jsx(\"p\", null, contextData.alert.alertMessage)));\n  } else return null;\n};\n\nexport default AlertBox;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/includes/AlertBox/AlertBox.js"],"names":["React","useEffect","useState","useContext","useRef","AppContext","AlertBox","props","contextData","state","setState","RenderAlertLogo","alert","type","onCloseHandler","dispatchAlert","active","alertMessage"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAO,iBAAP;;AACA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACtB,QAAMC,WAAW,GAAGL,UAAU,CAACE,UAAD,CAA9B;AACA,QAAM;AAAA,OAAEI,KAAF;AAAA,OAASC;AAAT,MAAsBR,QAAQ,CAAC,EAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,EACN,EADM,CAAT;;AAIA,QAAMU,eAAe,GAAG,MAAI;AACzB,WAAQH,WAAW,CAACI,KAAZ,CAAkBC,IAAlB,KAA2B,OAA3B,GAAqC,GAArC,GACAL,WAAW,CAACI,KAAZ,CAAkBC,IAAlB,KAA2B,MAA3B,GAAoC,GAApC,GACI,IAFZ;AAGF,GAJD;;AAOA,QAAMC,cAAc,GAAG,MAAI;AACvBN,IAAAA,WAAW,CAACO,aAAZ,mBACOP,WAAW,CAACI,KADnB;AAEII,MAAAA,MAAM,EAAE,KAFZ;AAGIC,MAAAA,YAAY,EAAE,EAHlB;AAIIJ,MAAAA,IAAI,EAAE;AAJV;AAMH,GAPD;;AAWA,MAAIL,WAAW,CAACI,KAAZ,CAAkBI,MAAtB,EAA6B;AACzB,WACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI;AAAQ,MAAA,SAAS,EAAC,aAAlB;AAAgC,MAAA,OAAO,EAAE,MAAIF,cAAc;AAA3D,WADJ,EAEG;AAAK,MAAA,SAAS,EAAC;AAAf,OACI,iBAAIH,eAAJ,CADJ,EAEI,iBAAIH,WAAW,CAACI,KAAZ,CAAkBK,YAAtB,CAFJ,CAFH,CADJ;AASH,GAVD,MAUM,OAAO,IAAP;AAET,CArCD;;AAsCA,eAAeX,QAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport './AlertBox.scss'\r\nconst AlertBox = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({});\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n\r\n    const RenderAlertLogo = ()=>{\r\n       return  contextData.alert.type === 'error' ? 'X':\r\n               contextData.alert.type === 'info' ? '!':\r\n                   null\r\n    }\r\n\r\n\r\n    const onCloseHandler = ()=>{\r\n        contextData.dispatchAlert({\r\n            ...contextData.alert,\r\n            active: false,\r\n            alertMessage: '',\r\n            type: ''\r\n        })\r\n    }\r\n\r\n\r\n\r\n    if (contextData.alert.active){\r\n        return (\r\n            <div className='alert-box'>\r\n                <button className='close-alert' onClick={()=>onCloseHandler()}>X</button>\r\n               <div className='alert-message'>\r\n                   <p>{RenderAlertLogo}</p>\r\n                   <p>{contextData.alert.alertMessage}</p>\r\n               </div>\r\n            </div>\r\n        );\r\n    }else return null\r\n\r\n};\r\nexport default AlertBox;\r\n"]},"metadata":{},"sourceType":"module"}