{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport { AppContext } from '../../../context/AppContext';\n\nconst tags = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    metaData: []\n  });\n  useEffect(() => {\n    console.log(props);\n  }, [props]);\n  useEffect(() => {\n    if (props.navigation) {\n      contextData.dispatchNavigationData(props.navigation.data);\n    }\n\n    if (props.identity) {\n      contextData.dispatchSiteIdentity(siteIdentity => _objectSpread({}, siteIdentity, {}, props.identity));\n    }\n\n    if (props.tags.length) {\n      setState(_objectSpread({}, state, {\n        metaData: props.categories\n      }));\n    } else if (props.tags.length < 1) {\n      getMeta({\n        type: 'tag',\n        pageNo: 1,\n        size: 100\n      }).then(res => {\n        console.log(res);\n        setState(_objectSpread({}, state, {\n          metaData: res.data.meta\n        }));\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [props]);\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"tags\"\n  }));\n};\n\ntags.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let tags = [];\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n\n  if (query.meta) {\n    const tagsData = await getMeta({\n      type: query.meta,\n      pageNo: 1,\n      size: 100\n    });\n    tags = tagsData.data.meta ? tagsData.data.meta : [];\n  }\n\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  return {\n    identity,\n    navigation,\n    query,\n    tags\n  };\n};\n\nexport default tags;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/tags/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","AppContext","tags","props","contextData","state","setState","metaData","console","log","navigation","dispatchNavigationData","data","identity","dispatchSiteIdentity","siteIdentity","length","categories","type","pageNo","size","then","res","meta","catch","err","getInitialProps","pathname","query","req","identityData","navigationData","tagsData","setting"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\n\r\nconst tags = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        metaData: []\r\n    });\r\n    useEffect(() => {\r\n        console.log(props )\r\n    }, [props]);\r\n    useEffect(() => {\r\n        if (props.navigation) {\r\n            contextData.dispatchNavigationData(props.navigation.data)\r\n        }\r\n        if (props.identity) {\r\n            contextData.dispatchSiteIdentity(siteIdentity => ({\r\n                ...siteIdentity,\r\n                ...props.identity\r\n            }))\r\n        }\r\n        if (props.tags.length){\r\n            setState({\r\n                ...state,\r\n                metaData: props.categories\r\n            })\r\n        }else if (props.tags.length<1){\r\n            getMeta({\r\n                type: 'tag',\r\n                pageNo: 1,\r\n                size: 100\r\n            }).then(res=>{\r\n                console.log(res )\r\n                setState({\r\n                    ...state,\r\n                    metaData: res.data.meta\r\n                })\r\n            }).catch(err=>{\r\n                console.log( err)\r\n            })\r\n        }\r\n    }, [ props ]);\r\n    return (\r\n        <AppLayout>\r\n            <div className='tags'>\r\n\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\n\r\ntags.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let tags = []\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n\r\n    if (query.meta) {\r\n        const tagsData = await getMeta({\r\n            type: query.meta,\r\n            pageNo: 1,\r\n            size: 100\r\n        })\r\n        tags = tagsData.data.meta ? tagsData.data.meta : []\r\n    }\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    return { identity, navigation, query, tags }\r\n}\r\nexport default tags;\r\n"]},"metadata":{},"sourceType":"module"}