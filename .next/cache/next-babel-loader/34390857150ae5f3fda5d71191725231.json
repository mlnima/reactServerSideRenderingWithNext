{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef, createRef } from 'react'; // import {Link, withRouter} from \"react-router-dom\";\n// import {updatePostStatus, deletePost, postsBulkAction, getPosts} from \"../../../../../variables/_ajaxPostsVariable\";\n// import QuickEdit from \"../QuickEdit/QuickEdit\";\n// import {adminTokenValidator} from \"../../../../../variables/_ajaxAuthVariables\";\n\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from \"next/dist/client/with-router\";\n\nvar BodyTable = function BodyTable(props) {\n  var contextData = useContext(AppContext); // let selectBoxes = useRef(contextData.postsData.posts.map(() => createRef()));\n\n  var _useState = useState({\n    hoveredId: ''\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var setData = function setData() {\n    // getPosts(\n    //     contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo,\n    //     ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status,\n    //     contextData.postsData.author, contextData.postsData.keyword).then(res => {\n    //     contextData.setPostsData({\n    //         ...contextData.postsData,\n    //         posts: res.data.posts,\n    //         error: res.data.error,\n    //         totalCount: res.data.totalCount\n    //     });\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         loading: false\n    //     });\n    // }).catch(() => {\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         login: false\n    //     })\n    // })\n    return null;\n  };\n\n  var onTrashHandler = function onTrashHandler() {// contextData.setState({\n    //     ...contextData.state,\n    //     loading: true\n    // });\n    // postsBulkAction([state.hoveredId], 'Trash').then(res => {\n    //     setData()\n    // }).catch(err => {\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         loading: false\n    //     });\n    // })\n  }; // const onDeletePermanentlyHandler = (id)=>{\n  //\n  // }\n\n\n  var onDeletePermanentlyHandler = function onDeletePermanentlyHandler() {// deletePost(state.hoveredId).then(res => {\n    //     const posts = contextData.postsData.posts.filter(post => {\n    //         return post._id !== state.hoveredId\n    //     });\n    //     const report = contextData.state.reports.push(res.data.message)\n    //     contextData.setPostsData({\n    //         ...contextData.postsData,\n    //         posts\n    //     });\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         report\n    //     })\n    // })\n  };\n\n  var onRestoreHandler = function onRestoreHandler() {// contextData.setState({\n    //     ...contextData.state,\n    //     loading: true\n    // });\n    // postsBulkAction([state.hoveredId], 'Draft').then(res => {\n    //     setData()\n    // }).catch(err => {\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         loading: false\n    //     });\n    // })\n  };\n\n  var HoverOnTitle = function HoverOnTitle(props) {\n    if (props.post._id === state.hoveredId) {\n      var editPostPath = \"/admin/Post/\".concat(props.post._id);\n\n      if (props.post.status === 'Trash') {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          to: editPostPath\n        }, \"Edit\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onDeletePermanentlyHandler(props.post._id);\n          }\n        }, \"Delete Permanently\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onRestoreHandler();\n          }\n        }, \"Move to Draft\"));\n      } else {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          to: editPostPath\n        }, \"Edit\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onTrashHandler();\n          }\n        }, \"Trash\"), __jsx(\"button\", null, \"View\"));\n      }\n    } else return __jsx(\"div\", {\n      className: \"postControlOptions\"\n    });\n  };\n\n  var onCheckHandler = function onCheckHandler(e) {//\n    // if (e.target.checked) {\n    //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts;\n    //         pushedItemArr.push(e.target.name);\n    //         pushedItemArr = [...new Set(pushedItemArr)]\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    //\n    // } else {\n    //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\n    //             return id !== e.target.name\n    //         });\n    //         pushedItemArr = [...new Set(pushedItemArr)];\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    // }\n  }; // let renderPosts = contextData.postsData.posts.map(post => {\n  //     let author = post.author;\n  //     if (post.author === contextData.adminData._id) {\n  //         author = contextData.adminData.username\n  //     }\n  //     let isChecked =  contextData.postsData.checkedPosts.includes(post._id)\n  //     return (\n  //         <tr key={post._id} className='BodyTableItems' onMouseEnter={() => {\n  //             setState({...state, hoveredId: post._id})\n  //         }}>\n  //             <td className='postColumn'>\n  //                 <div>\n  //                     <input name={post._id} className=' BodyTableItemCheckBox' type='checkbox'\n  //                            ref={e => selectBoxes.current[contextData.postsData.posts.indexOf(post)] = e}\n  //                         checked={isChecked}\n  //                            onChange={(e) => onCheckHandler(e)}/>\n  //                 </div>\n  //                 <div>\n  //                     <p className='BodyTableItem'>{post.title.en}</p>\n  //                     <HoverOnTitle post={post}/>\n  //                 </div>\n  //                 <div>\n  //                     <p className='BodyTableItem author'>{author}</p>\n  //                 </div>\n  //\n  //                 <div className='tagPreview BodyTableItem'>\n  //                     {post.categories.map(category => {\n  //                         return (\n  //                             <Link to='/' key={category} className='tagPreviewItem'>{category} ,</Link>\n  //                         )\n  //                     })}\n  //                 </div>\n  //                 <div className='tagPreview BodyTableItem'>\n  //                     {post.tags.map(tag => {\n  //                         return (\n  //                             <Link to='/' key={tag} className='tagPreviewItem'>{tag} ,</Link>\n  //                         )\n  //                     })}\n  //                 </div>\n  //                 <div className='actorsPreview BodyTableItem'>\n  //                     {post.actors.map(actor => {\n  //                         return (\n  //                             <Link to='/' key={actor} className='actorsPreviewItem'>{actor} ,</Link>\n  //                         )\n  //                     })}\n  //                 </div>\n  //                 <div>\n  //                     <p className='BodyTableItem'>{post.status}</p>\n  //                 </div>\n  //                 <div>\n  //                     <img className='BodyTableItem' src={post.imageUrl}/>\n  //                 </div>\n  //             </td>\n  //         </tr>\n  //     )\n  // });\n\n\n  return __jsx(\"tbody\", {\n    className: \"BodyTable\"\n  }, \"xxc\");\n};\n\nexport default withRouter(BodyTable);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostsComponents/PostsDataTable/BodyTable.js"],"names":["React","useEffect","useState","useContext","useRef","createRef","AppContext","withRouter","BodyTable","props","contextData","hoveredId","state","setState","setData","onTrashHandler","onDeletePermanentlyHandler","onRestoreHandler","HoverOnTitle","post","_id","editPostPath","status","onCheckHandler","e"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext, useRef, createRef} from 'react';\r\n// import {Link, withRouter} from \"react-router-dom\";\r\n// import {updatePostStatus, deletePost, postsBulkAction, getPosts} from \"../../../../../variables/_ajaxPostsVariable\";\r\n// import QuickEdit from \"../QuickEdit/QuickEdit\";\r\n// import {adminTokenValidator} from \"../../../../../variables/_ajaxAuthVariables\";\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\n\r\n\r\nconst BodyTable = props => {\r\n    const contextData = useContext(AppContext);\r\n    // let selectBoxes = useRef(contextData.postsData.posts.map(() => createRef()));\r\n    const [state, setState] = useState({\r\n        hoveredId: '',\r\n    });\r\n\r\n    const setData = () => {\r\n        // getPosts(\r\n        //     contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo,\r\n        //     ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status,\r\n        //     contextData.postsData.author, contextData.postsData.keyword).then(res => {\r\n        //     contextData.setPostsData({\r\n        //         ...contextData.postsData,\r\n        //         posts: res.data.posts,\r\n        //         error: res.data.error,\r\n        //         totalCount: res.data.totalCount\r\n        //     });\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         loading: false\r\n        //     });\r\n        // }).catch(() => {\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         login: false\r\n        //     })\r\n        // })\r\n        return null\r\n    };\r\n\r\n    const onTrashHandler = () => {\r\n        // contextData.setState({\r\n        //     ...contextData.state,\r\n        //     loading: true\r\n        // });\r\n        // postsBulkAction([state.hoveredId], 'Trash').then(res => {\r\n        //     setData()\r\n        // }).catch(err => {\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         loading: false\r\n        //     });\r\n        // })\r\n\r\n    };\r\n\r\n    // const onDeletePermanentlyHandler = (id)=>{\r\n    //\r\n    // }\r\n\r\n    const onDeletePermanentlyHandler = () => {\r\n        // deletePost(state.hoveredId).then(res => {\r\n        //     const posts = contextData.postsData.posts.filter(post => {\r\n        //         return post._id !== state.hoveredId\r\n        //     });\r\n        //     const report = contextData.state.reports.push(res.data.message)\r\n        //     contextData.setPostsData({\r\n        //         ...contextData.postsData,\r\n        //         posts\r\n        //     });\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         report\r\n        //     })\r\n        // })\r\n    };\r\n\r\n    const onRestoreHandler = () => {\r\n        // contextData.setState({\r\n        //     ...contextData.state,\r\n        //     loading: true\r\n        // });\r\n        // postsBulkAction([state.hoveredId], 'Draft').then(res => {\r\n        //     setData()\r\n        // }).catch(err => {\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         loading: false\r\n        //     });\r\n        // })\r\n    };\r\n\r\n    let HoverOnTitle = (props) => {\r\n        if (props.post._id === state.hoveredId) {\r\n            let editPostPath = `/admin/Post/${props.post._id}`;\r\n            if (props.post.status === 'Trash') {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link to={editPostPath}>Edit</Link>\r\n                        <button onClick={() => onDeletePermanentlyHandler(props.post._id )}>Delete Permanently</button>\r\n                        <button onClick={() => onRestoreHandler()}>Move to Draft</button>\r\n                        {/*<button onClick={() => quickEditBtnHandler(props.post._id)}>QEdit</button>*/}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link to={editPostPath}>Edit</Link>\r\n                        <button onClick={() => onTrashHandler()}>Trash</button>\r\n                        <button>View</button>\r\n                        {/*<button onClick={() => quickEditBtnHandler(props.post._id)}>QEdit</button>*/}\r\n                    </div>\r\n                )\r\n            }\r\n\r\n\r\n        } else return (\r\n            <div className='postControlOptions'>\r\n\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const onCheckHandler = e => {\r\n        //\r\n        // if (e.target.checked) {\r\n        //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts;\r\n        //         pushedItemArr.push(e.target.name);\r\n        //         pushedItemArr = [...new Set(pushedItemArr)]\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        //\r\n        // } else {\r\n        //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\r\n        //             return id !== e.target.name\r\n        //         });\r\n        //         pushedItemArr = [...new Set(pushedItemArr)];\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        // }\r\n    };\r\n\r\n    // let renderPosts = contextData.postsData.posts.map(post => {\r\n    //     let author = post.author;\r\n    //     if (post.author === contextData.adminData._id) {\r\n    //         author = contextData.adminData.username\r\n    //     }\r\n    //     let isChecked =  contextData.postsData.checkedPosts.includes(post._id)\r\n    //     return (\r\n    //         <tr key={post._id} className='BodyTableItems' onMouseEnter={() => {\r\n    //             setState({...state, hoveredId: post._id})\r\n    //         }}>\r\n    //             <td className='postColumn'>\r\n    //                 <div>\r\n    //                     <input name={post._id} className=' BodyTableItemCheckBox' type='checkbox'\r\n    //                            ref={e => selectBoxes.current[contextData.postsData.posts.indexOf(post)] = e}\r\n    //                         checked={isChecked}\r\n    //                            onChange={(e) => onCheckHandler(e)}/>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                     <p className='BodyTableItem'>{post.title.en}</p>\r\n    //                     <HoverOnTitle post={post}/>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                     <p className='BodyTableItem author'>{author}</p>\r\n    //                 </div>\r\n    //\r\n    //                 <div className='tagPreview BodyTableItem'>\r\n    //                     {post.categories.map(category => {\r\n    //                         return (\r\n    //                             <Link to='/' key={category} className='tagPreviewItem'>{category} ,</Link>\r\n    //                         )\r\n    //                     })}\r\n    //                 </div>\r\n    //                 <div className='tagPreview BodyTableItem'>\r\n    //                     {post.tags.map(tag => {\r\n    //                         return (\r\n    //                             <Link to='/' key={tag} className='tagPreviewItem'>{tag} ,</Link>\r\n    //                         )\r\n    //                     })}\r\n    //                 </div>\r\n    //                 <div className='actorsPreview BodyTableItem'>\r\n    //                     {post.actors.map(actor => {\r\n    //                         return (\r\n    //                             <Link to='/' key={actor} className='actorsPreviewItem'>{actor} ,</Link>\r\n    //                         )\r\n    //                     })}\r\n    //                 </div>\r\n    //                 <div>\r\n    //                     <p className='BodyTableItem'>{post.status}</p>\r\n    //                 </div>\r\n    //                 <div>\r\n    //                     <img className='BodyTableItem' src={post.imageUrl}/>\r\n    //                 </div>\r\n    //             </td>\r\n    //         </tr>\r\n    //     )\r\n    // });\r\n\r\n    return (\r\n        <tbody className='BodyTable'>\r\n        {/*{renderPosts}*/}\r\n        xxc\r\n        </tbody>\r\n    );\r\n};\r\nexport default withRouter(BodyTable);"]},"metadata":{},"sourceType":"module"}