{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\nimport { DelayInput } from 'react-delay-input';\nimport './customScript.scss';\nimport { AppContext } from '../../../../context/AppContext';\nimport { getAbsolutePath } from '../../../../_variables/_variables';\nimport { getSetting } from '../../../../_variables/ajaxVariables';\nimport settings from '../general';\n\nconst customScript = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: newScript,\n    1: setNewScript\n  } = useState({\n    scriptName: '',\n    scriptBody: ''\n  });\n  const {\n    0: scriptsName,\n    1: setScriptsName\n  } = useState([]);\n  useEffect(() => {\n    setScriptsName((contextData.siteIdentity.customScripts || []).map(script => script.scriptName));\n  }, [contextData.siteIdentity.customScripts]);\n\n  const onNewScriptChangeHandler = e => {\n    setNewScript(_objectSpread({}, newScript, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const onAddHandler = async e => {\n    e.preventDefault();\n\n    if (scriptsName.includes(newScript.scriptName)) {\n      contextData.dispatchAlert({\n        active: true,\n        alertMessage: 'already there is script with this name',\n        type: 'error'\n      });\n    } else {\n      contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n        customScripts: [...contextData.siteIdentity.customScripts, newScript]\n      }));\n    }\n  };\n\n  const onDeleteHandler = scriptName => {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      customScripts: contextData.siteIdentity.customScripts.filter(script => script.scriptName !== scriptName)\n    }));\n  };\n\n  const onSaveHandler = () => {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    contextData.functions.updateSetting('identity', contextData.siteIdentity).then(() => {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    }).catch(err => {\n      console.log(err);\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  const onGoogleAnalyticsSaveHandler = e => {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      googleAnalyticsID: e.target.value\n    }));\n  };\n\n  const renderScripts = (contextData.siteIdentity.customScripts || []).map(script => {\n    const onChangeHandler = e => {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: true\n      }));\n      const scriptIndex = contextData.siteIdentity.customScripts.findIndex(addedScript => addedScript.scriptName === script.scriptName);\n\n      const updatedScript = _objectSpread({}, contextData.siteIdentity.customScripts[scriptIndex], {\n        [e.target.name]: e.target.value\n      });\n\n      setTimeout(() => {\n        const updatedScripts = [...contextData.siteIdentity.customScripts.slice(0, scriptIndex), updatedScript, ...contextData.siteIdentity.customScripts.slice(scriptIndex + 1)];\n        contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n          customScripts: updatedScripts\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }, 500);\n    };\n\n    return __jsx(\"div\", {\n      key: script.scriptName,\n      className: \"customScriptPageItem\"\n    }, __jsx(\"div\", {\n      className: \"customScriptPageItemHead\"\n    }, __jsx(DelayInput, {\n      className: \"customScriptPageItemHeadName\",\n      name: \"scriptName\",\n      value: script.scriptName,\n      delayTimeout: 1000,\n      onChange: e => onChangeHandler(e)\n    }), __jsx(\"button\", {\n      className: \"removeScript\",\n      onClick: () => onDeleteHandler(script.scriptName)\n    }, \"X\")), __jsx(DelayInput, {\n      element: \"textarea\",\n      className: \"customScript\",\n      name: \"scriptBody\",\n      value: script.scriptBody,\n      delayTimeout: 1000,\n      onChange: e => onChangeHandler(e)\n    }));\n  });\n  return __jsx(AdminLayout, null, __jsx(\"input\", {\n    placeholder: \"Google Analytics ID\",\n    type: \"text\",\n    name: \"googleAnalyticsID\",\n    value: contextData.siteIdentity.googleAnalyticsID,\n    className: \"googleAnalyticsInput\",\n    onChange: e => onGoogleAnalyticsSaveHandler(e)\n  }), __jsx(\"form\", {\n    className: \"addCustomScriptForm\",\n    onSubmit: e => onAddHandler(e)\n  }, __jsx(\"input\", {\n    className: \"scriptName\",\n    name: \"scriptName\",\n    placeholder: \"Script Name\",\n    onChange: e => onNewScriptChangeHandler(e)\n  }), __jsx(\"textarea\", {\n    name: \"scriptBody\",\n    className: \"addScriptTextarea\",\n    placeholder: \"Script with out Script Tag\",\n    onChange: e => onNewScriptChangeHandler(e)\n  }), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Add\")), __jsx(\"div\", {\n    className: \"customScripts\"\n  }, renderScripts), __jsx(\"button\", {\n    className: \"saveBtn\",\n    onClick: () => onSaveHandler()\n  }, \"Save\"));\n};\n\nexport default customScript;","map":null,"metadata":{},"sourceType":"module"}