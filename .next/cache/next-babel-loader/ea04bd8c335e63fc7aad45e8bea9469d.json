{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\n\nvar VideoPlayer = function VideoPlayer(props) {\n  var playerElement = useRef(null);\n\n  var WhatToRender = function WhatToRender() {\n    if (props.videoUrl) {\n      return __jsx(React.Fragment, null, __jsx(\"video\", null, __jsx(\"source\", {\n        src: props.videoUrl\n      })));\n    } else if (!props.videoUrl && props.videoEmbedCode) {\n      return __jsx(\"iframe\", {\n        src: props.videoEmbedCode,\n        frameBorder: \"0\",\n        width: \"640\",\n        height: \"360\",\n        scrolling: \"no\"\n      });\n    } else if (!props.videoUrl && !props.videoEmbedCode && props.videoScriptCode) {\n      // if(playerElement.current){\n      //     playerElement.current.innerHTML = props.videoScriptCode\n      // }else return null\n      return props.videoScriptCode;\n    } else return null;\n  };\n\n  return __jsx(\"div\", {\n    className: \"video-player\"\n  }, __jsx(\"meta\", {\n    itemProp: \"name\",\n    content: props.title\n  }), __jsx(\"meta\", {\n    itemProp: \"description\",\n    content: props.description\n  }), __jsx(\"meta\", {\n    itemProp: \"duration\",\n    content: props.duration\n  }), __jsx(\"meta\", {\n    itemProp: \"thumbnailUrl\",\n    content: props.thumbnailUrl\n  }), __jsx(\"meta\", {\n    itemProp: \"embedURL\",\n    content: props.embedURL\n  }), __jsx(\"meta\", {\n    itemProp: \"uploadDate\",\n    content: props.uploadDate\n  }), __jsx(\"div\", {\n    ref: playerElement,\n    className: \"responsive-player\"\n  }, __jsx(WhatToRender, null)));\n};\n\nexport default VideoPlayer;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/includes/Post/VideoPlayer/VideoPlayer.js"],"names":["React","useEffect","useState","useContext","useRef","VideoPlayer","props","playerElement","WhatToRender","videoUrl","videoEmbedCode","videoScriptCode","title","description","duration","thumbnailUrl","embedURL","uploadDate"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAgDC,MAAhD,QAA8D,OAA9D;;AAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AACzB,MAAMC,aAAa,GAAGH,MAAM,CAAC,IAAD,CAA5B;;AAEA,MAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AAEvB,QAAKF,KAAK,CAACG,QAAX,EAAqB;AACjB,aACI,4BACI,qBACI;AAAQ,QAAA,GAAG,EAAGH,KAAK,CAACG;AAApB,QADJ,CADJ,CADJ;AAOH,KARD,MAQO,IAAI,CAACH,KAAK,CAACG,QAAP,IAAmBH,KAAK,CAACI,cAA7B,EAA6C;AAChD,aACI;AAAQ,QAAA,GAAG,EAAGJ,KAAK,CAACI,cAApB;AAAqC,QAAA,WAAW,EAAC,GAAjD;AAAqD,QAAA,KAAK,EAAC,KAA3D;AAAiE,QAAA,MAAM,EAAC,KAAxE;AAA8E,QAAA,SAAS,EAAC;AAAxF,QADJ;AAGH,KAJM,MAIC,IAAI,CAACJ,KAAK,CAACG,QAAP,IAAmB,CAACH,KAAK,CAACI,cAA1B,IAA4CJ,KAAK,CAACK,eAAtD,EAAuE;AAC3E;AACA;AACA;AACA,aAAOL,KAAK,CAACK,eAAb;AACH,KALO,MAKD,OAAO,IAAP;AACV,GApBD;;AAuBI,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAM,IAAA,QAAQ,EAAC,MAAf;AAAsB,IAAA,OAAO,EAAGL,KAAK,CAACM;AAAtC,IADJ,EAEI;AAAM,IAAA,QAAQ,EAAC,aAAf;AAA6B,IAAA,OAAO,EAAGN,KAAK,CAACO;AAA7C,IAFJ,EAGI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAGP,KAAK,CAACQ;AAA1C,IAHJ,EAII;AAAM,IAAA,QAAQ,EAAC,cAAf;AAA8B,IAAA,OAAO,EAAGR,KAAK,CAACS;AAA9C,IAJJ,EAKI;AAAM,IAAA,QAAQ,EAAC,UAAf;AAA0B,IAAA,OAAO,EAAGT,KAAK,CAACU;AAA1C,IALJ,EAMI;AAAM,IAAA,QAAQ,EAAC,YAAf;AAA4B,IAAA,OAAO,EAAGV,KAAK,CAACW;AAA5C,IANJ,EAOI;AAAK,IAAA,GAAG,EAAEV,aAAV;AAAyB,IAAA,SAAS,EAAC;AAAnC,KACI,MAAC,YAAD,OADJ,CAPJ,CADJ;AAkBP,CA5CD;;AA6CA,eAAeF,WAAf","sourcesContent":["import React, { useEffect, useState, useContext,useRef } from 'react';\r\n\r\n\r\nconst VideoPlayer = props => {\r\n    const playerElement = useRef(null)\r\n\r\n    const WhatToRender = () => {\r\n\r\n        if ( props.videoUrl) {\r\n            return (\r\n                <>\r\n                    <video>\r\n                        <source src={ props.videoUrl }/>\r\n                    </video>\r\n                </>\r\n            )\r\n        } else if (!props.videoUrl && props.videoEmbedCode) {\r\n            return (\r\n                <iframe src={ props.videoEmbedCode } frameBorder=\"0\" width='640' height='360' scrolling=\"no\"/>\r\n            )\r\n        }  else if (!props.videoUrl && !props.videoEmbedCode && props.videoScriptCode) {\r\n            // if(playerElement.current){\r\n            //     playerElement.current.innerHTML = props.videoScriptCode\r\n            // }else return null\r\n            return props.videoScriptCode\r\n        } else return null\r\n    }\r\n\r\n\r\n        return (\r\n            <div className='video-player'>\r\n                <meta itemProp=\"name\" content={ props.title }/>\r\n                <meta itemProp=\"description\" content={ props.description }/>\r\n                <meta itemProp=\"duration\" content={ props.duration }/>\r\n                <meta itemProp=\"thumbnailUrl\" content={ props.thumbnailUrl }/>\r\n                <meta itemProp=\"embedURL\" content={ props.embedURL }/>\r\n                <meta itemProp=\"uploadDate\" content={ props.uploadDate }/>\r\n                <div ref={playerElement} className=\"responsive-player\">\r\n                    <WhatToRender/>\r\n                    {/*<iframe src={ props.videoEmbedCode } frameBorder=\"0\" width='640' height='360' scrolling=\"no\"/>*/}\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n\r\n\r\n};\r\nexport default VideoPlayer;"]},"metadata":{},"sourceType":"module"}