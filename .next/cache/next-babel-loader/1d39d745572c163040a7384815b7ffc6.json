{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useRef } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport withRouter from \"next/dist/client/with-router\";\nimport axios from 'axios';\nimport { getAbsolutePath } from '../../_variables/_variables';\nimport { getMultipleSetting, getMultipleWidgetWithData } from '../../_variables/ajaxVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\n\nconst Register = props => {\n  const messageLabel = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    username: undefined,\n    email: undefined,\n    password: undefined,\n    password2: undefined\n  });\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    response: undefined,\n    type: undefined\n  });\n\n  const onChangeHandler = e => {\n    setState(_objectSpread({}, state, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const onSubmitHandler = e => {\n    e.preventDefault();\n    axios.post('/api/v1/users/register', state).then(res => {\n      if (type === 'success') {\n        messageLabel.current.style.backgroundColor = 'green';\n      } else {\n        messageLabel.current.style.backgroundColor = 'red';\n      }\n\n      setData(_objectSpread({}, data, {\n        response: res.data.response,\n        type: res.data.type\n      }));\n    }).catch(err => console.log(err));\n  };\n\n  return __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: \"Register authPage\"\n  }, __jsx(\"form\", {\n    className: \"authForm\",\n    onSubmit: e => onSubmitHandler(e)\n  }, __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"username\"), __jsx(\"input\", {\n    name: \"username\",\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"email\"), __jsx(\"input\", {\n    name: \"email\",\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"password\"), __jsx(\"input\", {\n    name: \"password\",\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"repeat password\"), __jsx(\"input\", {\n    name: \"password2\",\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"submitBtn\"\n  }, \"Register\"))));\n};\n\nRegister.getInitialProps = async ({\n  req\n}) => {\n  const domainName = req ? await getAbsolutePath(req) : '';\n  let settings;\n  const settingsData = await getMultipleSetting({\n    settings: ['identity', 'navigation', 'design']\n  }, true, domainName);\n  let widgets;\n  const widgetsData = await getMultipleWidgetWithData({\n    widgets: ['header']\n  }, true, domainName);\n  widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n  settings = settingsData.data.settings ? settingsData.data.settings : [];\n  return _objectSpread({}, settings, {\n    widgets\n  });\n};\n\nexport default withRouter(Register);","map":null,"metadata":{},"sourceType":"module"}