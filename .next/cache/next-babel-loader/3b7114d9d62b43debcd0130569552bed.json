{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport Link from \"next/link\";\nimport './Pagination.scss';\n\nconst Pagination = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    pages: []\n  });\n  useEffect(() => {\n    if (isNaN(props.postsData.pageNo)) {\n      let pageNo = 1;\n      setState({\n        pages: numberGen(pageNo)\n      });\n    } else {\n      setState({\n        pages: numberGen(props.postsData.pageNo)\n      });\n    }\n  }, [props]);\n\n  let numberGen = current => {\n    let numArr = [];\n\n    if (current === 1) {\n      for (let i = 1; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current === 2) {\n      numArr.push(1);\n\n      for (let i = 2; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current === 3) {\n      numArr.push(1);\n      numArr.push(2);\n\n      for (let i = 3; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current > 3) {\n      let min = current - 3;\n      let max = current + 3;\n\n      for (let i = current; i <= max; i++) {\n        numArr.push(i);\n      }\n\n      for (let i = current; i >= min; i--) {\n        numArr.push(i);\n      }\n    }\n\n    if (current > 3) {\n      numArr.push(1);\n    }\n\n    if (Math.ceil(props.postsData.totalCount / props.postsData.size)) {\n      numArr.push(parseInt(props.maxPage) - 1);\n    }\n\n    numArr = [...new Set(numArr)];\n    numArr = numArr.sort((x, y) => {\n      return x - y;\n    });\n    return numArr;\n  };\n\n  let currentPageNumberStyle = number => {\n    let style = {};\n    let normalStyle = {\n      color: 'white'\n    };\n    let activeStyle = {\n      background: 'none',\n      backgroundColor: ' #f90',\n      color: ' #151719',\n      fontWeight: 'bold',\n      fontSize: 'large'\n    };\n\n    if (isNaN(props.activePage)) {\n      let pageNo = 1;\n\n      if (number === pageNo) {\n        style = activeStyle;\n      }\n    } else {\n      if (number === props.activePage) {\n        style = activeStyle;\n      } else {\n        style = normalStyle;\n      }\n    }\n\n    return style;\n  };\n\n  let pageNumbersGenerator = state.pages.map(num => {\n    // let min = parseInt(props.maxPage) -3\n    if (num > 0 && num <= Math.ceil(props.postsData.totalCount / props.postsData.size) - 1) {\n      let numInBtn = num.toString();\n      let path = props.mainLinkUrl + numInBtn; // if (props.type === 'video') {\n      //     path = `/${contextData.state.language}/posts/video/${numInBtn}`;\n      // }\n      // if (props.type === 'farsiStory') {\n      //     path = `/${contextData.state.language}/posts/farsiStory/${numInBtn}`;\n      // }\n      // if (props.type === 'searchVideo') {\n      //     path = `/${contextData.state.language}/posts/searchVideo/${props.match.params.word}/${numInBtn}`;\n      // }\n      // if (props.type === 'searchFarsiStory') {\n      //     path = `${props.mainLinkUrl}${encodeURI(props.match.params.word)}/${numInBtn}`;\n      // }\n      //\n      // if (num === (Math.ceil(props.postsData.totalCount / props.postsData.size))) {\n      //     numInBtn = `... ${num -1}`\n      // }\n\n      return __jsx(Link, {\n        key: num,\n        href: path\n      }, \" \", __jsx(\"a\", {\n        style: currentPageNumberStyle(num)\n      }, __jsx(\"span\", null, \" \", numInBtn, \" \")), \" \");\n    }\n  });\n\n  if (props.pagination) {\n    return __jsx(\"div\", {\n      className: \"Pagination\"\n    }, pageNumbersGenerator);\n  } else {\n    return null;\n  }\n};\n\nexport default Pagination;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/includes/Pagination/Pagination.js"],"names":["React","useEffect","useState","useContext","Link","Pagination","props","state","setState","pages","isNaN","postsData","pageNo","numberGen","current","numArr","i","push","min","max","Math","ceil","totalCount","size","parseInt","maxPage","Set","sort","x","y","currentPageNumberStyle","number","style","normalStyle","color","activeStyle","background","backgroundColor","fontWeight","fontSize","activePage","pageNumbersGenerator","map","num","numInBtn","toString","path","mainLinkUrl","pagination"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,EAAiCC,UAAjC,QAAkD,OAAlD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAO,mBAAP;;AAGA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AACxB,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBN,QAAQ,CAAC;AAC/BO,IAAAA,KAAK,EAAE;AADwB,GAAD,CAAlC;AASAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,KAAK,CAACJ,KAAK,CAACK,SAAN,CAAgBC,MAAjB,CAAT,EAAmC;AAC/B,UAAIA,MAAM,GAAG,CAAb;AACAJ,MAAAA,QAAQ,CAAC;AACLC,QAAAA,KAAK,EAAEI,SAAS,CAACD,MAAD;AADX,OAAD,CAAR;AAGH,KALD,MAKO;AACHJ,MAAAA,QAAQ,CAAC;AACLC,QAAAA,KAAK,EAAEI,SAAS,CAACP,KAAK,CAACK,SAAN,CAAgBC,MAAjB;AADX,OAAD,CAAR;AAGH;AACJ,GAXQ,EAWN,CAACN,KAAD,CAXM,CAAT;;AAaA,MAAIO,SAAS,GAAIC,OAAD,IAAa;AACzB,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAID,OAAO,KAAK,CAAhB,EAAmB;AACf,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;AACJ;;AACD,QAAIF,OAAO,KAAK,CAAhB,EAAmB;AACfC,MAAAA,MAAM,CAACE,IAAP,CAAY,CAAZ;;AACA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;AACJ;;AACD,QAAIF,OAAO,KAAK,CAAhB,EAAmB;AACfC,MAAAA,MAAM,CAACE,IAAP,CAAY,CAAZ;AACAF,MAAAA,MAAM,CAACE,IAAP,CAAY,CAAZ;;AACA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;AACJ;;AACD,QAAIF,OAAO,GAAG,CAAd,EAAiB;AACb,UAAII,GAAG,GAAGJ,OAAO,GAAG,CAApB;AACA,UAAIK,GAAG,GAAGL,OAAO,GAAG,CAApB;;AACA,WAAK,IAAIE,CAAC,GAAGF,OAAb,EAAsBE,CAAC,IAAIG,GAA3B,EAAgCH,CAAC,EAAjC,EAAqC;AACjCD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;;AACD,WAAK,IAAIA,CAAC,GAAGF,OAAb,EAAsBE,CAAC,IAAIE,GAA3B,EAAgCF,CAAC,EAAjC,EAAqC;AACjCD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;AACJ;;AACD,QAAIF,OAAO,GAAC,CAAZ,EAAc;AACVC,MAAAA,MAAM,CAACE,IAAP,CAAY,CAAZ;AACH;;AACD,QAAIG,IAAI,CAACC,IAAL,CAAUf,KAAK,CAACK,SAAN,CAAgBW,UAAhB,GAA6BhB,KAAK,CAACK,SAAN,CAAgBY,IAAvD,CAAJ,EAAkE;AAC9DR,MAAAA,MAAM,CAACE,IAAP,CAAYO,QAAQ,CAAClB,KAAK,CAACmB,OAAP,CAAR,GAAwB,CAApC;AACH;;AAEDV,IAAAA,MAAM,GAAG,CAAC,GAAG,IAAIW,GAAJ,CAAQX,MAAR,CAAJ,CAAT;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAACY,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3B,aAAOD,CAAC,GAAGC,CAAX;AACH,KAFQ,CAAT;AAIA,WAAOd,MAAP;AACH,GA3CD;;AA4CA,MAAIe,sBAAsB,GAAIC,MAAD,IAAY;AACrC,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,WAAW,GAAG;AACdC,MAAAA,KAAK,EAAE;AADO,KAAlB;AAGA,QAAIC,WAAW,GAAG;AACdC,MAAAA,UAAU,EAAE,MADE;AAEdC,MAAAA,eAAe,EAAE,OAFH;AAGdH,MAAAA,KAAK,EAAE,UAHO;AAIdI,MAAAA,UAAU,EAAE,MAJE;AAKdC,MAAAA,QAAQ,EAAE;AALI,KAAlB;;AAQA,QAAI7B,KAAK,CAACJ,KAAK,CAACkC,UAAP,CAAT,EAA6B;AACzB,UAAI5B,MAAM,GAAG,CAAb;;AACA,UAAImB,MAAM,KAAKnB,MAAf,EAAuB;AACnBoB,QAAAA,KAAK,GAAGG,WAAR;AACH;AACJ,KALD,MAKO;AACH,UAAIJ,MAAM,KAAKzB,KAAK,CAACkC,UAArB,EAAiC;AAC7BR,QAAAA,KAAK,GAAGG,WAAR;AACH,OAFD,MAEO;AACHH,QAAAA,KAAK,GAAGC,WAAR;AACH;AACJ;;AACD,WAAOD,KAAP;AACH,GA1BD;;AA4BA,MAAIS,oBAAoB,GAAGlC,KAAK,CAACE,KAAN,CAAYiC,GAAZ,CAAgBC,GAAG,IAAI;AAC9C;AACA,QAAIA,GAAG,GAAG,CAAN,IAAWA,GAAG,IAAKvB,IAAI,CAACC,IAAL,CAAUf,KAAK,CAACK,SAAN,CAAgBW,UAAhB,GAA6BhB,KAAK,CAACK,SAAN,CAAgBY,IAAvD,IAA8D,CAArF,EAA0F;AAEtF,UAAIqB,QAAQ,GAAGD,GAAG,CAACE,QAAJ,EAAf;AACA,UAAIC,IAAI,GAAGxC,KAAK,CAACyC,WAAN,GAAoBH,QAA/B,CAHsF,CAItF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,aAAQ,MAAC,IAAD;AAAO,QAAA,GAAG,EAAED,GAAZ;AAAiB,QAAA,IAAI,EAAEG;AAAvB,cAA8B;AAAG,QAAA,KAAK,EAAEhB,sBAAsB,CAACa,GAAD;AAAhC,SAAuC,yBAAQC,QAAR,MAAvC,CAA9B,MAAR;AACH;AAEJ,GA1B0B,CAA3B;;AA4BA,MAAGtC,KAAK,CAAC0C,UAAT,EAAoB;AAChB,WACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACKP,oBADL,CADJ;AAKH,GAND,MAMK;AACD,WAAO,IAAP;AACH;AAEJ,CArID;;AAsIA,eAAepC,UAAf","sourcesContent":["import React,{useEffect,useState,useContext} from 'react';\r\nimport Link from \"next/link\";\r\nimport './Pagination.scss';\r\n\r\n\r\nconst Pagination = props => {\r\n    const [state, setState] = useState({\r\n        pages: [],\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (isNaN(props.postsData.pageNo)) {\r\n            let pageNo = 1;\r\n            setState({\r\n                pages: numberGen(pageNo)\r\n            });\r\n        } else {\r\n            setState({\r\n                pages: numberGen(props.postsData.pageNo)\r\n            });\r\n        }\r\n    }, [props]);\r\n\r\n    let numberGen = (current) => {\r\n        let numArr = [];\r\n        if (current === 1) {\r\n            for (let i = 1; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 2) {\r\n            numArr.push(1)\r\n            for (let i = 2; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 3) {\r\n            numArr.push(1)\r\n            numArr.push(2)\r\n            for (let i = 3; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current > 3) {\r\n            let min = current - 3\r\n            let max = current + 3\r\n            for (let i = current; i <= max; i++) {\r\n                numArr.push(i)\r\n            }\r\n            for (let i = current; i >= min; i--) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current>3){\r\n            numArr.push(1)\r\n        }\r\n        if (Math.ceil(props.postsData.totalCount / props.postsData.size)) {\r\n            numArr.push(parseInt(props.maxPage)-1)\r\n        }\r\n\r\n        numArr = [...new Set(numArr)];\r\n        numArr = numArr.sort((x, y) => {\r\n            return x - y\r\n        });\r\n\r\n        return numArr\r\n    };\r\n    let currentPageNumberStyle = (number) => {\r\n        let style = {};\r\n        let normalStyle = {\r\n            color: 'white'\r\n        };\r\n        let activeStyle = {\r\n            background: 'none',\r\n            backgroundColor: ' #f90',\r\n            color: ' #151719',\r\n            fontWeight: 'bold',\r\n            fontSize: 'large'\r\n        };\r\n\r\n        if (isNaN(props.activePage)) {\r\n            let pageNo = 1;\r\n            if (number === pageNo) {\r\n                style = activeStyle\r\n            }\r\n        } else {\r\n            if (number === props.activePage) {\r\n                style = activeStyle\r\n            } else {\r\n                style = normalStyle\r\n            }\r\n        }\r\n        return style\r\n    };\r\n\r\n    let pageNumbersGenerator = state.pages.map(num => {\r\n        // let min = parseInt(props.maxPage) -3\r\n        if (num > 0 && num <= (Math.ceil(props.postsData.totalCount / props.postsData.size) -1) ) {\r\n\r\n            let numInBtn = num.toString();\r\n            let path = props.mainLinkUrl + numInBtn\r\n            // if (props.type === 'video') {\r\n            //     path = `/${contextData.state.language}/posts/video/${numInBtn}`;\r\n            // }\r\n            // if (props.type === 'farsiStory') {\r\n            //     path = `/${contextData.state.language}/posts/farsiStory/${numInBtn}`;\r\n            // }\r\n            // if (props.type === 'searchVideo') {\r\n            //     path = `/${contextData.state.language}/posts/searchVideo/${props.match.params.word}/${numInBtn}`;\r\n            // }\r\n            // if (props.type === 'searchFarsiStory') {\r\n            //     path = `${props.mainLinkUrl}${encodeURI(props.match.params.word)}/${numInBtn}`;\r\n            // }\r\n            //\r\n            // if (num === (Math.ceil(props.postsData.totalCount / props.postsData.size))) {\r\n            //     numInBtn = `... ${num -1}`\r\n            // }\r\n\r\n            return (<Link  key={num} href={path}> <a style={currentPageNumberStyle(num)}><span> {numInBtn} </span></a> </Link>)\r\n        }\r\n\r\n    });\r\n\r\n    if(props.pagination){\r\n        return (\r\n            <div className='Pagination'>\r\n                {pageNumbersGenerator}\r\n            </div>\r\n        );\r\n    }else{\r\n        return null\r\n    }\r\n\r\n};\r\nexport default Pagination;"]},"metadata":{},"sourceType":"module"}