{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\n\nconst tags = props => {\n  useEffect(() => {\n    console.log(props);\n  }, [props]);\n  const renderTags = props.tagsSource.metas.map(meta => {\n    return __jsx(TagElement, {\n      key: meta._id,\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: \"tags\"\n  }, renderTags), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getTagsData.pageNo,\n    totalCount: props.tagsSource.totalCount,\n    size: props.getTagsData.size,\n    maxPage: Math.ceil(parseInt(props.tagsSource.totalCount) / parseInt(props.getTagsData.size)) - 1,\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })));\n};\n\ntags.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let tagsSource;\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  const getTagsData = {\n    type: 'tag',\n    searchForImageIn: 'tags',\n    pageNo: parseInt(query.page) || 1,\n    size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) || 30,\n    sort: query.sort || 'latest'\n  };\n  const tagsData = await getMeta(getTagsData);\n  tagsSource = tagsData.data ? tagsData.data : {\n    tags: [],\n    totalCount: 0\n  };\n  return {\n    identity,\n    navigation,\n    query,\n    tagsSource,\n    getTagsData,\n    pathname\n  };\n};\n\nexport default withRouter(tags);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/tags/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","AppContext","TagElement","CategoryElement","PaginationComponent","SiteSettingSetter","withRouter","tags","props","console","log","renderTags","tagsSource","metas","map","meta","_id","imageUrl","noImageUrl","name","count","getTagsData","pageNo","totalCount","size","Math","ceil","parseInt","query","router","pathname","getInitialProps","req","res","err","navigation","identity","identityData","navigationData","data","setting","type","searchForImageIn","page","tagsCountPerPage","sort","tagsData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport TagElement from '../../../components/includes/TagElement/TagElement'\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement'\r\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent'\r\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport withRouter from 'next/dist/client/with-router'\r\n\r\nconst tags = props => {\r\n\r\n    useEffect(() => {\r\n        console.log(props )\r\n    }, [props]);\r\n    \r\n    const renderTags = props.tagsSource.metas.map(meta => {\r\n            return (\r\n                <TagElement key={meta._id} imageUrl={meta.imageUrl} noImageUrl={meta.noImageUrl} name={meta.name} count={meta.count}/>\r\n            )\r\n    })\r\n\r\n    return (\r\n        <>\r\n        <AppLayout>\r\n            <SiteSettingSetter  { ...props }/>\r\n            <div className='tags'>\r\n                {renderTags}\r\n            </div>\r\n            <PaginationComponent\r\n                isActive={ true }\r\n                currentPage={props.getTagsData.pageNo }\r\n                totalCount={ props.tagsSource.totalCount }\r\n                size={ props.getTagsData.size }\r\n                maxPage={ Math.ceil(parseInt(props.tagsSource.totalCount) / parseInt(props.getTagsData.size))- 1 }\r\n                queryData={props.query || props.router.query}\r\n                pathnameData={props.pathname ||props.router.pathname }\r\n            />\r\n        </AppLayout>\r\n            </>\r\n    );\r\n};\r\n\r\n\r\n\r\ntags.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let tagsSource;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n\r\n    const getTagsData = {\r\n        type: 'tag',\r\n        searchForImageIn:'tags',\r\n        pageNo: parseInt(query.page) || 1,\r\n        size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) ||30,\r\n        sort: query.sort || 'latest',\r\n\r\n    }\r\n\r\n\r\n        const tagsData = await getMeta(getTagsData)\r\n        tagsSource = tagsData.data ? tagsData.data : {tags:[],totalCount:0}\r\n\r\n\r\n\r\n    return { identity, navigation, query, tagsSource,getTagsData,pathname }\r\n}\r\nexport default withRouter(tags);\r\n"]},"metadata":{},"sourceType":"module"}