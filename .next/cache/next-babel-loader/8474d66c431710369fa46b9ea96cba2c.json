{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport axios from \"axios\";\nimport { getComments, getPost } from \"../../_variables/ajaxPostsVariables\";\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\nimport withRouter from \"next/dist/client/with-router\";\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\nimport Head from \"next/head\";\nimport { getSetting, getWidgetsWithData, getMultipleWidgetWithData, getMultipleSetting } from \"../../_variables/ajaxVariables\";\nimport { AppContext } from \"../../context/AppContext\";\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport SideBar from '../../components/includes/Sidebar/Sidebar';\nimport CommentFrom from '../../components/includes/Post/CommentFrom/CommentFrom';\nimport CommentsRenderer from '../../components/includes/CommentsRenderer/CommentsRenderer';\nimport Footer from '../../components/includes/Footer/Footer';\n\nvar Post = function Post(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    style: {}\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n\n    if (props.identity.postPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]); // const RenderMeta = () => {\n  //     if (props.post.title) {\n  //         return (\n  //             <Head>\n  //                 <title>{ props.post.title }</title>\n  //                 <meta name=\"description\" content={ props.post.description }/>\n  //                 <meta name=\"keywords\" content={ [ ...props.post.tags, ...props.post.categories, ...props.post.actors ] }/>\n  //                 <meta property=\"og:title\" content={ props.post.title }/>\n  //                 <meta property=\"og:type\" content={ props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType }/>\n  //                 {/*url should define*/ }\n  //                 <meta property=\"og:url\" content={ props.post.videoEmbedCode }/>\n  //                 <meta property=\"og:image\" content={ props.post.mainThumbnail }/>\n  //             </Head>\n  //         )\n  //     } else return null\n  // }\n\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: props.identity.data.postPageSidebar ? 'post withSidebar' : 'post withOutSidebar'\n  }, __jsx(\"div\", {\n    style: state.style,\n    className: \"main\"\n  }, __jsx(Iframe, {\n    iframeCode: props.post.videoEmbedCode,\n    meta: {\n      description: props.post.description,\n      title: props.post.title,\n      duration: props.post.duration,\n      thumbnailUrl: props.post.mainThumbnail,\n      embedURL: props.post.videoEmbedCode,\n      uploadDate: props.post.lastModify\n    }\n  }), __jsx(PostInfo, {\n    title: props.post.title,\n    description: props.post.description,\n    tags: props.post.tags,\n    actors: props.post.actors,\n    categories: props.post.categories,\n    id: props.post._id,\n    likes: props.post.likes,\n    disLikes: props.post.disLikes,\n    views: props.post.views,\n    videoEmbedCode: props.post.videoEmbedCode\n  })), __jsx(SideBar, {\n    key: \"postPageSidebar\",\n    isActive: props.identity.data.postPageSidebar,\n    widgets: props.widgets,\n    position: \"postPageSidebar\"\n  })), __jsx(Footer, null)));\n};\n\nPost.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, postBody, post, widgets, settings, comments, postData, commentsData, widgetsData, settingsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          postBody = {\n            postTitle: query.postTitle\n          };\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(axios.post('http://localhost:3000/api/v1/posts/post', postBody));\n\n        case 4:\n          postData = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(getComments({\n            onDocument: post._id\n          }));\n\n        case 7:\n          commentsData = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(getMultipleWidgetWithData({\n            widgets: ['postPageSidebar', 'footer']\n          }, true));\n\n        case 10:\n          widgetsData = _context.sent;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(getMultipleSetting({\n            settings: ['identity', 'navigation', 'design']\n          }, true));\n\n        case 13:\n          settingsData = _context.sent;\n          post = postData.data.post;\n          settings = settingsData.data.settings ? settingsData.data.settings : [];\n          widgets = widgetsData.data.widgets ? widgetsData.data.widgets : []; // comments = commentsData.data.comments ? commentsData.data.comments : []\n\n          return _context.abrupt(\"return\", _objectSpread({\n            post: post,\n            query: query,\n            widgets: widgets\n          }, settings));\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(Post);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/post/index.js"],"names":["React","useEffect","useState","useContext","AppLayout","axios","getComments","getPost","Iframe","PostInfo","withRouter","PostSidebar","Head","getSetting","getWidgetsWithData","getMultipleWidgetWithData","getMultipleSetting","AppContext","SiteSettingSetter","SideBar","CommentFrom","CommentsRenderer","Footer","Post","props","contextData","style","state","setState","console","log","identity","postPageSidebar","gridArea","data","post","videoEmbedCode","description","title","duration","thumbnailUrl","mainThumbnail","embedURL","uploadDate","lastModify","tags","actors","categories","_id","likes","disLikes","views","widgets","getInitialProps","pathname","query","req","res","err","postBody","postTitle","postData","onDocument","commentsData","widgetsData","settings","settingsData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport AppLayout from \"../../components/layouts/AppLayout\";\r\nimport axios from \"axios\";\r\nimport { getComments, getPost } from \"../../_variables/ajaxPostsVariables\";\r\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\r\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\r\nimport Head from \"next/head\";\r\nimport { getSetting, getWidgetsWithData, getMultipleWidgetWithData, getMultipleSetting } from \"../../_variables/ajaxVariables\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport SideBar from '../../components/includes/Sidebar/Sidebar'\r\nimport CommentFrom from '../../components/includes/Post/CommentFrom/CommentFrom'\r\nimport CommentsRenderer from '../../components/includes/CommentsRenderer/CommentsRenderer'\r\nimport Footer from '../../components/includes/Footer/Footer'\r\n\r\nconst Post = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        style: {}\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        if (props.identity.postPageSidebar) {\r\n            setState({\r\n                style: {\r\n                    gridArea: 'content'\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [ props ]);\r\n\r\n    // const RenderMeta = () => {\r\n    //     if (props.post.title) {\r\n    //         return (\r\n    //             <Head>\r\n    //                 <title>{ props.post.title }</title>\r\n    //                 <meta name=\"description\" content={ props.post.description }/>\r\n    //                 <meta name=\"keywords\" content={ [ ...props.post.tags, ...props.post.categories, ...props.post.actors ] }/>\r\n    //                 <meta property=\"og:title\" content={ props.post.title }/>\r\n    //                 <meta property=\"og:type\" content={ props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType }/>\r\n    //                 {/*url should define*/ }\r\n    //                 <meta property=\"og:url\" content={ props.post.videoEmbedCode }/>\r\n    //                 <meta property=\"og:image\" content={ props.post.mainThumbnail }/>\r\n    //             </Head>\r\n    //         )\r\n    //     } else return null\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <AppLayout>\r\n                <SiteSettingSetter { ...props }/>\r\n                {/*<RenderMeta/>*/}\r\n                <div className={ props.identity.data.postPageSidebar ? 'post withSidebar' : 'post withOutSidebar' }>\r\n\r\n                    <div style={ state.style } className=\"main\">\r\n                        <Iframe iframeCode={ props.post.videoEmbedCode } meta={ {\r\n                            description: props.post.description,\r\n                            title: props.post.title,\r\n                            duration: props.post.duration,\r\n                            thumbnailUrl: props.post.mainThumbnail,\r\n                            embedURL: props.post.videoEmbedCode,\r\n                            uploadDate: props.post.lastModify,\r\n                        } }/>\r\n\r\n                        <PostInfo\r\n                            title={ props.post.title }\r\n                            description={ props.post.description }\r\n                            tags={ props.post.tags }\r\n                            actors={ props.post.actors }\r\n                            categories={ props.post.categories }\r\n                            id={ props.post._id }\r\n                            likes={ props.post.likes }\r\n                            disLikes={ props.post.disLikes }\r\n                            views={ props.post.views }\r\n                            videoEmbedCode={ props.post.videoEmbedCode }\r\n                        />\r\n                        {/*<CommentsRenderer comments={ props.comments }/>*/}\r\n                        {/*<CommentFrom documentId={ props.post._id }/>*/}\r\n\r\n                    </div>\r\n\r\n                    {/*<PostSidebar isActive={props.identity.postPageSidebar}/>*/ }\r\n                    <SideBar key='postPageSidebar' isActive={ props.identity.data.postPageSidebar } widgets={ props.widgets } position='postPageSidebar'/>\r\n                </div>\r\n                <Footer/>\r\n            </AppLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    const postBody = {\r\n        postTitle: query.postTitle,\r\n    };\r\n\r\n    let post;\r\n    let widgets;\r\n    let settings;\r\n    let comments;\r\n\r\n\r\n    const postData = await axios.post('http://localhost:3000/api/v1/posts/post', postBody);\r\n    const commentsData = await getComments({ onDocument: post._id })\r\n    const widgetsData = await getMultipleWidgetWithData({ widgets: [ 'postPageSidebar', 'footer' ] }, true)\r\n    const settingsData = await getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }, true)\r\n\r\n\r\n\r\n    post = postData.data.post\r\n\r\n\r\n    settings = settingsData.data.settings ? settingsData.data.settings : []\r\n    widgets = widgetsData.data.widgets ? widgetsData.data.widgets : []\r\n    // comments = commentsData.data.comments ? commentsData.data.comments : []\r\n    return { post, query, widgets, ...settings }\r\n};\r\n\r\nexport default withRouter(Post);"]},"metadata":{},"sourceType":"module"}