{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { AppContext } from '../../../context/AppContext';\n\nvar metaPage = function metaPage(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    if (props.navigation) {\n      contextData.dispatchNavigationData(props.navigation.data);\n    }\n\n    if (props.identity) {\n      contextData.dispatchSiteIdentity(function (siteIdentity) {\n        return _objectSpread({}, siteIdentity, {}, props.identity);\n      });\n    }\n  }, [props]);\n  return __jsx(AppLayout, null, __jsx(\"div\", null, \"xxx\"));\n};\n\nmetaPage.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, navigation, identity, metaData, metaDetail, identityData, navigationData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          metaData = [];\n          metaDetail = {\n            type: query.meta,\n            pageNo: 1,\n            size: 100,\n            searchForImageIn: 'categories'\n          };\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 5:\n          identityData = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 8:\n          navigationData = _context.sent;\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          return _context.abrupt(\"return\", {\n            identity: identity,\n            navigation: navigation,\n            query: query\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default metaPage;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/metaPage/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","AppContext","metaPage","props","contextData","state","setState","navigation","dispatchNavigationData","data","identity","dispatchSiteIdentity","siteIdentity","getInitialProps","pathname","query","req","res","err","metaData","metaDetail","type","meta","pageNo","size","searchForImageIn","identityData","navigationData","setting"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,UAAT,QAA2B,6BAA3B;;AACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,KAAK,EAAI;AACtB,MAAMC,WAAW,GAAGP,UAAU,CAACI,UAAD,CAA9B;;AADsB,kBAEML,QAAQ,CAAC,EAAD,CAFd;AAAA,MAEdS,KAFc;AAAA,MAEPC,QAFO;;AAGtBX,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIQ,KAAK,CAACI,UAAV,EAAsB;AAClBH,MAAAA,WAAW,CAACI,sBAAZ,CAAmCL,KAAK,CAACI,UAAN,CAAiBE,IAApD;AACH;;AACD,QAAIN,KAAK,CAACO,QAAV,EAAoB;AAChBN,MAAAA,WAAW,CAACO,oBAAZ,CAAiC,UAAAC,YAAY;AAAA,iCACtCA,YADsC,MAEtCT,KAAK,CAACO,QAFgC;AAAA,OAA7C;AAIH;AACJ,GAVQ,EAUN,CAACP,KAAD,CAVM,CAAT;AAWA,SACI,MAAC,SAAD,QACA,yBADA,CADJ;AAKH,CAnBD;;AAqBAD,QAAQ,CAACW,eAAT,GAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,QAAT,QAASA,QAAT,EAAmBC,KAAnB,QAAmBA,KAAnB,EAA0BC,GAA1B,QAA0BA,GAA1B,EAA+BC,GAA/B,QAA+BA,GAA/B,EAAoCC,GAApC,QAAoCA,GAApC;AAGnBC,UAAAA,QAHmB,GAGR,EAHQ;AAIjBC,UAAAA,UAJiB,GAIL;AACdC,YAAAA,IAAI,EAAEN,KAAK,CAACO,IADE;AAEVC,YAAAA,MAAM,EAAE,CAFE;AAGdC,YAAAA,IAAI,EAAE,GAHQ;AAIdC,YAAAA,gBAAgB,EAAC;AAJH,WAJK;AAAA;AAAA,2CAUIzB,UAAU,CAAC,UAAD,CAVd;;AAAA;AAUjB0B,UAAAA,YAViB;AAAA;AAAA,2CAWM1B,UAAU,CAAC,YAAD,CAXhB;;AAAA;AAWjB2B,UAAAA,cAXiB;AAYvBjB,UAAAA,QAAQ,GAAGgB,YAAY,CAACjB,IAAb,CAAkBmB,OAAlB,GAA4BF,YAAY,CAACjB,IAAb,CAAkBmB,OAAlB,CAA0BnB,IAAtD,GAA6D,EAAxE;AACAF,UAAAA,UAAU,GAAGoB,cAAc,CAAClB,IAAf,CAAoBmB,OAApB,GAA8BD,cAAc,CAAClB,IAAf,CAAoBmB,OAAlD,GAA4D,EAAzE;AAbuB,2CAchB;AAAElB,YAAAA,QAAQ,EAARA,QAAF;AAAYH,YAAAA,UAAU,EAAVA,UAAZ;AAAwBQ,YAAAA,KAAK,EAALA;AAAxB,WAdgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA3B;;AAiBA,eAAeb,QAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\nconst metaPage = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({});\r\n    useEffect(() => {\r\n        if (props.navigation) {\r\n            contextData.dispatchNavigationData(props.navigation.data)\r\n        }\r\n        if (props.identity) {\r\n            contextData.dispatchSiteIdentity(siteIdentity => ({\r\n                ...siteIdentity,\r\n                ...props.identity\r\n            }))\r\n        }\r\n    }, [props]);\r\n    return (\r\n        <AppLayout>\r\n        <div>xxx</div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nmetaPage.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let metaData = []\r\n    const metaDetail ={\r\n        type: query.meta,\r\n            pageNo: 1,\r\n        size: 100,\r\n        searchForImageIn:'categories',\r\n    }\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    return { identity, navigation, query }\r\n}\r\n\r\nexport default metaPage;\r\n"]},"metadata":{},"sourceType":"module"}