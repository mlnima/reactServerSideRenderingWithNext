{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../components/layouts/AppLayout';\nimport { getSetting } from '../../_variables/ajaxVariables';\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\nimport Posts from '../../components/includes/Posts/Posts';\nimport Link from 'next/link';\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent';\n\nvar posts = function posts(props) {\n  useEffect(function () {\n    console.log(props);\n  }, [props]);\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: \"posts\"\n  }, __jsx(Posts, {\n    posts: props.postsSource.posts || []\n  }))));\n};\n\nposts.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, navigation, identity, postsSource, identityData, navigationData, getPostsData, postsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 3:\n          identityData = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 6:\n          navigationData = _context.sent;\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          getPostsData = {\n            size: _parseInt(query.size) || _parseInt(identity.postsCountPerPage) || 30,\n            pageNo: _parseInt(query.page) || 1,\n            postType: query.type || 'all',\n            fields: ['title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration'],\n            keyword: query.keyword || '',\n            author: query.author || 'all',\n            actor: query.actor || 'all',\n            status: 'published',\n            tag: query.tag || 'all',\n            category: query.category || 'all',\n            sort: query.sort || 'latest'\n          };\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(getPosts(getPostsData));\n\n        case 12:\n          postsData = _context.sent;\n          postsSource = postsData.data ? postsData.data : [];\n          return _context.abrupt(\"return\", {\n            identity: identity,\n            navigation: navigation,\n            query: query,\n            postsSource: postsSource,\n            getPostsData: getPostsData\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(posts);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/posts/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","getPosts","SiteSettingSetter","withRouter","Posts","Link","PaginationComponent","posts","props","console","log","postsSource","getInitialProps","pathname","query","req","res","err","identityData","navigationData","identity","data","setting","navigation","getPostsData","size","postsCountPerPage","pageNo","page","postType","type","fields","keyword","author","actor","status","tag","category","sort","postsData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../_variables/ajaxVariables'\r\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport Posts from '../../components/includes/Posts/Posts'\r\nimport Link from 'next/link'\r\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent'\r\n\r\nconst posts = props => {\r\n    useEffect(() => {\r\n        console.log(props )\r\n\r\n\r\n    }, [props]);\r\n\r\n    return (\r\n        <>\r\n            <AppLayout>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <div className='posts'>\r\n                    <Posts posts={ props.postsSource.posts || [] }/>\r\n\r\n                </div>\r\n                {/*<PaginationComponent*/}\r\n                {/*    isActive={ true }*/}\r\n                {/*    currentPage={ props.getPostsData.pageNo }*/}\r\n                {/*    totalCount={ props.postsSource.totalCount }*/}\r\n                {/*    size={ props.getPostsData.size }*/}\r\n                {/*    maxPage={ Math.ceil(parseInt(props.postsSource.totalCount) / parseInt(props.getPostsData.size)) - 1 }*/}\r\n                {/*    queryData={props.query || props.router.query}*/}\r\n                {/*    pathnameData={props.pathname ||props.router.pathname }*/}\r\n                {/*/>*/}\r\n            </AppLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nposts.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let postsSource;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n\r\n    const getPostsData = {\r\n        size: parseInt(query.size) || parseInt(identity.postsCountPerPage) || 30,\r\n        pageNo: parseInt(query.page) || 1,\r\n        postType: query.type || 'all',\r\n        fields: [ 'title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration' ],\r\n        keyword: query.keyword || '',\r\n        author: query.author || 'all',\r\n        actor: query.actor || 'all',\r\n        status: 'published',\r\n        tag: query.tag || 'all',\r\n        category: query.category || 'all',\r\n        sort: query.sort || 'latest',\r\n    }\r\n\r\n    const postsData = await getPosts(getPostsData)\r\n\r\n    postsSource = postsData.data ? postsData.data : []\r\n    return { identity, navigation, query, postsSource, getPostsData }\r\n}\r\n\r\nexport default withRouter(posts);\r\n"]},"metadata":{},"sourceType":"module"}