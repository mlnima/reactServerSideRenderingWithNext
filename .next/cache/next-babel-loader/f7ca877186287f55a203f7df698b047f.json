{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport FA from 'react-fontawesome';\nimport Link from 'next/link';\nimport withRouter from 'next/dist/client/with-router';\n\nconst FilterPagination = props => {\n  let currentPageInput = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    targetPage: 1\n  });\n  useEffect(() => {\n    setState(_objectSpread({}, state, {\n      targetPage: props.getPostsData.pageNo\n    }));\n  }, [props]);\n\n  const onChangeHandler = e => {\n    setState(_objectSpread({}, state, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: \"FilterPagination\"\n  }, __jsx(\"div\", {\n    className: \"pagesNavigation\"\n  }, __jsx(\"label\", {\n    className: \"totalPosts\"\n  }, props.postsSource.totalCount, \" items\"), __jsx(Link, {\n    key: \"...1\",\n    href: {\n      pathname: props.pathname || props.router.pathname,\n      query: _objectSpread({}, props.query, {\n        page: 1\n      })\n    }\n  }, __jsx(\"a\", {\n    className: \"adminPaginationActionLink\"\n  }, __jsx(FA, {\n    className: \"fontawesomeMedium\",\n    name: \"angle-double-left\"\n  }))), __jsx(Link, {\n    href: {\n      pathname: props.pathname || props.router.pathname,\n      query: _objectSpread({}, props.query, {\n        page: props.getPostsData.pageNo + -1\n      })\n    }\n  }, __jsx(\"a\", {\n    className: \"adminPaginationActionLink\"\n  }, __jsx(FA, {\n    className: \"fontawesomeMedium\",\n    name: \"angle-left\"\n  }))), __jsx(\"input\", {\n    name: \"targetPage\",\n    className: \"pageNumberInput goToPageManuallyInput\",\n    value: state.targetPage,\n    ref: currentPageInput,\n    type: \"number\",\n    min: 0,\n    onChange: e => onChangeHandler(e)\n  }), __jsx(Link, {\n    href: {\n      pathname: props.pathname || props.router.pathname,\n      query: _objectSpread({}, props.query, {\n        page: state.targetPage\n      })\n    }\n  }, __jsx(\"a\", {\n    className: \"goToPageManuallyLink\"\n  }, \"GO\")), __jsx(Link, {\n    href: {\n      pathname: props.pathname || props.router.pathname,\n      query: _objectSpread({}, props.query, {\n        page: props.getPostsData.pageNo + 1\n      })\n    }\n  }, __jsx(\"a\", {\n    className: \"adminPaginationActionLink\"\n  }, __jsx(FA, {\n    className: \"fontawesomeMedium\",\n    name: \"angle-right\"\n  }))), __jsx(Link, {\n    key: `${Math.ceil(parseInt(props.postsSource.totalCount) / parseInt(props.getPostsData.size))}`,\n    href: {\n      pathname: props.pathname || props.router.pathname,\n      query: _objectSpread({}, props.query, {\n        page: Math.ceil(parseInt(props.postsSource.totalCount) / parseInt(props.getPostsData.size))\n      })\n    }\n  }, __jsx(\"a\", {\n    className: \"adminPaginationActionLink\"\n  }, __jsx(FA, {\n    className: \"fontawesomeMedium\",\n    name: \"angle-double-right\"\n  })))));\n};\n\nexport default withRouter(FilterPagination);","map":null,"metadata":{},"sourceType":"module"}