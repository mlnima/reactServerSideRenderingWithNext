{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from 'next/dist/client/with-router';\nimport AdminLayout from '../../../../components/layouts/AdminLayout'; // import './TextEditor.scss'\n\nvar textEditor = function textEditor(props) {\n  var contextData = useContext(AppContext);\n  var textArea = useRef(null);\n  var message = useRef(null);\n\n  var _useState = useState({\n    file: '',\n    message: 'to leave this page please close text editor'\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    if (contextData.settings.textEditorCurrentFile !== '') {\n      textArea.current.value = contextData.textEditorCurrentFile.textEditorCurrentFile;\n    } else {// props.history.push('/admin/FileManager')\n    }\n  }, [, contextData.settings.textEditorCurrentFile, contextData.settings.textEditorEditMode]);\n\n  var onCloseHandler = function onCloseHandler() {\n    contextData.dispatchSettings(_objectSpread({}, contextData.dispatchSettings, {\n      textEditorCurrentFile: '',\n      textEditorEditMode: false\n    }));\n    props.router.push(props.router.back());\n  };\n\n  var ReadOnlyOrEditHandler = function ReadOnlyOrEditHandler() {\n    if (!contextData.settings.textEditorEditMode) {\n      return __jsx(\"textarea\", {\n        className: \"noEditMode\",\n        ref: textArea,\n        value: contextData.settings.textEditorEditMode\n      });\n    } else return __jsx(\"textarea\", {\n      className: \"EditMode\",\n      ref: textArea\n    });\n  };\n\n  var onEditModeHandler = function onEditModeHandler() {\n    contextData.dispatchSettings(_objectSpread({}, contextData.dispatchSettings, {\n      textEditorEditMode: true\n    }));\n  };\n\n  var onSaveHandler = function onSaveHandler() {};\n\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: \"TextEditor\"\n  }, __jsx(\"div\", {\n    className: \"TextEditorControl\"\n  }, __jsx(\"button\", {\n    className: \"closeBtn fas fa-times\",\n    onClick: function onClick() {\n      return onCloseHandler();\n    }\n  }), __jsx(\"button\", {\n    className: \"editBtn fas fa-edit\",\n    onClick: function onClick() {\n      return onEditModeHandler();\n    }\n  }), __jsx(\"button\", {\n    className: \"editBtn fas fa-save\",\n    onClick: function onClick() {\n      return onSaveHandler();\n    }\n  })), __jsx(\"label\", {\n    ref: message\n  }, state.message), __jsx(ReadOnlyOrEditHandler, null)));\n};\n\nexport default withRouter(textEditor);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/fileManager/textEditor/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppContext","withRouter","AdminLayout","textEditor","props","contextData","textArea","message","file","state","setState","settings","textEditorCurrentFile","current","value","textEditorEditMode","onCloseHandler","dispatchSettings","router","push","back","ReadOnlyOrEditHandler","onEditModeHandler","onSaveHandler"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext, useRef} from 'react';\r\nimport {AppContext} from \"../../../../context/AppContext\";\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport AdminLayout from '../../../../components/layouts/AdminLayout'\r\n// import './TextEditor.scss'\r\n\r\nconst textEditor = props => {\r\n    let contextData = useContext(AppContext)\r\n    const textArea = useRef(null)\r\n    const message = useRef(null)\r\n    const [state, setState] = useState({\r\n        file: '',\r\n        message:'to leave this page please close text editor'\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (contextData.settings.textEditorCurrentFile !== '') {\r\n            textArea.current.value = contextData.textEditorCurrentFile.textEditorCurrentFile\r\n        }else {\r\n            // props.history.push('/admin/FileManager')\r\n        }\r\n    }, [, contextData.settings.textEditorCurrentFile,contextData.settings.textEditorEditMode]);\r\n\r\n    const onCloseHandler = () => {\r\n        contextData.dispatchSettings({\r\n            ...contextData.dispatchSettings,\r\n            textEditorCurrentFile:'',\r\n            textEditorEditMode:false\r\n        })\r\n        props.router.push(props.router.back())\r\n    };\r\n\r\n    const ReadOnlyOrEditHandler = () => {\r\n        if (!contextData.settings.textEditorEditMode) {\r\n            return (\r\n                <textarea className='noEditMode' ref={textArea} value={contextData.settings.textEditorEditMode}/>\r\n            )\r\n        } else return (\r\n                <textarea className='EditMode' ref={textArea}/>\r\n        )\r\n    };\r\n\r\n    let onEditModeHandler = ()=>{\r\n        contextData.dispatchSettings({\r\n            ...contextData.dispatchSettings,\r\n            textEditorEditMode:true\r\n        })\r\n    };\r\n\r\n    let onSaveHandler = ()=>{\r\n\r\n    };\r\n\r\n    return (\r\n        <AdminLayout>\r\n        <div className='TextEditor'>\r\n            <div className='TextEditorControl'>\r\n                <button className='closeBtn fas fa-times' onClick={() => onCloseHandler()}/>\r\n                <button className='editBtn fas fa-edit' onClick={() => onEditModeHandler()}/>\r\n                <button className='editBtn fas fa-save' onClick={() => onSaveHandler()}/>\r\n            </div>\r\n            <label ref={message}>{state.message}</label>\r\n            {/*<button className=\"fas fa-arrow-left\"/>*/}\r\n            <ReadOnlyOrEditHandler/>\r\n        </div>\r\n        </AdminLayout>\r\n    );\r\n\r\n\r\n};\r\nexport default withRouter(textEditor);"]},"metadata":{},"sourceType":"module"}