{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport FA from 'react-fontawesome';\n\nconst FilterPagination = props => {\n  const contextData = useContext(AppContext);\n  let currentPageInput = useRef(null);\n  let size = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    totalPosts: 0,\n    perPage: 0,\n    totalPage: 0,\n    currentPage: 1\n  }); // useEffect(()=>{\n  //     currentPageInput.current.value = contextData.postsData.pageNo\n  //     size.current.value = contextData.postsData.size\n  // },[contextData.postsData.pageNo]);\n\n  let nextPage = () => {\n    contextData.dispatchAdminPostsData(_objectSpread({}, contextData.adminPostsData, {\n      pageNo: contextData.adminPostsData.pageNo + 1\n    }));\n  };\n\n  let previousPage = () => {\n    if (contextData.adminPostsData.pageNo - 1 <= 0) {\n      contextData.dispatchAdminPostsData(_objectSpread({}, contextData.adminPostsData, {\n        pageNo: 1\n      }));\n    } else {\n      contextData.dispatchAdminPostsData(_objectSpread({}, contextData.adminPostsData, {\n        pageNo: contextData.adminPostsData.pageNo - 1\n      }));\n    }\n  };\n\n  let lastPage = () => {\n    contextData.dispatchAdminPostsData(_objectSpread({}, contextData.adminPostsData, {\n      pageNo: Math.floor(contextData.adminPostsData.totalCount / contextData.adminPostsData.size)\n    }));\n  };\n\n  let firstPage = () => {\n    contextData.dispatchAdminPostsData(_objectSpread({}, contextData.adminPostsData, {\n      pageNo: 1\n    }));\n  };\n\n  let changePageNoManually = () => {\n    if (currentPageInput.current.value <= 0) {\n      contextData.dispatchAdminPostsData(_objectSpread({}, contextData.adminPostsData, {\n        pageNo: 1\n      }));\n      currentPageInput.current.value = 1;\n    } else {\n      contextData.dispatchAdminPostsData(_objectSpread({}, contextData.adminPostsData, {\n        pageNo: currentPageInput.current.value\n      }));\n    }\n  };\n\n  let changeSizeHandler = () => {\n    contextData.dispatchAdminPostsData(_objectSpread({}, contextData.adminPostsData, {\n      limit: parseInt(size.current.value)\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: \"FilterPagination\"\n  }, __jsx(\"div\", null, __jsx(\"button\", {\n    onClick: () => firstPage(),\n    className: \"actionBtn\"\n  }, __jsx(FA, {\n    className: \"fontawesomeMedium\",\n    name: \"angle-double-left\"\n  })), __jsx(\"button\", {\n    onClick: () => previousPage(),\n    className: \"actionBtn\"\n  }, __jsx(FA, {\n    className: \"fontawesomeMedium\",\n    name: \"angle-left\"\n  })), __jsx(\"input\", {\n    className: \"pageNumberInput\",\n    ref: currentPageInput,\n    type: \"number\",\n    min: 0\n  }), __jsx(\"button\", {\n    onClick: () => nextPage(),\n    className: \"actionBtn\"\n  }, __jsx(FA, {\n    className: \"fontawesomeMedium\",\n    name: \"angle-right\"\n  })), __jsx(\"button\", {\n    onClick: () => lastPage(),\n    className: \"actionBtn\"\n  }, __jsx(FA, {\n    className: \"fontawesomeMedium\",\n    name: \"angle-double-right\"\n  }))), __jsx(\"div\", null, __jsx(\"label\", {\n    className: \"totalCount\"\n  }, contextData.adminPostsData.totalCount), __jsx(\"button\", {\n    onClick: () => changePageNoManually()\n  }, \"Go\"), __jsx(\"label\", null, \"of \", Math.floor(contextData.adminPostsData.totalCount / contextData.adminPostsData.size)), __jsx(\"select\", {\n    ref: size,\n    defaultValue: contextData.adminPostsData.size,\n    onChange: () => changeSizeHandler()\n  }, __jsx(\"option\", {\n    value: 5\n  }, \"5\"), __jsx(\"option\", {\n    value: 10\n  }, \"10\"), __jsx(\"option\", {\n    value: 20\n  }, \"20\"), __jsx(\"option\", {\n    value: 50\n  }, \"50\"), __jsx(\"option\", {\n    value: 100\n  }, \"100\"), __jsx(\"option\", {\n    value: 200\n  }, \"200\"), __jsx(\"option\", {\n    value: 500\n  }, \"500\"))));\n};\n\nFilterPagination.getInitialProps = ctx => {\n  return {\n    ctx\n  };\n};\n\nexport default FilterPagination;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostsComponents/Filters/FilterPagination.js"],"names":["React","useEffect","useState","useContext","useRef","AppContext","FA","FilterPagination","props","contextData","currentPageInput","size","state","setState","totalPosts","perPage","totalPage","currentPage","nextPage","dispatchAdminPostsData","adminPostsData","pageNo","previousPage","lastPage","Math","floor","totalCount","firstPage","changePageNoManually","current","value","changeSizeHandler","limit","parseInt","getInitialProps","ctx"],"mappings":"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","sourcesContent":["import React,{useEffect,useState,useContext,useRef} from 'react';\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport FA  from 'react-fontawesome';\r\n\r\nconst FilterPagination = props => {\r\n    const contextData = useContext(AppContext);\r\n    let currentPageInput = useRef(null);\r\n    let size = useRef(null);\r\n    const [state, setState] = useState({\r\n        totalPosts: 0,\r\n        perPage: 0,\r\n        totalPage: 0,\r\n        currentPage: 1\r\n    });\r\n    // useEffect(()=>{\r\n    //     currentPageInput.current.value = contextData.postsData.pageNo\r\n    //     size.current.value = contextData.postsData.size\r\n    // },[contextData.postsData.pageNo]);\r\n\r\n    let nextPage = () =>{\r\n        contextData.dispatchAdminPostsData({\r\n            ...contextData.adminPostsData,\r\n            pageNo:contextData.adminPostsData.pageNo +1\r\n        })\r\n    };\r\n\r\n    let previousPage = () =>{\r\n        if ((contextData.adminPostsData.pageNo -1 ) <= 0){\r\n            contextData.dispatchAdminPostsData({\r\n                ...contextData.adminPostsData,\r\n                pageNo:1\r\n            })\r\n        }else {\r\n            contextData.dispatchAdminPostsData({\r\n                ...contextData.adminPostsData,\r\n                pageNo:contextData.adminPostsData.pageNo -1\r\n            })\r\n        }\r\n\r\n    };\r\n\r\n    let lastPage = () =>{\r\n        contextData.dispatchAdminPostsData({\r\n            ...contextData.adminPostsData,\r\n            pageNo:Math.floor(contextData.adminPostsData.totalCount/contextData.adminPostsData.size)\r\n        })\r\n    };\r\n\r\n    let firstPage = () =>{\r\n        contextData.dispatchAdminPostsData({\r\n            ...contextData.adminPostsData,\r\n            pageNo: 1\r\n        })\r\n    };\r\n\r\n    let changePageNoManually = ()=>{\r\n        if (currentPageInput.current.value <= 0){\r\n            contextData.dispatchAdminPostsData({\r\n                ...contextData.adminPostsData,\r\n                pageNo: 1\r\n            });\r\n            currentPageInput.current.value = 1\r\n        }else {\r\n            contextData.dispatchAdminPostsData({\r\n                ...contextData.adminPostsData,\r\n                pageNo: currentPageInput.current.value\r\n            })\r\n        }\r\n    };\r\n\r\n    let changeSizeHandler =()=>{\r\n        contextData.dispatchAdminPostsData({\r\n            ...contextData.adminPostsData,\r\n            limit: parseInt(size.current.value)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='FilterPagination'>\r\n            <div >\r\n                <button onClick={()=>firstPage()} className='actionBtn'><FA className='fontawesomeMedium' name=\"angle-double-left\" /></button>\r\n                <button onClick={()=>previousPage()} className='actionBtn'><FA className='fontawesomeMedium' name=\"angle-left\" /></button>\r\n                <input className='pageNumberInput' ref={currentPageInput} type='number' min={0} />\r\n                <button onClick={()=>nextPage()} className='actionBtn'><FA className='fontawesomeMedium' name=\"angle-right\" /></button>\r\n                <button onClick={()=>lastPage()} className='actionBtn'><FA className='fontawesomeMedium' name=\"angle-double-right\" /></button>\r\n            </div>\r\n            <div >\r\n                <label className='totalCount'>{contextData.adminPostsData.totalCount}</label>\r\n                <button  onClick={()=>changePageNoManually()}>Go</button>\r\n                <label>of {Math.floor(contextData.adminPostsData.totalCount/contextData.adminPostsData.size)}</label>\r\n                <select ref={size} defaultValue={contextData.adminPostsData.size} onChange={()=>changeSizeHandler()} >\r\n                    <option value={5}>5</option>\r\n                    <option value={10}>10</option>\r\n                    <option value={20}>20</option>\r\n                    <option value={50}>50</option>\r\n                    <option value={100}>100</option>\r\n                    <option value={200}>200</option>\r\n                    <option value={500}>500</option>\r\n                </select>\r\n            </div>\r\n\r\n            {/*<input ref={size} onChange={()=>changeSizeHandler()} />*/}\r\n        </div>\r\n    );\r\n};\r\n\r\nFilterPagination.getInitialProps =  (ctx) => {\r\n    return {ctx}\r\n};\r\nexport default FilterPagination;"]},"metadata":{},"sourceType":"module"}