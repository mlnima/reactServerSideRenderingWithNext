{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\nimport { DelayInput } from 'react-delay-input';\nimport './customScript.scss';\nimport { AppContext } from '../../../../context/AppContext';\nimport { getAbsolutePath } from '../../../../_variables/_variables';\nimport { getSetting } from '../../../../_variables/ajaxVariables';\nimport settings from '../general';\n\nconst customScript = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: newScript,\n    1: setNewScript\n  } = useState({\n    scriptName: '',\n    scriptBody: ''\n  });\n  const {\n    0: scriptsName,\n    1: setScriptsName\n  } = useState([]);\n  useEffect(() => {\n    setScriptsName((contextData.siteIdentity.customScripts || []).map(script => script.scriptName));\n  }, [contextData.siteIdentity.customScripts]);\n\n  const onNewScriptChangeHandler = e => {\n    setNewScript(_objectSpread({}, newScript, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const onAddHandler = async e => {\n    e.preventDefault();\n\n    if (scriptsName.includes(newScript.scriptName)) {\n      contextData.dispatchAlert({\n        active: true,\n        alertMessage: 'already there is script with this name',\n        type: 'error'\n      });\n    } else {\n      contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n        customScripts: [...contextData.siteIdentity.customScripts, newScript]\n      }));\n    }\n  };\n\n  const onDeleteHandler = scriptName => {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      customScripts: contextData.siteIdentity.customScripts.filter(script => script.scriptName !== scriptName)\n    }));\n  };\n\n  const onSaveHandler = () => {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    contextData.functions.updateSetting('identity', contextData.siteIdentity).then(() => {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    }).catch(err => {\n      console.log(err);\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  const onGoogleAnalyticsSaveHandler = e => {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      googleAnalyticsID: e.target.value\n    }));\n  };\n\n  const renderScripts = (contextData.siteIdentity.customScripts || []).map(script => {\n    const onChangeHandler = e => {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: true\n      }));\n      const scriptIndex = contextData.siteIdentity.customScripts.findIndex(addedScript => addedScript.scriptName === script.scriptName);\n\n      const updatedScript = _objectSpread({}, contextData.siteIdentity.customScripts[scriptIndex], {\n        [e.target.name]: e.target.value\n      });\n\n      setTimeout(() => {\n        const updatedScripts = [...contextData.siteIdentity.customScripts.slice(0, scriptIndex), updatedScript, ...contextData.siteIdentity.customScripts.slice(scriptIndex + 1)];\n        contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n          customScripts: updatedScripts\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }, 500);\n    };\n\n    return __jsx(\"div\", {\n      className: \"customScriptPageItem\"\n    }, __jsx(\"div\", {\n      className: \"customScriptPageItemHead\"\n    }, __jsx(DelayInput, {\n      className: \"customScriptPageItemHeadName\",\n      name: \"scriptName\",\n      value: script.scriptName,\n      delayTimeout: 1000,\n      onChange: e => onChangeHandler(e)\n    }), __jsx(\"button\", {\n      className: \"removeScript\",\n      onClick: () => onDeleteHandler(script.scriptName)\n    }, \"X\")), __jsx(DelayInput, {\n      element: \"textarea\",\n      className: \"customScript\",\n      name: \"scriptBody\",\n      value: script.scriptBody,\n      delayTimeout: 1000,\n      onChange: e => onChangeHandler(e)\n    }));\n  });\n  return __jsx(AdminLayout, null, __jsx(\"input\", {\n    type: \"text\",\n    name: \"googleAnalyticsID\",\n    className: \"googleAnalyticsInput\",\n    onChange: e => onGoogleAnalyticsSaveHandler(e)\n  }), __jsx(\"form\", {\n    className: \"addCustomScriptForm\",\n    onSubmit: e => onAddHandler(e)\n  }, __jsx(\"input\", {\n    className: \"scriptName\",\n    name: \"scriptName\",\n    placeholder: \"Script Name\",\n    onChange: e => onNewScriptChangeHandler(e)\n  }), __jsx(\"textarea\", {\n    name: \"scriptBody\",\n    className: \"addScriptTextarea\",\n    placeholder: \"Script with out Script Tag\",\n    onChange: e => onNewScriptChangeHandler(e)\n  }), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Add\")), __jsx(\"div\", {\n    className: \"customScripts\"\n  }, renderScripts), __jsx(\"button\", {\n    className: \"saveBtn\",\n    onClick: () => onSaveHandler()\n  }, \"Save\"));\n};\n\nexport default customScript;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/settings/customScript/index.js"],"names":["React","useEffect","useState","useContext","useRef","AdminLayout","DelayInput","AppContext","getAbsolutePath","getSetting","settings","customScript","props","contextData","newScript","setNewScript","scriptName","scriptBody","scriptsName","setScriptsName","siteIdentity","customScripts","map","script","onNewScriptChangeHandler","e","target","name","value","onAddHandler","preventDefault","includes","dispatchAlert","active","alertMessage","type","dispatchSiteIdentity","onDeleteHandler","filter","onSaveHandler","dispatchState","state","loading","functions","updateSetting","then","catch","err","console","log","onGoogleAnalyticsSaveHandler","googleAnalyticsID","renderScripts","onChangeHandler","scriptIndex","findIndex","addedScript","updatedScript","setTimeout","updatedScripts","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\r\nimport { DelayInput } from 'react-delay-input';\r\nimport './customScript.scss';\r\nimport { AppContext } from '../../../../context/AppContext'\r\nimport { getAbsolutePath } from '../../../../_variables/_variables'\r\nimport { getSetting } from '../../../../_variables/ajaxVariables'\r\nimport settings from '../general'\r\n\r\nconst customScript = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ newScript, setNewScript ] = useState({\r\n        scriptName: '',\r\n        scriptBody: ''\r\n    })\r\n    const [ scriptsName, setScriptsName ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setScriptsName((contextData.siteIdentity.customScripts || []).map(script => script.scriptName))\r\n    }, [ contextData.siteIdentity.customScripts ]);\r\n\r\n    const onNewScriptChangeHandler = e => {\r\n        setNewScript({\r\n            ...newScript,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onAddHandler = async e => {\r\n        e.preventDefault()\r\n        if (scriptsName.includes(newScript.scriptName)) {\r\n            contextData.dispatchAlert({\r\n                active: true,\r\n                alertMessage: 'already there is script with this name',\r\n                type: 'error'\r\n            })\r\n        } else {\r\n            contextData.dispatchSiteIdentity({\r\n                ...contextData.siteIdentity,\r\n                customScripts: [ ...contextData.siteIdentity.customScripts, newScript ]\r\n            })\r\n        }\r\n    }\r\n\r\n    const onDeleteHandler = (scriptName) => {\r\n        contextData.dispatchSiteIdentity({\r\n            ...contextData.siteIdentity,\r\n            customScripts: contextData.siteIdentity.customScripts.filter(script => script.scriptName !== scriptName)\r\n        })\r\n    }\r\n\r\n    const onSaveHandler = () => {\r\n        contextData.dispatchState({\r\n            ...contextData.state,\r\n            loading: true\r\n        })\r\n        contextData.functions.updateSetting('identity', contextData.siteIdentity).then(() => {\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            })\r\n        }).catch(err => {\r\n            console.log(err)\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n\r\n    const onGoogleAnalyticsSaveHandler = e => {\r\n        contextData.dispatchSiteIdentity({\r\n            ...contextData.siteIdentity,\r\n            googleAnalyticsID: e.target.value\r\n        })\r\n    }\r\n\r\n    const renderScripts = (contextData.siteIdentity.customScripts || []).map(script => {\r\n\r\n        const onChangeHandler = e => {\r\n\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: true\r\n            })\r\n\r\n            const scriptIndex = contextData.siteIdentity.customScripts.findIndex(addedScript => addedScript.scriptName === script.scriptName)\r\n            const updatedScript = {\r\n                ...contextData.siteIdentity.customScripts[scriptIndex],\r\n                [e.target.name]: e.target.value\r\n            }\r\n            setTimeout(() => {\r\n                const updatedScripts = [\r\n                    ...contextData.siteIdentity.customScripts.slice(0, scriptIndex),\r\n                    updatedScript,\r\n                    ...contextData.siteIdentity.customScripts.slice(scriptIndex + 1),\r\n                ];\r\n\r\n                contextData.dispatchSiteIdentity({\r\n                    ...contextData.siteIdentity,\r\n                    customScripts: updatedScripts\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n\r\n            }, 500)\r\n\r\n        }\r\n\r\n        return (\r\n            <div className='customScriptPageItem'>\r\n                <div className='customScriptPageItemHead'>\r\n                    {/*<p>Name : { script.scriptName }</p>*/ }\r\n                    {/*<input className='customScriptPageItemHeadName' value={ script.scriptName } name='scriptName' onChange={ e => onChangeHandler(e) } />*/ }\r\n                    <DelayInput className='customScriptPageItemHeadName' name='scriptName' value={ script.scriptName } delayTimeout={ 1000 } onChange={ e => onChangeHandler(e) }/>\r\n\r\n                    <button className='removeScript' onClick={ () => onDeleteHandler(script.scriptName) }>X</button>\r\n                </div>\r\n                <DelayInput element=\"textarea\" className='customScript' name='scriptBody' value={ script.scriptBody } delayTimeout={ 1000 } onChange={ e => onChangeHandler(e) }/>\r\n\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <input type=\"text\" name='googleAnalyticsID' className='googleAnalyticsInput' onChange={ e => onGoogleAnalyticsSaveHandler(e) }/>\r\n            <form className='addCustomScriptForm' onSubmit={ e => onAddHandler(e) }>\r\n                <input className='scriptName' name='scriptName' placeholder='Script Name' onChange={ e => onNewScriptChangeHandler(e) }/>\r\n                <textarea name='scriptBody' className='addScriptTextarea' placeholder='Script with out Script Tag' onChange={ e => onNewScriptChangeHandler(e) }/>\r\n                <button type='submit'>Add</button>\r\n            </form>\r\n            <div className='customScripts'>\r\n                { renderScripts }\r\n            </div>\r\n            <button className='saveBtn' onClick={ () => onSaveHandler() }>Save</button>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\nexport default customScript;\r\n"]},"metadata":{},"sourceType":"module"}