{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\nimport { DelayInput } from 'react-delay-input';\nimport './customScript.scss';\nimport { AppContext } from '../../../../context/AppContext';\nimport { getAbsolutePath } from '../../../../_variables/_variables';\nimport { getSetting } from '../../../../_variables/ajaxVariables';\nimport settings from '../general';\n\nvar customScript = function customScript(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    scriptName: '',\n    scriptBody: ''\n  }),\n      newScript = _useState[0],\n      setNewScript = _useState[1];\n\n  var _useState2 = useState([]),\n      scriptsName = _useState2[0],\n      setScriptsName = _useState2[1];\n\n  useEffect(function () {\n    setScriptsName(contextData.siteIdentity.customScripts.map(function (script) {\n      return script.scriptName;\n    }));\n  }, [contextData.siteIdentity.customScripts]); // const onChangeHandler = e => {\n  //     contextData.dispatchSiteIdentity({\n  //         ...contextData.siteIdentity,\n  //         customScript: e.target.value\n  //     })\n  // }\n\n  var onSaveHandler = function onSaveHandler() {\n    contextData.functions.updateSetting('identity', contextData.siteIdentity).then(function () {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  var onNewScriptChangeHandler = function onNewScriptChangeHandler(e) {\n    setNewScript(_objectSpread({}, newScript, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var onAddHandler = function onAddHandler(e) {\n    return _regeneratorRuntime.async(function onAddHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            if (scriptsName.includes(newScript.scriptName)) {\n              contextData.dispatchAlert({\n                active: true,\n                alertMessage: 'already there is script with this name',\n                type: 'error'\n              });\n            } else {\n              contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n                customScripts: [].concat(_toConsumableArray(contextData.siteIdentity.customScripts), [newScript])\n              }));\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var onDeleteHandler = function onDeleteHandler(scriptName) {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      customScripts: contextData.siteIdentity.customScripts.filter(function (script) {\n        return script.scriptName !== scriptName;\n      })\n    }));\n  };\n\n  var renderScripts = contextData.siteIdentity.customScripts.map(function (script) {\n    return __jsx(\"div\", {\n      className: \"customScriptPageItem\"\n    }, __jsx(\"div\", {\n      className: \"customScriptPageItemHead\"\n    }, __jsx(\"p\", null, \"Name : \", script.scriptName), __jsx(\"button\", {\n      onClick: function onClick() {\n        return onDeleteHandler(script.scriptName);\n      }\n    }, \"X\")), __jsx(DelayInput, {\n      element: \"textarea\",\n      className: \"customScript\",\n      name: \"videoEmbedCode\",\n      value: script.scriptBody,\n      delayTimeout: 1000,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }), __jsx(\"button\", {\n      onClick: function onClick() {\n        return onSaveHandler();\n      }\n    }, \"Save\"));\n  });\n  return __jsx(AdminLayout, null, __jsx(\"form\", {\n    className: \"addCustomScriptForm\",\n    onSubmit: function onSubmit(e) {\n      return onAddHandler(e);\n    }\n  }, __jsx(\"input\", {\n    className: \"scriptName\",\n    name: \"scriptName\",\n    placeholder: \"Script Name\",\n    onChange: function onChange(e) {\n      return onNewScriptChangeHandler(e);\n    }\n  }), __jsx(\"textarea\", {\n    name: \"scriptBody\",\n    className: \"addScriptTextarea\",\n    placeholder: \"Script with out Script Tag\",\n    onChange: function onChange(e) {\n      return onNewScriptChangeHandler(e);\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Add\")), __jsx(\"div\", {\n    className: \"customScripts\"\n  }, renderScripts));\n};\n\nexport default customScript;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/settings/customScript/index.js"],"names":["React","useEffect","useState","useContext","useRef","AdminLayout","DelayInput","AppContext","getAbsolutePath","getSetting","settings","customScript","props","contextData","scriptName","scriptBody","newScript","setNewScript","scriptsName","setScriptsName","siteIdentity","customScripts","map","script","onSaveHandler","functions","updateSetting","then","dispatchState","state","loading","onNewScriptChangeHandler","e","target","name","value","onAddHandler","preventDefault","includes","dispatchAlert","active","alertMessage","type","dispatchSiteIdentity","onDeleteHandler","filter","renderScripts","onChangeHandler"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\r\nimport { DelayInput } from 'react-delay-input';\r\nimport './customScript.scss';\r\nimport { AppContext } from '../../../../context/AppContext'\r\nimport { getAbsolutePath } from '../../../../_variables/_variables'\r\nimport { getSetting } from '../../../../_variables/ajaxVariables'\r\nimport settings from '../general'\r\n\r\nconst customScript = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ newScript, setNewScript ] = useState({\r\n        scriptName: '',\r\n        scriptBody: ''\r\n    })\r\n    const [ scriptsName, setScriptsName ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setScriptsName(contextData.siteIdentity.customScripts.map(script => script.scriptName))\r\n    }, [ contextData.siteIdentity.customScripts ]);\r\n\r\n    // const onChangeHandler = e => {\r\n    //     contextData.dispatchSiteIdentity({\r\n    //         ...contextData.siteIdentity,\r\n    //         customScript: e.target.value\r\n    //     })\r\n    // }\r\n\r\n    const onSaveHandler = () => {\r\n        contextData.functions.updateSetting('identity', contextData.siteIdentity).then(() => {\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n\r\n    const onNewScriptChangeHandler = e => {\r\n        setNewScript({\r\n            ...newScript,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onAddHandler = async e => {\r\n        e.preventDefault()\r\n       if ( scriptsName.includes(newScript.scriptName) ){\r\n           contextData.dispatchAlert({\r\n               active: true,\r\n               alertMessage: 'already there is script with this name',\r\n               type: 'error'\r\n           })\r\n       }else {\r\n           contextData.dispatchSiteIdentity({\r\n               ...contextData.siteIdentity,\r\n               customScripts: [ ...contextData.siteIdentity.customScripts, newScript ]\r\n           })\r\n       }\r\n    }\r\n\r\n    const onDeleteHandler = (scriptName) => {\r\n        contextData.dispatchSiteIdentity({\r\n            ...contextData.siteIdentity,\r\n            customScripts: contextData.siteIdentity.customScripts.filter(script => script.scriptName !== scriptName)\r\n        })\r\n    }\r\n\r\n    const renderScripts = contextData.siteIdentity.customScripts.map(script => {\r\n        return (\r\n            <div className='customScriptPageItem'>\r\n                <div className='customScriptPageItemHead'>\r\n                    <p>Name : { script.scriptName }</p>\r\n                    <button onClick={ () => onDeleteHandler(script.scriptName) }>X</button>\r\n                </div>\r\n                <DelayInput element=\"textarea\" className='customScript' name='videoEmbedCode' value={ script.scriptBody } delayTimeout={ 1000 } onChange={ e => onChangeHandler(e) }/>\r\n                <button onClick={ () => onSaveHandler() }>Save</button>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <form className='addCustomScriptForm' onSubmit={ e => onAddHandler(e) }>\r\n                <input className='scriptName' name='scriptName' placeholder='Script Name' onChange={ e => onNewScriptChangeHandler(e) }/>\r\n                <textarea name='scriptBody' className='addScriptTextarea' placeholder='Script with out Script Tag' onChange={ e => onNewScriptChangeHandler(e) }/>\r\n                <button type='submit'>Add</button>\r\n            </form>\r\n            <div className='customScripts'>\r\n                { renderScripts }\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\nexport default customScript;\r\n"]},"metadata":{},"sourceType":"module"}