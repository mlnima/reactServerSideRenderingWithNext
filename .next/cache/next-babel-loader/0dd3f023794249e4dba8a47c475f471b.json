{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\nimport { DelayInput } from 'react-delay-input';\nimport './customScript.scss';\nimport { AppContext } from '../../../../context/AppContext';\nimport { getAbsolutePath } from '../../../../_variables/_variables';\nimport { getSetting } from '../../../../_variables/ajaxVariables';\nimport settings from '../general';\n\nvar customScript = function customScript(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    scriptName: '',\n    scriptBody: ''\n  }),\n      newScript = _useState[0],\n      setNewScript = _useState[1];\n\n  var _useState2 = useState([]),\n      scriptsName = _useState2[0],\n      setScriptsName = _useState2[1];\n\n  useEffect(function () {\n    setScriptsName((contextData.siteIdentity.customScripts || []).map(function (script) {\n      return script.scriptName;\n    }));\n  }, [contextData.siteIdentity.customScripts]);\n\n  var onNewScriptChangeHandler = function onNewScriptChangeHandler(e) {\n    setNewScript(_objectSpread({}, newScript, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var onAddHandler = function onAddHandler(e) {\n    return _regeneratorRuntime.async(function onAddHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            if (scriptsName.includes(newScript.scriptName)) {\n              contextData.dispatchAlert({\n                active: true,\n                alertMessage: 'already there is script with this name',\n                type: 'error'\n              });\n            } else {\n              contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n                customScripts: [].concat(_toConsumableArray(contextData.siteIdentity.customScripts), [newScript])\n              }));\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var onDeleteHandler = function onDeleteHandler(scriptName) {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      customScripts: contextData.siteIdentity.customScripts.filter(function (script) {\n        return script.scriptName !== scriptName;\n      })\n    }));\n  };\n\n  var onSaveHandler = function onSaveHandler() {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    contextData.functions.updateSetting('identity', contextData.siteIdentity).then(function () {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    })[\"catch\"](function (err) {\n      console.log(err);\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  var onGoogleAnalyticsSaveHandler = function onGoogleAnalyticsSaveHandler(e) {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      googleAnalyticsID: e.target.value\n    }));\n  };\n\n  var renderScripts = (contextData.siteIdentity.customScripts || []).map(function (script) {\n    var onChangeHandler = function onChangeHandler(e) {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: true\n      }));\n      var scriptIndex = contextData.siteIdentity.customScripts.findIndex(function (addedScript) {\n        return addedScript.scriptName === script.scriptName;\n      });\n\n      var updatedScript = _objectSpread({}, contextData.siteIdentity.customScripts[scriptIndex], _defineProperty({}, e.target.name, e.target.value));\n\n      setTimeout(function () {\n        var updatedScripts = [].concat(_toConsumableArray(contextData.siteIdentity.customScripts.slice(0, scriptIndex)), [updatedScript], _toConsumableArray(contextData.siteIdentity.customScripts.slice(scriptIndex + 1)));\n        contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n          customScripts: updatedScripts\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }, 500);\n    };\n\n    return __jsx(\"div\", {\n      key: script.scriptName,\n      className: \"customScriptPageItem\"\n    }, __jsx(\"div\", {\n      className: \"customScriptPageItemHead\"\n    }, __jsx(DelayInput, {\n      className: \"customScriptPageItemHeadName\",\n      name: \"scriptName\",\n      value: script.scriptName,\n      delayTimeout: 1000,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }), __jsx(\"button\", {\n      className: \"removeScript\",\n      onClick: function onClick() {\n        return onDeleteHandler(script.scriptName);\n      }\n    }, \"X\")), __jsx(DelayInput, {\n      element: \"textarea\",\n      className: \"customScript\",\n      name: \"scriptBody\",\n      value: script.scriptBody,\n      delayTimeout: 1000,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }));\n  });\n  return __jsx(AdminLayout, null, __jsx(\"input\", {\n    placeholder: \"Google Analytics ID\",\n    type: \"text\",\n    name: \"googleAnalyticsID\",\n    value: contextData.siteIdentity.googleAnalyticsID,\n    className: \"googleAnalyticsInput\",\n    onChange: function onChange(e) {\n      return onGoogleAnalyticsSaveHandler(e);\n    }\n  }), __jsx(\"form\", {\n    className: \"addCustomScriptForm\",\n    onSubmit: function onSubmit(e) {\n      return onAddHandler(e);\n    }\n  }, __jsx(\"input\", {\n    className: \"scriptName\",\n    name: \"scriptName\",\n    placeholder: \"Script Name\",\n    onChange: function onChange(e) {\n      return onNewScriptChangeHandler(e);\n    }\n  }), __jsx(\"textarea\", {\n    name: \"scriptBody\",\n    className: \"addScriptTextarea\",\n    placeholder: \"Script with out Script Tag\",\n    onChange: function onChange(e) {\n      return onNewScriptChangeHandler(e);\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Add\")), __jsx(\"div\", {\n    className: \"customScripts\"\n  }, renderScripts), __jsx(\"button\", {\n    className: \"saveBtn\",\n    onClick: function onClick() {\n      return onSaveHandler();\n    }\n  }, \"Save\"));\n};\n\nexport default customScript;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/settings/customScript/index.js"],"names":["React","useEffect","useState","useContext","useRef","AdminLayout","DelayInput","AppContext","getAbsolutePath","getSetting","settings","customScript","props","contextData","scriptName","scriptBody","newScript","setNewScript","scriptsName","setScriptsName","siteIdentity","customScripts","map","script","onNewScriptChangeHandler","e","target","name","value","onAddHandler","preventDefault","includes","dispatchAlert","active","alertMessage","type","dispatchSiteIdentity","onDeleteHandler","filter","onSaveHandler","dispatchState","state","loading","functions","updateSetting","then","err","console","log","onGoogleAnalyticsSaveHandler","googleAnalyticsID","renderScripts","onChangeHandler","scriptIndex","findIndex","addedScript","updatedScript","setTimeout","updatedScripts","slice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\r\nimport { DelayInput } from 'react-delay-input';\r\nimport './customScript.scss';\r\nimport { AppContext } from '../../../../context/AppContext'\r\nimport { getAbsolutePath } from '../../../../_variables/_variables'\r\nimport { getSetting } from '../../../../_variables/ajaxVariables'\r\nimport settings from '../general'\r\n\r\nconst customScript = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ newScript, setNewScript ] = useState({\r\n        scriptName: '',\r\n        scriptBody: ''\r\n    })\r\n    const [ scriptsName, setScriptsName ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        setScriptsName((contextData.siteIdentity.customScripts || []).map(script => script.scriptName))\r\n    }, [ contextData.siteIdentity.customScripts ]);\r\n\r\n    const onNewScriptChangeHandler = e => {\r\n        setNewScript({\r\n            ...newScript,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onAddHandler = async e => {\r\n        e.preventDefault()\r\n        if (scriptsName.includes(newScript.scriptName)) {\r\n            contextData.dispatchAlert({\r\n                active: true,\r\n                alertMessage: 'already there is script with this name',\r\n                type: 'error'\r\n            })\r\n        } else {\r\n            contextData.dispatchSiteIdentity({\r\n                ...contextData.siteIdentity,\r\n                customScripts: [ ...contextData.siteIdentity.customScripts, newScript ]\r\n            })\r\n        }\r\n    }\r\n\r\n    const onDeleteHandler = (scriptName) => {\r\n        contextData.dispatchSiteIdentity({\r\n            ...contextData.siteIdentity,\r\n            customScripts: contextData.siteIdentity.customScripts.filter(script => script.scriptName !== scriptName)\r\n        })\r\n    }\r\n\r\n    const onSaveHandler = () => {\r\n        contextData.dispatchState({\r\n            ...contextData.state,\r\n            loading: true\r\n        })\r\n        contextData.functions.updateSetting('identity', contextData.siteIdentity).then(() => {\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            })\r\n        }).catch(err => {\r\n            console.log(err)\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n\r\n    const onGoogleAnalyticsSaveHandler = e => {\r\n        contextData.dispatchSiteIdentity({\r\n            ...contextData.siteIdentity,\r\n            googleAnalyticsID: e.target.value\r\n        })\r\n    }\r\n\r\n    const renderScripts = (contextData.siteIdentity.customScripts || []).map(script => {\r\n\r\n        const onChangeHandler = e => {\r\n\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: true\r\n            })\r\n\r\n            const scriptIndex = contextData.siteIdentity.customScripts.findIndex(addedScript => addedScript.scriptName === script.scriptName)\r\n            const updatedScript = {\r\n                ...contextData.siteIdentity.customScripts[scriptIndex],\r\n                [e.target.name]: e.target.value\r\n            }\r\n            setTimeout(() => {\r\n                const updatedScripts = [\r\n                    ...contextData.siteIdentity.customScripts.slice(0, scriptIndex),\r\n                    updatedScript,\r\n                    ...contextData.siteIdentity.customScripts.slice(scriptIndex + 1),\r\n                ];\r\n\r\n                contextData.dispatchSiteIdentity({\r\n                    ...contextData.siteIdentity,\r\n                    customScripts: updatedScripts\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n\r\n            }, 500)\r\n\r\n        }\r\n\r\n        return (\r\n            <div key={script.scriptName} className='customScriptPageItem'>\r\n                <div className='customScriptPageItemHead'>\r\n                    {/*<p>Name : { script.scriptName }</p>*/ }\r\n                    {/*<input className='customScriptPageItemHeadName' value={ script.scriptName } name='scriptName' onChange={ e => onChangeHandler(e) } />*/ }\r\n                    <DelayInput className='customScriptPageItemHeadName' name='scriptName' value={ script.scriptName } delayTimeout={ 1000 } onChange={ e => onChangeHandler(e) }/>\r\n\r\n                    <button className='removeScript' onClick={ () => onDeleteHandler(script.scriptName) }>X</button>\r\n                </div>\r\n                <DelayInput element=\"textarea\" className='customScript' name='scriptBody' value={ script.scriptBody } delayTimeout={ 1000 } onChange={ e => onChangeHandler(e) }/>\r\n\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <input placeholder='Google Analytics ID' type=\"text\" name='googleAnalyticsID' value={contextData.siteIdentity.googleAnalyticsID} className='googleAnalyticsInput' onChange={ e => onGoogleAnalyticsSaveHandler(e) }/>\r\n            <form className='addCustomScriptForm' onSubmit={ e => onAddHandler(e) }>\r\n                <input className='scriptName' name='scriptName' placeholder='Script Name' onChange={ e => onNewScriptChangeHandler(e) }/>\r\n                <textarea name='scriptBody' className='addScriptTextarea' placeholder='Script with out Script Tag' onChange={ e => onNewScriptChangeHandler(e) }/>\r\n                <button type='submit'>Add</button>\r\n            </form>\r\n            <div className='customScripts'>\r\n                { renderScripts }\r\n            </div>\r\n            <button className='saveBtn' onClick={ () => onSaveHandler() }>Save</button>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\nexport default customScript;\r\n"]},"metadata":{},"sourceType":"module"}