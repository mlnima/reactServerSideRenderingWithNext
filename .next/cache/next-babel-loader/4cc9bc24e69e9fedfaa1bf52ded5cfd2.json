{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\n\nconst queryGeneratorForUnCacheRequest = requestItems => {\n  let query = '?';\n\n  for (const item in requestItems) {\n    query += `${item}=${requestItems[item]}`;\n  }\n\n  return query;\n};\n\nexport const getPosts = async (data, cache, domainName) => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(domainName + `/api/v1/posts${queryGeneratorForUnCacheRequest(data)}`, body);\n};\nexport const getPost = async (data, cache, domainName) => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(domainName + '/api/v1/posts/post', body);\n};\nexport const updatePost = async (data, domainName) => {\n  const body = {\n    postData: data,\n    token: localStorage.wt\n  };\n  return await axios.post(domainName + `/api/v1/posts/updatePost`, body);\n};\nexport const savePost = async (data, domainName) => {\n  const body = {\n    postData: data,\n    token: localStorage.wt\n  };\n  return await axios.post(domainName + `/api/v1/posts/createNewPost`, body);\n};\nexport const getMeta = async (data, cache, domainName) => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(domainName + `/api/v1/posts/getMeta?pageNo=${data.pageNo}&type=${data.type}`, body);\n};\nexport const newComment = async data => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(window.location.origin + `/api/v1/posts/newComment`, body);\n};\nexport const getComments = async (data, cache, domainName) => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(domainName + `/api/v1/posts/getComments`, body);\n};\nexport const updateComment = async data => {\n  const body = _objectSpread({}, data);\n\n  return await axios.post(window.location.origin + `/api/v1/posts/updateComment`, body);\n};\nexport const likeDislikeView = async (id, type) => {\n  const body = {\n    id,\n    type\n  };\n  return await axios.post(window.location.origin + '/api/v1/posts/likeDislikeView', body);\n};","map":null,"metadata":{},"sourceType":"module"}