{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext } from 'react';\nimport DropDownWidget from \"../DropDownWidget/DropDownWidget\";\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from \"next/dist/client/with-router\";\nimport { updatePost, savePost } from '../../../../_variables/ajaxPostsVariables';\n\nconst ActionOnPost = props => {\n  const contextData = useContext(AppContext);\n\n  const onSaveHandler = () => {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n\n    if (props.postData._id) {\n      // contextData.functions.updatePost(contextData.editingPostData)\n      updatePost(props.postData, window.location.origin).then(() => {\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      });\n    } else {\n      savePost(props.postData, window.location.origin).then(res => {\n        props.router.push('/admin/post?id=' + res.data.savedPostData._id);\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }).catch(err => {\n        contextData.dispatchAlert(_objectSpread({}, contextData.alert, {\n          active: true,\n          alertMessage: err.response.data.error,\n          type: 'error'\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      });\n    }\n  };\n\n  const onViewHandler = () => {\n    window.open('/' + props.postData.title, '_blank');\n  };\n\n  return __jsx(\"div\", {\n    className: \"ActionOnPost\"\n  }, __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"button\", {\n    className: \"previewBtn\",\n    onClick: () => onViewHandler()\n  }, \"View\")), __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"select\", {\n    name: \"status\",\n    value: props.postData.status,\n    onChange: e => props.onChangeHandler(e)\n  }, __jsx(\"option\", {\n    value: \"published\"\n  }, \"Published\"), __jsx(\"option\", {\n    value: \"draft\"\n  }, \"Draft\"), __jsx(\"option\", {\n    value: \"trash\"\n  }, \"Trash\"))), __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"button\", {\n    className: \"SaveBtn\",\n    onClick: () => onSaveHandler()\n  }, \"Save\")));\n};\n\nActionOnPost.getInitialProps = async ({\n  query\n}) => {\n  return {\n    query\n  };\n};\n\nexport default withRouter(ActionOnPost);","map":null,"metadata":{},"sourceType":"module"}