{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { clickPathGenerator } from '../../../../_variables/_variables';\nimport './FileManagerArea.scss';\nimport { AppContext } from '../../../../context/AppContext';\nimport withRouter from 'next/dist/client/with-router';\nimport { fileTypeDetector } from '../../../../_variables/_variables';\nimport BarsSvg from '../../../../static/images/fontawesome/bars-solid.svg';\nimport JsLogoSvg from '../../../../static/images/fontawesome/js-square-brands.svg';\nimport SliderSvg from '../../../../static/images/fontawesome/sliders-h-solid.svg';\nimport FolderSvg from '../../../../static/images/fontawesome/folder-solid.svg';\nimport SassSvg from '../../../../static/images/fontawesome/sass-brands.svg';\nimport FileSvg from '../../../../static/images/fontawesome/file-solid.svg';\n\nvar FileManagerArea = function FileManagerArea(props) {\n  var contextData = useContext(AppContext);\n  useEffect(function () {\n    console.log(props);\n  }, [props]);\n\n  var classGenerator = function classGenerator(fileName) {\n    var nextClass = '';\n\n    if (props.data.clickedItem === clickPathGenerator(fileName, props.data.path)) {\n      nextClass = ' clickedItem';\n    } else {\n      nextClass = ' unClickedItem';\n    }\n  };\n\n  var logoDetector = function logoDetector(fileName) {\n    if (fileName.includes('.js')) {\n      return JsLogoSvg;\n    } else if (fileName.includes('.env')) {\n      return SliderSvg;\n    } else if (!fileName.includes('.')) {\n      return FolderSvg;\n    } else if (fileName.includes('.scss')) {\n      return SassSvg;\n    } else return FileSvg;\n  };\n\n  var WhatToRender = function WhatToRender(data) {\n    if (data.fileName.includes('.jpg') || data.fileName.includes('.png')) {\n      return __jsx(\"img\", {\n        className: \"file-manager-image-item\",\n        src: props.data.path.replace('.', '') + '/' + data.fileName\n      });\n    } else {\n      return __jsx(\"button\", {\n        className: [classGenerator(data.fileName)],\n        key: data.fileName,\n        name: data.fileName,\n        onClick: function onClick(e) {\n          return onClickHandler(e);\n        }\n      }, __jsx(\"img\", {\n        className: \"fontawesomeSvgLarge\",\n        src: logoDetector(data.fileName),\n        alt: \"\"\n      }));\n    }\n  };\n\n  var onClickHandler = function onClickHandler(e) {\n    var clickedItem = props.data.clickedItem;\n    var filePath = clickPathGenerator(e.currentTarget.name, props.data.path);\n\n    if (props.data.clickedItem === filePath) {\n      props.setStateHandler('clickedItem', '');\n    } else {\n      props.setStateHandler('clickedItem', filePath);\n      props.setStateHandler('path', filePath);\n    }\n  };\n\n  var renderDir = props.data.files.map(function (item) {\n    fileTypeDetector(item);\n    return __jsx(\"div\", {\n      key: item,\n      className: \"dirItem\"\n    }, __jsx(WhatToRender, {\n      fileName: item\n    }), __jsx(\"p\", null, \" \", item));\n  });\n  return __jsx(\"div\", {\n    className: \"FileManagerArea\"\n  }, renderDir);\n};\n\nexport default withRouter(FileManagerArea); // <buttonref={() => selectedItem.current[props.data.files.indexOf(item)]}\n// className={[fileLogoDetector(item)]} key={item} name={item} onClick={(e) => onClickHandler(e)}\n// onDoubleClick={(e) => onDoubleClickHandler(e)} onContextMenu={(e) => onContextMenuHandler(e)}/>","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/FileManagerComponents/FileManagerArea/FileManagerArea.js"],"names":["React","useEffect","useState","useContext","useRef","clickPathGenerator","AppContext","withRouter","fileTypeDetector","BarsSvg","JsLogoSvg","SliderSvg","FolderSvg","SassSvg","FileSvg","FileManagerArea","props","contextData","console","log","classGenerator","fileName","nextClass","data","clickedItem","path","logoDetector","includes","WhatToRender","replace","e","onClickHandler","filePath","currentTarget","name","setStateHandler","renderDir","files","map","item"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { clickPathGenerator } from '../../../../_variables/_variables';\r\nimport './FileManagerArea.scss';\r\nimport { AppContext } from '../../../../context/AppContext'\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport {fileTypeDetector} from '../../../../_variables/_variables'\r\nimport BarsSvg from '../../../../static/images/fontawesome/bars-solid.svg'\r\nimport JsLogoSvg from '../../../../static/images/fontawesome/js-square-brands.svg'\r\nimport SliderSvg from '../../../../static/images/fontawesome/sliders-h-solid.svg'\r\nimport FolderSvg from '../../../../static/images/fontawesome/folder-solid.svg'\r\nimport SassSvg from '../../../../static/images/fontawesome/sass-brands.svg'\r\nimport FileSvg from '../../../../static/images/fontawesome/file-solid.svg'\r\n\r\nconst FileManagerArea = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n    }, [ props ]);\r\n\r\n    const classGenerator = fileName => {\r\n        let nextClass = '';\r\n        if (props.data.clickedItem === clickPathGenerator(fileName, props.data.path)) {\r\n            nextClass = ' clickedItem'\r\n        } else {\r\n            nextClass = ' unClickedItem'\r\n        }\r\n    };\r\n\r\n    const logoDetector = fileName => {\r\n        if (fileName.includes('.js')) {\r\n            return JsLogoSvg\r\n        } else if (fileName.includes('.env')) {\r\n            return SliderSvg\r\n        } else if (!fileName.includes('.')) {\r\n            return FolderSvg\r\n        } else if (fileName.includes('.scss')) {\r\n            return SassSvg\r\n        } else return FileSvg\r\n    }\r\n\r\n    const WhatToRender = data => {\r\n\r\n        if (data.fileName.includes('.jpg') || data.fileName.includes('.png')) {\r\n            return (\r\n                <img className='file-manager-image-item' src={ props.data.path.replace('.', '') + '/' + data.fileName }/>\r\n            )\r\n        } else {\r\n            return (\r\n                <button className={ [ classGenerator(data.fileName) ] } key={ data.fileName } name={ data.fileName } onClick={ (e) => onClickHandler(e) }>\r\n                    <img className='fontawesomeSvgLarge' src={ logoDetector(data.fileName) } alt=\"\"/>\r\n                </button>\r\n            )\r\n        }\r\n    }\r\n\r\n    const onClickHandler = e => {\r\n        let clickedItem = props.data.clickedItem;\r\n        let filePath = clickPathGenerator(e.currentTarget.name, props.data.path);\r\n        if (props.data.clickedItem === filePath) {\r\n            props.setStateHandler('clickedItem', '')\r\n        } else {\r\n            props.setStateHandler('clickedItem', filePath)\r\n            props.setStateHandler('path', filePath)\r\n        }\r\n    };\r\n\r\n    let renderDir = props.data.files.map(item => {\r\n        fileTypeDetector(item)\r\n        return (\r\n            <div key={ item } className='dirItem'>\r\n                <WhatToRender fileName={ item }/>\r\n                <p> { item }</p>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className='FileManagerArea'>\r\n            { renderDir }\r\n        </div>\r\n    );\r\n};\r\nexport default withRouter(FileManagerArea);\r\n\r\n// <buttonref={() => selectedItem.current[props.data.files.indexOf(item)]}\r\n// className={[fileLogoDetector(item)]} key={item} name={item} onClick={(e) => onClickHandler(e)}\r\n// onDoubleClick={(e) => onDoubleClickHandler(e)} onContextMenu={(e) => onContextMenuHandler(e)}/>"]},"metadata":{},"sourceType":"module"}