{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport axios from \"axios\";\nimport { getComments, getPost } from \"../../_variables/ajaxPostsVariables\";\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\nimport withRouter from \"next/dist/client/with-router\";\nimport Head from \"next/head\";\nimport { getSetting, getWidgetsWithData, getMultipleWidgetWithData, getMultipleSetting } from \"../../_variables/ajaxVariables\";\nimport { AppContext } from \"../../context/AppContext\";\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport { Sidebar } from '../../components/includes/Sidebar/Sidebar';\nimport CommentFrom from '../../components/includes/Post/CommentFrom/CommentFrom';\nimport CommentsRenderer from '../../components/includes/CommentsRenderer/CommentsRenderer';\nimport Footer from '../../components/includes/Footer/Footer';\nimport { getAbsolutePath } from '../../_variables/_variables';\n\nvar Post = function Post(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    style: {}\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n\n    if (props.identity.postPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n\n  var RenderMeta = function RenderMeta() {\n    if (props.post.title) {\n      return __jsx(Head, null, __jsx(\"title\", null, props.post.title), __jsx(\"meta\", {\n        name: \"description\",\n        content: props.post.description\n      }), __jsx(\"meta\", {\n        name: \"keywords\",\n        content: [].concat(_toConsumableArray(props.post.tags), _toConsumableArray(props.post.categories), _toConsumableArray(props.post.actors))\n      }), __jsx(\"meta\", {\n        property: \"og:title\",\n        content: props.post.title\n      }), __jsx(\"meta\", {\n        property: \"og:type\",\n        content: props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType\n      }), __jsx(\"meta\", {\n        property: \"og:url\",\n        content: props.post.videoEmbedCode\n      }), __jsx(\"meta\", {\n        property: \"og:image\",\n        content: props.post.mainThumbnail\n      }));\n    } else return null;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(RenderMeta, null), __jsx(\"div\", {\n    className: props.identity.data.postPageSidebar ? 'post withSidebar' : 'post withOutSidebar'\n  }, __jsx(\"div\", {\n    style: state.style,\n    className: \"main\"\n  }, __jsx(Iframe, {\n    iframeCode: props.post.videoEmbedCode,\n    meta: {\n      description: props.post.description,\n      title: props.post.title,\n      duration: props.post.duration,\n      thumbnailUrl: props.post.mainThumbnail,\n      embedURL: props.post.videoEmbedCode,\n      uploadDate: props.post.lastModify\n    }\n  }), __jsx(PostInfo, {\n    title: props.post.title,\n    description: props.post.description,\n    tags: props.post.tags,\n    actors: props.post.actors,\n    categories: props.post.categories,\n    id: props.post._id,\n    likes: props.post.likes,\n    disLikes: props.post.disLikes,\n    views: props.post.views,\n    videoEmbedCode: props.post.videoEmbedCode\n  }), __jsx(CommentsRenderer, {\n    comments: props.comments\n  }), __jsx(CommentFrom, {\n    documentId: props.post._id\n  })), __jsx(Sidebar, {\n    key: \"postPageSidebar\",\n    isActive: props.identity.data.postPageSidebar,\n    widgets: props.widgets,\n    position: \"postPageSidebar\"\n  })), __jsx(Footer, {\n    widgets: props.widgets,\n    position: \"footer\"\n  })));\n};\n\nPost.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, domainName, postBody, post, widgets, settings, comments, postData, widgetsData, settingsData, commentsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n\n          if (!req) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getAbsolutePath(req));\n\n        case 4:\n          _context.t0 = _context.sent;\n          _context.next = 8;\n          break;\n\n        case 7:\n          _context.t0 = '';\n\n        case 8:\n          domainName = _context.t0;\n          postBody = {\n            postTitle: query.postTitle\n          };\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(getPost(postBody, true, domainName));\n\n        case 12:\n          postData = _context.sent;\n          post = postData.data.post;\n          _context.next = 16;\n          return _regeneratorRuntime.awrap(getMultipleWidgetWithData({\n            widgets: ['postPageSidebar', 'footer']\n          }, true, domainName));\n\n        case 16:\n          widgetsData = _context.sent;\n          _context.next = 19;\n          return _regeneratorRuntime.awrap(getMultipleSetting({\n            settings: ['identity', 'navigation', 'design']\n          }, true, domainName));\n\n        case 19:\n          settingsData = _context.sent;\n          _context.next = 22;\n          return _regeneratorRuntime.awrap(getComments({\n            onDocument: post._id\n          }, true, domainName));\n\n        case 22:\n          commentsData = _context.sent;\n          settings = settingsData.data.settings ? settingsData.data.settings : [];\n          widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n          comments = commentsData.data.comments ? commentsData.data.comments : [];\n          return _context.abrupt(\"return\", _objectSpread({\n            post: post,\n            query: query,\n            widgets: widgets,\n            comments: comments\n          }, settings));\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(Post);","map":null,"metadata":{},"sourceType":"module"}