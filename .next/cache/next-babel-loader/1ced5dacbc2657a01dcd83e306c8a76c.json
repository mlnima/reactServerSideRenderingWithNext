{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport axios from \"axios\";\nimport { getPost } from \"../../_variables/ajaxPostsVariables\";\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\nimport withRouter from \"next/dist/client/with-router\";\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\nimport Head from \"next/head\";\n\nvar Post = function Post(props) {\n  return __jsx(AppLayout, null, __jsx(React.Fragment, null, __jsx(Head, null, __jsx(\"title\", null, props.post.title), __jsx(\"meta\", {\n    name: \"description\",\n    content: props.post.description\n  }), __jsx(\"meta\", {\n    name: \"keywords\",\n    content: [].concat(_toConsumableArray(props.post.tags), _toConsumableArray(props.post.categories), _toConsumableArray(props.post.actors))\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: props.post.title\n  }), __jsx(\"meta\", {\n    property: \"og:type\",\n    content: props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: props.post.videoEmbedCode\n  }), __jsx(\"meta\", {\n    property: \"og:image\",\n    content: props.post.mainThumbnail\n  })), __jsx(\"div\", {\n    className: \"post\"\n  }, __jsx(PostSidebar, null), __jsx(\"div\", {\n    className: \"main\"\n  }, __jsx(Iframe, {\n    iframeCode: props.post.videoEmbedCode,\n    meta: {\n      description: props.post.description,\n      title: props.post.title,\n      duration: props.post.duration,\n      thumbnailUrl: props.post.mainThumbnail,\n      embedURL: props.post.videoEmbedCode,\n      uploadDate: props.post.lastModify\n    }\n  }), __jsx(PostInfo, {\n    title: props.post.title,\n    description: props.post.description,\n    tags: props.post.tags,\n    actors: props.post.actors,\n    categories: props.post.categories,\n    id: props.post._id,\n    likes: props.post.likes,\n    disLikes: props.post.disLikes,\n    views: props.post.views,\n    videoEmbedCode: props.post.videoEmbedCode,\n    absolutePath: state.postAbsolutePath\n  })))));\n};\n\nPost.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, post, body, postData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          body = {\n            postTitle: query.postTitle\n          };\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(axios.post('http://localhost:3000/api/v1/posts/post', body));\n\n        case 5:\n          postData = _context.sent;\n          post = postData.data.post;\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](2);\n          console.error(_context.t0);\n\n        case 12:\n          return _context.abrupt(\"return\", {\n            post: post,\n            query: query\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 9]]);\n};\n\nexport default withRouter(Post);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/post/index.js"],"names":["React","useEffect","useState","useContext","AppLayout","axios","getPost","Iframe","PostInfo","withRouter","PostSidebar","Head","Post","props","post","title","description","tags","categories","actors","postType","videoEmbedCode","mainThumbnail","duration","thumbnailUrl","embedURL","uploadDate","lastModify","_id","likes","disLikes","views","state","postAbsolutePath","getInitialProps","pathname","query","req","res","err","body","postTitle","postData","data","console","error"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport AppLayout from \"../../components/layouts/AppLayout\";\r\nimport axios from \"axios\";\r\nimport { getPost } from \"../../_variables/ajaxPostsVariables\";\r\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\r\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\r\n\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\r\nimport Head from \"next/head\";\r\n\r\nconst Post = props => {\r\n\r\n    return (\r\n        <AppLayout>\r\n            <>\r\n                <Head>\r\n                    <title>{ props.post.title }</title>\r\n                    <meta name=\"description\" content={ props.post.description }/>\r\n                    <meta name=\"keywords\" content={ [ ...props.post.tags, ...props.post.categories,...props.post.actors ] }/>\r\n                    <meta property=\"og:title\" content={ props.post.title }/>\r\n                    <meta property=\"og:type\" content={ props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType }/>\r\n                    {/*url should define*/}\r\n                    <meta property=\"og:url\" content={ props.post.videoEmbedCode }/>\r\n                    <meta property=\"og:image\" content={ props.post.mainThumbnail }/>\r\n                </Head>\r\n                <div className='post'>\r\n                    <PostSidebar/>\r\n                    <div className=\"main\">\r\n                        <Iframe iframeCode={ props.post.videoEmbedCode } meta={ {\r\n                            description: props.post.description,\r\n                            title: props.post.title,\r\n                            duration: props.post.duration,\r\n                            thumbnailUrl: props.post.mainThumbnail,\r\n                            embedURL: props.post.videoEmbedCode,\r\n                            uploadDate: props.post.lastModify,\r\n                        } }/>\r\n\r\n                        <PostInfo\r\n                            title={ props.post.title }\r\n                            description={ props.post.description }\r\n                            tags={ props.post.tags }\r\n                            actors={ props.post.actors }\r\n                            categories={ props.post.categories }\r\n                            id={props.post._id}\r\n                            likes={props.post.likes}\r\n                            disLikes={props.post.disLikes}\r\n                            views={props.post.views}\r\n                            videoEmbedCode={props.post.videoEmbedCode}\r\n                            absolutePath = {state.postAbsolutePath}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let post;\r\n    const body = {\r\n        postTitle: query.postTitle,\r\n    };\r\n    try {\r\n        const postData = await axios.post('http://localhost:3000/api/v1/posts/post', body);\r\n        post = postData.data.post\r\n    } catch ( e ) {\r\n        console.error(e)\r\n    }\r\n    return { post, query,}\r\n};\r\n\r\nexport default withRouter(Post);"]},"metadata":{},"sourceType":"module"}