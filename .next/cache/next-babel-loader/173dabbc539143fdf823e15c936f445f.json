{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../components/layouts/AppLayout';\nimport { getSetting } from '../../_variables/ajaxVariables';\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\nimport Posts from '../../components/includes/Posts/Posts';\nimport Link from 'next/link';\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent';\n\nconst posts = props => {\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: \"posts\"\n  }, __jsx(Posts, {\n    posts: props.postsSource.posts || []\n  })), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getPostsData.pageNo,\n    totalCount: props.postsSource.totalCount,\n    size: props.getPostsData.size,\n    maxPage: Math.ceil(parseInt(props.postsSource.totalCount) / parseInt(props.getPostsData.size)) - 1\n  })));\n};\n\nposts.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let postsSource;\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  const getPostsData = {\n    size: parseInt(query.size) || parseInt(identity.postsCountPerPage) || 30,\n    pageNo: parseInt(query.page) || 1,\n    postType: query.type || 'all',\n    fields: ['title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration'],\n    keyword: query.keyword || '',\n    author: query.author || 'all',\n    actor: query.actor || 'all',\n    status: 'published',\n    tag: query.tag || 'all',\n    category: query.category || 'all',\n    sort: query.sort || 'latest'\n  };\n  const postsData = await getPosts(getPostsData);\n  postsSource = postsData.data ? postsData.data : [];\n  return {\n    identity,\n    navigation,\n    query,\n    postsSource,\n    getPostsData\n  };\n};\n\nexport default withRouter(posts);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/posts/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","getPosts","SiteSettingSetter","withRouter","Posts","Link","PaginationComponent","posts","props","postsSource","getPostsData","pageNo","totalCount","size","Math","ceil","parseInt","getInitialProps","pathname","query","req","res","err","navigation","identity","identityData","navigationData","data","setting","postsCountPerPage","page","postType","type","fields","keyword","author","actor","status","tag","category","sort","postsData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../_variables/ajaxVariables'\r\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport Posts from '../../components/includes/Posts/Posts'\r\nimport Link from 'next/link'\r\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent'\r\n\r\nconst posts = props => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <AppLayout>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <div className='posts'>\r\n                    <Posts posts={ props.postsSource.posts || [] }/>\r\n\r\n                </div>\r\n                <PaginationComponent\r\n                    isActive={ true }\r\n                    currentPage={ props.getPostsData.pageNo }\r\n                    totalCount={ props.postsSource.totalCount }\r\n                    size={ props.getPostsData.size }\r\n                    maxPage={ Math.ceil(parseInt(props.postsSource.totalCount) / parseInt(props.getPostsData.size)) - 1 }\r\n                />\r\n            </AppLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nposts.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let postsSource;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n\r\n    const getPostsData = {\r\n        size: parseInt(query.size) || parseInt(identity.postsCountPerPage) || 30,\r\n        pageNo: parseInt(query.page) || 1,\r\n        postType: query.type || 'all',\r\n        fields: [ 'title', 'mainThumbnail', 'quality', 'likes', 'disLikes', 'views', 'duration' ],\r\n        keyword: query.keyword || '',\r\n        author: query.author || 'all',\r\n        actor: query.actor || 'all',\r\n        status: 'published',\r\n        tag: query.tag || 'all',\r\n        category: query.category || 'all',\r\n        sort: query.sort || 'latest',\r\n    }\r\n\r\n    const postsData = await getPosts(getPostsData)\r\n\r\n    postsSource = postsData.data ? postsData.data : []\r\n    return { identity, navigation, query, postsSource, getPostsData }\r\n}\r\n\r\nexport default withRouter(posts);\r\n"]},"metadata":{},"sourceType":"module"}