{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\n\nvar actors = function actors(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    metaData: []\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {}, []);\n  var renderActors = state.metaData.map(function (meta) {\n    return __jsx(TagElement, {\n      key: meta._id,\n      name: meta.name\n    });\n  });\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"actors\"\n  }, renderActors));\n};\n\nactors.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, navigation, identity, actors, identityData, navigationData, categoriesData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          actors = [];\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 4:\n          identityData = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 7:\n          navigationData = _context.sent;\n\n          if (!query.meta) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(getMeta({\n            type: query.meta,\n            pageNo: 1,\n            size: 100\n          }));\n\n        case 11:\n          categoriesData = _context.sent;\n          actors = categoriesData.data.meta ? categoriesData.data.meta : [];\n\n        case 13:\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          return _context.abrupt(\"return\", {\n            identity: identity,\n            navigation: navigation,\n            query: query,\n            actors: actors\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default actors;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/actors/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","AppContext","TagElement","getSetting","getMeta","actors","props","contextData","metaData","state","setState","renderActors","map","meta","_id","name","getInitialProps","pathname","query","req","res","err","identityData","navigationData","type","pageNo","size","categoriesData","data","identity","setting","navigation"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,OAAT,QAAwB,wCAAxB;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK,EAAI;AACpB,MAAMC,WAAW,GAAGT,UAAU,CAACG,UAAD,CAA9B;;AADoB,kBAEQJ,QAAQ,CAAC;AACjCW,IAAAA,QAAQ,EAAE;AADuB,GAAD,CAFhB;AAAA,MAEZC,KAFY;AAAA,MAELC,QAFK;;AAKpBd,EAAAA,SAAS,CAAC,YAAM,CACf,CADQ,EACN,EADM,CAAT;AAIA,MAAMe,YAAY,GAAGF,KAAK,CAACD,QAAN,CAAeI,GAAf,CAAmB,UAAAC,IAAI,EAAI;AAC5C,WACI,MAAC,UAAD;AAAY,MAAA,GAAG,EAAEA,IAAI,CAACC,GAAtB;AAA2B,MAAA,IAAI,EAAED,IAAI,CAACE;AAAtC,MADJ;AAGH,GAJoB,CAArB;AAMA,SACI,MAAC,SAAD,QACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACKJ,YADL,CADJ,CADJ;AAOH,CAtBD;;AAwBAN,MAAM,CAACW,eAAP,GAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,QAAT,QAASA,QAAT,EAAmBC,KAAnB,QAAmBA,KAAnB,EAA0BC,GAA1B,QAA0BA,GAA1B,EAA+BC,GAA/B,QAA+BA,GAA/B,EAAoCC,GAApC,QAAoCA,GAApC;AAGjBhB,UAAAA,MAHiB,GAGR,EAHQ;AAAA;AAAA,2CAIMF,UAAU,CAAC,UAAD,CAJhB;;AAAA;AAIfmB,UAAAA,YAJe;AAAA;AAAA,2CAKQnB,UAAU,CAAC,YAAD,CALlB;;AAAA;AAKfoB,UAAAA,cALe;;AAAA,eAOjBL,KAAK,CAACL,IAPW;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAQYT,OAAO,CAAC;AACjCoB,YAAAA,IAAI,EAAEN,KAAK,CAACL,IADqB;AAEjCY,YAAAA,MAAM,EAAE,CAFyB;AAGjCC,YAAAA,IAAI,EAAE;AAH2B,WAAD,CARnB;;AAAA;AAQXC,UAAAA,cARW;AAajBtB,UAAAA,MAAM,GAAGsB,cAAc,CAACC,IAAf,CAAoBf,IAApB,GAA2Bc,cAAc,CAACC,IAAf,CAAoBf,IAA/C,GAAsD,EAA/D;;AAbiB;AAgBrBgB,UAAAA,QAAQ,GAAGP,YAAY,CAACM,IAAb,CAAkBE,OAAlB,GAA4BR,YAAY,CAACM,IAAb,CAAkBE,OAAlB,CAA0BF,IAAtD,GAA6D,EAAxE;AACAG,UAAAA,UAAU,GAAGR,cAAc,CAACK,IAAf,CAAoBE,OAApB,GAA8BP,cAAc,CAACK,IAAf,CAAoBE,OAAlD,GAA4D,EAAzE;AAjBqB,2CAkBd;AAAED,YAAAA,QAAQ,EAARA,QAAF;AAAYE,YAAAA,UAAU,EAAVA,UAAZ;AAAwBb,YAAAA,KAAK,EAALA,KAAxB;AAA+Bb,YAAAA,MAAM,EAANA;AAA/B,WAlBc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAzB;;AAoBA,eAAeA,MAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport TagElement from '../../../components/includes/TagElement/TagElement'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\n\r\nconst actors = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        metaData: []\r\n    });\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n\r\n    const renderActors = state.metaData.map(meta => {\r\n        return (\r\n            <TagElement key={meta._id} name={meta.name}/>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div className='actors'>\r\n                {renderActors}\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nactors.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let actors = []\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n\r\n    if (query.meta) {\r\n        const categoriesData = await getMeta({\r\n            type: query.meta,\r\n            pageNo: 1,\r\n            size: 100\r\n        })\r\n        actors = categoriesData.data.meta ? categoriesData.data.meta : []\r\n    }\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    return { identity, navigation, query, actors }\r\n}\r\nexport default actors;\r\n"]},"metadata":{},"sourceType":"module"}