{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { getPost } from '../../../_variables/ajaxPostsVariables';\nimport { getAbsolutePath } from '../../../_variables/_variables';\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\nimport TitleDescription from \"../../../components/adminIncludes/PostComponents/TitleDescription/TitleDescription\";\nimport ActionOnPost from \"../../../components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost\";\nimport DropDownWidget from \"../../../components/adminIncludes/PostComponents/DropDownWidget/DropDownWidget\";\nimport { AppContext } from \"../../../context/AppContext\";\nimport Format from \"../../../components/adminIncludes/PostComponents/Format/Format\";\nimport PostCategoriesTagsActors from \"../../../components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors\";\nimport VideoInformation from \"../../../components/adminIncludes/PostComponents/VideoInformation/VideoInformation\";\nimport withRouter from \"next/dist/client/with-router\";\nimport TextInputWithUploadBtn from '../../../components/adminIncludes/PostComponents/TextInputWithUploadBtn/TextInputWithUploadBtn';\nimport ImagePreview from '../../../components/adminIncludes/PostComponents/ImagePreview/ImagePreview';\nimport Link from 'next/link';\n\nvar Index = function Index(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    tags: [],\n    categories: [],\n    actors: [],\n    inSlideShow: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var onChangeHandler = function onChangeHandler(e) {\n    setState(_objectSpread({}, state, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var onPostMetaChangeHandler = function onPostMetaChangeHandler(type, data) {\n    setState(_objectSpread({}, state, _defineProperty({}, type, data)));\n  };\n\n  useEffect(function () {\n    setState(props.post);\n  }, [props]);\n  return __jsx(React.Fragment, null, __jsx(AdminLayout, null, __jsx(Link, {\n    href: \"/admin/post?new=1\"\n  }, __jsx(\"a\", {\n    className: \"newPostBtnAdminPanel\"\n  }, \"New Post\")), __jsx(\"div\", {\n    className: \"Post\"\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(TitleDescription, {\n    postData: state,\n    onChangeHandler: onChangeHandler\n  }), __jsx(TextInputWithUploadBtn, {\n    postData: state,\n    onChangeHandler: onChangeHandler,\n    name: \"mainThumbnail\",\n    title: \"Main thumbnail\"\n  }), __jsx(ImagePreview, {\n    postData: state\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    component: VideoInformation,\n    title: \"Video Information\",\n    onChangeHandler: onChangeHandler\n  })), __jsx(\"div\", {\n    className: \"side\"\n  }, __jsx(DropDownWidget, {\n    postData: state,\n    component: ActionOnPost,\n    title: state.status,\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    component: Format,\n    title: \"Format\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    isNewPost: props.query[\"new\"] === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"categories\",\n    title: \"Post Category\",\n    onChangeHandler: onChangeHandler,\n    onPostMetaChangeHandler: onPostMetaChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    isNewPost: props.query[\"new\"] === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"tags\",\n    title: \"Post Tags\",\n    onChangeHandler: onChangeHandler,\n    onPostMetaChangeHandler: onPostMetaChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    isNewPost: props.query[\"new\"] === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"actors\",\n    title: \"Post Actors\",\n    onChangeHandler: onChangeHandler,\n    onPostMetaChangeHandler: onPostMetaChangeHandler\n  })))));\n};\n\nIndex.getInitialProps = function _callee(_ref) {\n  var query, req, domainName, post, postData, requestBody, newPostData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query, req = _ref.req;\n\n          if (!req) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getAbsolutePath(req));\n\n        case 4:\n          _context.t0 = _context.sent;\n          _context.next = 8;\n          break;\n\n        case 7:\n          _context.t0 = '';\n\n        case 8:\n          domainName = _context.t0;\n          newPostData = {\n            status: 'published',\n            postType: 'video',\n            tags: [],\n            categories: [],\n            actors: [],\n            inSlideShow: false,\n            quality: '2160p',\n            views: 0,\n            likes: 0,\n            disLikes: 0\n          };\n\n          if (!query[\"new\"]) {\n            _context.next = 14;\n            break;\n          }\n\n          post = newPostData;\n          _context.next = 20;\n          break;\n\n        case 14:\n          if (!(query.postTitle || query.id)) {\n            _context.next = 20;\n            break;\n          }\n\n          requestBody = {\n            postTitle: query.postTitle,\n            _id: query.id\n          };\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(getPost(requestBody, true, domainName));\n\n        case 18:\n          postData = _context.sent;\n          post = postData.data ? postData.data.post : newPostData;\n\n        case 20:\n          return _context.abrupt(\"return\", {\n            post: post,\n            query: query\n          });\n\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(Index);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/post/index.js"],"names":["React","useEffect","useState","useContext","useRef","getPost","getAbsolutePath","AdminLayout","TitleDescription","ActionOnPost","DropDownWidget","AppContext","Format","PostCategoriesTagsActors","VideoInformation","withRouter","TextInputWithUploadBtn","ImagePreview","Link","Index","props","contextData","tags","categories","actors","inSlideShow","state","setState","onChangeHandler","e","target","name","value","onPostMetaChangeHandler","type","data","post","status","query","getInitialProps","req","domainName","newPostData","postType","quality","views","likes","disLikes","postTitle","id","requestBody","_id","postData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { getPost } from '../../../_variables/ajaxPostsVariables';\r\nimport { getAbsolutePath } from '../../../_variables/_variables'\r\n\r\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\r\nimport TitleDescription from \"../../../components/adminIncludes/PostComponents/TitleDescription/TitleDescription\";\r\nimport ActionOnPost from \"../../../components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost\";\r\nimport DropDownWidget from \"../../../components/adminIncludes/PostComponents/DropDownWidget/DropDownWidget\";\r\nimport { AppContext } from \"../../../context/AppContext\";\r\nimport Format from \"../../../components/adminIncludes/PostComponents/Format/Format\";\r\nimport PostCategoriesTagsActors from \"../../../components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors\";\r\nimport VideoInformation from \"../../../components/adminIncludes/PostComponents/VideoInformation/VideoInformation\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport TextInputWithUploadBtn from '../../../components/adminIncludes/PostComponents/TextInputWithUploadBtn/TextInputWithUploadBtn'\r\nimport ImagePreview from '../../../components/adminIncludes/PostComponents/ImagePreview/ImagePreview';\r\nimport Link from 'next/link'\r\n\r\nconst Index = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ state, setState ] = useState({\r\n        tags: [],\r\n        categories: [],\r\n        actors: [],\r\n        inSlideShow: false\r\n    })\r\n\r\n    const onChangeHandler = e => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    const onPostMetaChangeHandler = (type, data) => {\r\n        setState({\r\n            ...state,\r\n            [type]: data\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setState(props.post)\r\n    }, [ props ]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <AdminLayout>\r\n                <Link href='/admin/post?new=1'><a className='newPostBtnAdminPanel'>New Post</a></Link>\r\n                <div className='Post'>\r\n\r\n                    <div className=\"content\">\r\n                        <TitleDescription postData={ state } onChangeHandler={ onChangeHandler }/>\r\n                        <TextInputWithUploadBtn postData={state} onChangeHandler={onChangeHandler} name='mainThumbnail' title='Main thumbnail' />\r\n                        <ImagePreview postData={ state } />\r\n                        <DropDownWidget postData={ state } component={ VideoInformation } title='Video Information' onChangeHandler={ onChangeHandler }/>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"side\">\r\n                        <DropDownWidget postData={ state } component={ ActionOnPost } title={state.status} onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget postData={ state } component={ Format } title='Format' onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget postData={ state } isNewPost={ props.query.new === 'true' }\r\n                                        component={ PostCategoriesTagsActors }\r\n                                        type='categories' title='Post Category'\r\n                                        onChangeHandler={ onChangeHandler } onPostMetaChangeHandler={ onPostMetaChangeHandler }/>\r\n                        <DropDownWidget postData={ state } isNewPost={ props.query.new === 'true' }\r\n                                        component={ PostCategoriesTagsActors }\r\n                                        type='tags' title='Post Tags'\r\n                                        onChangeHandler={ onChangeHandler } onPostMetaChangeHandler={ onPostMetaChangeHandler }/>\r\n                        <DropDownWidget postData={ state } isNewPost={ props.query.new === 'true' }\r\n                                        component={ PostCategoriesTagsActors }\r\n                                        type='actors' title='Post Actors'\r\n                                        onChangeHandler={ onChangeHandler } onPostMetaChangeHandler={ onPostMetaChangeHandler }/>\r\n                    </div>\r\n\r\n                </div>\r\n            </AdminLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nIndex.getInitialProps = async ({ query, req }) => {\r\n    const domainName = req ? await getAbsolutePath(req) : '';\r\n    let post;\r\n    let postData\r\n    let requestBody;\r\n\r\n    const newPostData = {\r\n        status: 'published',\r\n        postType: 'video',\r\n        tags: [],\r\n        categories: [],\r\n        actors: [],\r\n        inSlideShow: false,\r\n        quality: '2160p',\r\n        views: 0,\r\n        likes: 0,\r\n        disLikes: 0\r\n    }\r\n\r\n    if (query.new) {\r\n        post = newPostData\r\n    } else if (query.postTitle || query.id) {\r\n        requestBody = {\r\n            postTitle: query.postTitle,\r\n            _id: query.id,\r\n        };\r\n        postData = await getPost(requestBody, true, domainName)\r\n        post = postData.data ? postData.data.post : newPostData\r\n    }\r\n\r\n    return { post, query }\r\n};\r\nexport default withRouter(Index);"]},"metadata":{},"sourceType":"module"}