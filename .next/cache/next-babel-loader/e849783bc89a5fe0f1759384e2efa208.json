{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from \"../../../../components/layouts/AdminLayout\";\nimport { updateSetting, getSetting } from \"../../../../_variables/ajaxVariables\";\nimport FA from \"react-fontawesome\";\n\nconst settings = props => {\n  const keywordsInput = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    siteAddress: '',\n    protocol: '',\n    title: '',\n    themeColor: '',\n    description: '',\n    keywords: []\n  });\n  useEffect(() => {\n    console.log(state);\n  }, [state]);\n  useEffect(() => {\n    getSetting('identity').then(res => {\n      if (res.data.setting) {\n        setState(_objectSpread({}, state, {}, res.data.setting.data));\n      } else {\n        setState(_objectSpread({}, state, {\n          title: 'website title',\n          themeColor: '#000',\n          description: 'website description',\n          Keywords: ['keywords']\n        }));\n      }\n    });\n  }, []);\n\n  const onSubmitHandler = e => {\n    e.preventDefault();\n    updateSetting('identity', state);\n  };\n\n  const onChangeHandler = e => {\n    setState(_objectSpread({}, state, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const deleteItem = e => {\n    setState(_objectSpread({}, state, {\n      keywords: state.keywords.filter(i => {\n        return i !== e.currentTarget.name;\n      })\n    }));\n  };\n\n  const addKeyword = () => {\n    if (keywordsInput.current.value.includes(',')) {\n      let newItems = keywordsInput.current.value.split(',');\n      setState(state => _objectSpread({}, state, {\n        keywords: [...state.keywords, ...newItems]\n      }));\n    } else {\n      setState(_objectSpread({}, state, {\n        keywords: [...state.keywords, keywordsInput.current.value]\n      }));\n    }\n\n    keywordsInput.current.value = '';\n  };\n\n  const keywords = state.keywords.map(item => {\n    return __jsx(\"div\", {\n      key: item,\n      className: \"item\"\n    }, __jsx(\"p\", null, item), __jsx(\"button\", {\n      name: item,\n      onClick: e => deleteItem(e)\n    }, __jsx(FA, {\n      className: \"fontawesomeMedium\",\n      name: \"times\"\n    })));\n  });\n  return __jsx(AdminLayout, null, __jsx(\"form\", {\n    id: \"site-settings-form\",\n    onSubmit: e => onSubmitHandler(e)\n  }, __jsx(\"div\", {\n    className: \"site-settings-form-section\"\n  }, __jsx(\"p\", null, \"Site Address (URL)\"), __jsx(\"input\", {\n    name: \"siteAddress\",\n    value: state.siteAddress,\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"div\", {\n    className: \"site-settings-form-section\"\n  }, __jsx(\"p\", null, \"Protocol\"), __jsx(\"select\", {\n    name: \"protocol\",\n    value: state.protocol,\n    onChange: e => onChangeHandler(e)\n  }, __jsx(\"option\", null, \"Http\"), __jsx(\"option\", null, \"Https\"))), __jsx(\"div\", {\n    className: \"site-settings-form-section\"\n  }, __jsx(\"p\", null, \"Site Title\"), __jsx(\"input\", {\n    name: \"title\",\n    value: state.title,\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"div\", {\n    className: \"site-settings-form-section\"\n  }, __jsx(\"p\", null, \"Description\"), __jsx(\"textarea\", {\n    name: \"description\",\n    value: state.description,\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"div\", {\n    className: \"site-settings-form-section keywords\"\n  }, __jsx(\"p\", null, \"Keywords\"), __jsx(\"input\", {\n    ref: keywordsInput,\n    name: \"keywords\"\n  }), __jsx(\"button\", {\n    type: \"button\",\n    onClick: () => addKeyword()\n  }, \"add\"), __jsx(\"span\", null, \"Separate tags with commas\"), __jsx(\"div\", {\n    className: \"items\"\n  }, keywords)), __jsx(\"div\", {\n    className: \"site-settings-form-section\"\n  }, __jsx(\"p\", null, \"Theme Color\"), __jsx(\"input\", {\n    name: \"themeColor\",\n    value: state.themeColor,\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"button\", {\n    className: \"submitBtn\",\n    type: \"submit\"\n  }, \"save settings\")));\n};\n\nsettings.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  return {\n    name: 'test'\n  };\n};\n\nexport default settings;","map":null,"metadata":{},"sourceType":"module"}