{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport axios from \"axios\";\nimport { getPost } from \"../../_variables/ajaxPostsVariables\";\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\nimport withRouter from \"next/dist/client/with-router\";\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\nimport Head from \"next/head\";\nimport { getSetting } from \"../../_variables/ajaxVariables\";\nimport { AppContext } from \"../../context/AppContext\";\n\nvar Post = function Post(props) {\n  var contextData = useContext(AppContext);\n\n  var RenderMeta = function RenderMeta() {\n    if (props.post.title) {\n      return __jsx(Head, null, __jsx(\"title\", null, props.post.title), __jsx(\"meta\", {\n        name: \"description\",\n        content: props.post.description\n      }), __jsx(\"meta\", {\n        name: \"keywords\",\n        content: [].concat(_toConsumableArray(props.post.tags), _toConsumableArray(props.post.categories), _toConsumableArray(props.post.actors))\n      }), __jsx(\"meta\", {\n        property: \"og:title\",\n        content: props.post.title\n      }), __jsx(\"meta\", {\n        property: \"og:type\",\n        content: props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType\n      }), __jsx(\"meta\", {\n        property: \"og:url\",\n        content: props.post.videoEmbedCode\n      }), __jsx(\"meta\", {\n        property: \"og:image\",\n        content: props.post.mainThumbnail\n      }));\n    } else return null;\n  }; // useEffect(()=>{\n  //     console.log( props)\n  //         if(props.navigation){\n  //             contextData.dispatchNavigationData(props.navigation.data)\n  //         }\n  // },[props ]);\n\n\n  useEffect(function () {\n    if (props.navigation) {\n      contextData.dispatchNavigationData(props.navigation.data);\n    }\n\n    if (props.identity) {\n      contextData.dispatchSiteIdentity(function (siteIdentity) {\n        return _objectSpread({}, siteIdentity, {}, props.identity);\n      });\n    }\n  }, [props]);\n  return __jsx(AppLayout, null, __jsx(React.Fragment, null, __jsx(RenderMeta, null), __jsx(\"div\", {\n    className: \"post\"\n  }, __jsx(PostSidebar, null), __jsx(\"div\", {\n    className: \"main\"\n  }, __jsx(Iframe, {\n    iframeCode: props.post.videoEmbedCode,\n    meta: {\n      description: props.post.description,\n      title: props.post.title,\n      duration: props.post.duration,\n      thumbnailUrl: props.post.mainThumbnail,\n      embedURL: props.post.videoEmbedCode,\n      uploadDate: props.post.lastModify\n    }\n  }), __jsx(PostInfo, {\n    title: props.post.title,\n    description: props.post.description,\n    tags: props.post.tags,\n    actors: props.post.actors,\n    categories: props.post.categories,\n    id: props.post._id,\n    likes: props.post.likes,\n    disLikes: props.post.disLikes,\n    views: props.post.views,\n    videoEmbedCode: props.post.videoEmbedCode\n  })))));\n};\n\nPost.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, post, navigation, identity, identityData, navigationData, postBody, postData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 3:\n          identityData = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 6:\n          navigationData = _context.sent;\n          postBody = {\n            postTitle: query.postTitle\n          };\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(axios.post('http://localhost:3000/api/v1/posts/post', postBody));\n\n        case 10:\n          postData = _context.sent;\n          post = postData.data.post;\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          return _context.abrupt(\"return\", {\n            post: post,\n            query: query,\n            navigation: navigation,\n            identity: identity\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(Post);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/post/index.js"],"names":["React","useEffect","useState","useContext","AppLayout","axios","getPost","Iframe","PostInfo","withRouter","PostSidebar","Head","getSetting","AppContext","Post","props","contextData","RenderMeta","post","title","description","tags","categories","actors","postType","videoEmbedCode","mainThumbnail","navigation","dispatchNavigationData","data","identity","dispatchSiteIdentity","siteIdentity","duration","thumbnailUrl","embedURL","uploadDate","lastModify","_id","likes","disLikes","views","getInitialProps","pathname","query","req","res","err","identityData","navigationData","postBody","postTitle","postData","setting"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport AppLayout from \"../../components/layouts/AppLayout\";\r\nimport axios from \"axios\";\r\nimport { getPost } from \"../../_variables/ajaxPostsVariables\";\r\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\r\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\r\n\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\r\nimport Head from \"next/head\";\r\nimport { getSetting } from \"../../_variables/ajaxVariables\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nconst Post = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n\r\n    const RenderMeta = () => {\r\n        if (props.post.title) {\r\n            return (\r\n                <Head>\r\n                    <title>{ props.post.title }</title>\r\n                    <meta name=\"description\" content={ props.post.description }/>\r\n                    <meta name=\"keywords\" content={ [ ...props.post.tags, ...props.post.categories, ...props.post.actors ] }/>\r\n                    <meta property=\"og:title\" content={ props.post.title }/>\r\n                    <meta property=\"og:type\" content={ props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType }/>\r\n                    {/*url should define*/ }\r\n                    <meta property=\"og:url\" content={ props.post.videoEmbedCode }/>\r\n                    <meta property=\"og:image\" content={ props.post.mainThumbnail }/>\r\n                </Head>\r\n            )\r\n        } else return null\r\n    }\r\n\r\n\r\n\r\n    // useEffect(()=>{\r\n    //     console.log( props)\r\n    //         if(props.navigation){\r\n    //             contextData.dispatchNavigationData(props.navigation.data)\r\n    //         }\r\n    // },[props ]);\r\n    useEffect(() => {\r\n        if (props.navigation) {\r\n            contextData.dispatchNavigationData(props.navigation.data)\r\n        }\r\n        if (props.identity) {\r\n            contextData.dispatchSiteIdentity(siteIdentity => ({\r\n                ...siteIdentity,\r\n                ...props.identity\r\n            }))\r\n        }\r\n    }, [ props ]);\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            <>\r\n                <RenderMeta/>\r\n                <div className='post'>\r\n                    <PostSidebar/>\r\n                    <div className=\"main\">\r\n                        <Iframe iframeCode={ props.post.videoEmbedCode } meta={ {\r\n                            description: props.post.description,\r\n                            title: props.post.title,\r\n                            duration: props.post.duration,\r\n                            thumbnailUrl: props.post.mainThumbnail,\r\n                            embedURL: props.post.videoEmbedCode,\r\n                            uploadDate: props.post.lastModify,\r\n                        } }/>\r\n\r\n                        <PostInfo\r\n                            title={ props.post.title }\r\n                            description={ props.post.description }\r\n                            tags={ props.post.tags }\r\n                            actors={ props.post.actors }\r\n                            categories={ props.post.categories }\r\n                            id={ props.post._id }\r\n                            likes={ props.post.likes }\r\n                            disLikes={ props.post.disLikes }\r\n                            views={ props.post.views }\r\n                            videoEmbedCode={ props.post.videoEmbedCode }\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let post;\r\n    let navigation;\r\n    let identity;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    const postBody = {\r\n        postTitle: query.postTitle,\r\n    };\r\n    const postData = await axios.post('http://localhost:3000/api/v1/posts/post', postBody);\r\n    post = postData.data.post\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    return { post, query,navigation,identity }\r\n};\r\n\r\nexport default withRouter(Post);"]},"metadata":{},"sourceType":"module"}