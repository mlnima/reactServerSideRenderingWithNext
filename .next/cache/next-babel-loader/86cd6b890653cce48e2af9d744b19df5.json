{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport FA from \"react-fontawesome\";\n\nconst PostCategoriesTagsActors = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: items,\n    1: setItems\n  } = useState([]);\n  let newItemsElement = useRef(null);\n  useEffect(() => {\n    if (props.isNewPost) {} // console.log(props, props.type)\n\n  }, []);\n\n  const deleteItem = e => {// contextData.setPostData({\n    //     ...contextData.postData,\n    //     post: {\n    //         ...contextData.postData.post,\n    //         tags: contextData.postData.post.tags.filter(tag => {\n    //             return tag != e.target.name\n    //         })\n    //     }\n    // })\n  }; // useEffect(()=>{\n  //     if (contextData.editingPostData.format === 'video'){\n  //         contextData.dispatchEditingPostData(editingPostData=>({\n  //             ...editingPostData,\n  //             tags:[],\n  //             categories:[],\n  //             actors:[]\n  //         }))\n  //     }else {\n  //         contextData.dispatchEditingPostData(editingPostData=>({\n  //             ...editingPostData,\n  //             tags:[],\n  //             categories:[]\n  //         }))\n  //     }\n  // },[ contextData.editingPostData.format]);\n\n\n  const addNewItem = () => {\n    if (newItemsElement.current.value.includes(',')) {\n      let newItems = newItemsElement.current.value.split(',');\n\n      if (contextData.editingPostData[props.type]) {\n        contextData.dispatchEditingPostData(editingPostData => _objectSpread({}, editingPostData, {\n          [props.type]: [...contextData.editingPostData[props.type], ...newItems]\n        }));\n      } else {\n        contextData.dispatchEditingPostData(editingPostData => _objectSpread({}, editingPostData, {\n          [props.type]: newItems\n        }));\n      }\n    } else {\n      let newItem = newItemsElement.current.value;\n\n      if (contextData.editingPostData[props.type]) {\n        contextData.dispatchEditingPostData(editingPostData => _objectSpread({}, editingPostData, {\n          [props.type]: [...contextData.editingPostData[props.type], ...newItem]\n        }));\n      } else {\n        contextData.dispatchEditingPostData(editingPostData => _objectSpread({}, editingPostData, {\n          [props.type]: newItem\n        }));\n      }\n    }\n  };\n\n  const addedItems = contextData.editingPostData[props.type].map(item => {\n    let icon = props.type === 'tags' ? 'tags' : props.type === 'actors' ? 'star' : props.type === 'categories' ? 'cat' : '';\n    console.log(item);\n    return __jsx(\"div\", {\n      key: item,\n      className: \"tagElement\"\n    }, __jsx(\"p\", null, item), __jsx(\"button\", {\n      name: item,\n      onClick: e => deleteItem(e)\n    }, __jsx(FA, {\n      className: \"fontawesomeMedium\",\n      name: \"tag\"\n    })));\n  });\n  return __jsx(\"div\", {\n    className: \"PostCategoriesTagsActors\"\n  }, __jsx(\"div\", {\n    className: \"addNewTag\"\n  }, __jsx(\"input\", {\n    ref: newItemsElement,\n    type: \"text\"\n  }), __jsx(\"button\", {\n    onClick: () => addNewItem()\n  }, \" Add\")), __jsx(\"span\", null, \"Separate tags with commas\"), __jsx(\"div\", {\n    className: \"items\"\n  }, addedItems));\n};\n\nexport default PostCategoriesTagsActors;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors.js"],"names":["React","useEffect","useState","useContext","useRef","AppContext","FA","PostCategoriesTagsActors","props","contextData","items","setItems","newItemsElement","isNewPost","deleteItem","e","addNewItem","current","value","includes","newItems","split","editingPostData","type","dispatchEditingPostData","newItem","addedItems","map","item","icon","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport FA from \"react-fontawesome\";\r\n\r\nconst PostCategoriesTagsActors = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ items, setItems ] = useState([]);\r\n    let newItemsElement = useRef(null);\r\n    useEffect(() => {\r\n        if (props.isNewPost) {\r\n\r\n        }\r\n        // console.log(props, props.type)\r\n    }, []);\r\n\r\n    const deleteItem = (e) => {\r\n        // contextData.setPostData({\r\n        //     ...contextData.postData,\r\n        //     post: {\r\n        //         ...contextData.postData.post,\r\n        //         tags: contextData.postData.post.tags.filter(tag => {\r\n        //             return tag != e.target.name\r\n        //         })\r\n        //     }\r\n        // })\r\n    };\r\n    // useEffect(()=>{\r\n    //     if (contextData.editingPostData.format === 'video'){\r\n    //         contextData.dispatchEditingPostData(editingPostData=>({\r\n    //             ...editingPostData,\r\n    //             tags:[],\r\n    //             categories:[],\r\n    //             actors:[]\r\n    //         }))\r\n    //     }else {\r\n    //         contextData.dispatchEditingPostData(editingPostData=>({\r\n    //             ...editingPostData,\r\n    //             tags:[],\r\n    //             categories:[]\r\n    //         }))\r\n    //     }\r\n    // },[ contextData.editingPostData.format]);\r\n\r\n    const addNewItem = () => {\r\n\r\n        if (newItemsElement.current.value.includes(',')) {\r\n            let newItems = newItemsElement.current.value.split(',');\r\n            if (contextData.editingPostData[props.type]) {\r\n                contextData.dispatchEditingPostData(editingPostData => ({\r\n                    ...editingPostData,\r\n                    [props.type]: [ ...contextData.editingPostData[props.type], ...newItems ]\r\n                }))\r\n            } else {\r\n                contextData.dispatchEditingPostData(editingPostData => ({\r\n                    ...editingPostData,\r\n                    [props.type]: newItems\r\n                }))\r\n            }\r\n        } else {\r\n            let newItem = newItemsElement.current.value;\r\n            if (contextData.editingPostData[props.type]) {\r\n                contextData.dispatchEditingPostData(editingPostData => ({\r\n                    ...editingPostData,\r\n                    [props.type]: [ ...contextData.editingPostData[props.type], ...newItem ]\r\n                }))\r\n            } else {\r\n                contextData.dispatchEditingPostData(editingPostData => ({\r\n                    ...editingPostData,\r\n                    [props.type]: newItem\r\n                }))\r\n            }\r\n        }\r\n    };\r\n\r\n    const addedItems = contextData.editingPostData[props.type].map(item => {\r\n        let icon = props.type === 'tags' ? 'tags'\r\n                : props.type === 'actors' ? 'star'\r\n                : props.type === 'categories' ? 'cat'\r\n                    :''\r\n\r\n                    console.log(item)\r\n        return (\r\n            <div key={ item } className='tagElement'>\r\n                <p>{ item }</p>\r\n                <button name={ item } onClick={ (e) => deleteItem(e) }><FA className='fontawesomeMedium' name=\"tag\"/></button>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className='PostCategoriesTagsActors'>\r\n            <div className=\"addNewTag\">\r\n                <input ref={ newItemsElement } type='text'/>\r\n                <button onClick={ () => addNewItem() }> Add</button>\r\n            </div>\r\n            <span>Separate tags with commas</span>\r\n            <div className=\"items\">\r\n                { addedItems }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default PostCategoriesTagsActors;"]},"metadata":{},"sourceType":"module"}