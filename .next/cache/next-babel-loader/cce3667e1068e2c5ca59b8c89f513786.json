{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport FA from \"react-fontawesome\";\n\nconst PostCategoriesTagsActors = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: items,\n    1: setItems\n  } = useState([]);\n  let newItemsElement = useRef(null);\n\n  const deleteItem = e => {\n    contextData.dispatchEditingPostData(_objectSpread({}, contextData.editingPostData, {\n      [props.type]: contextData.editingPostData[props.type].filter(i => {\n        return i !== e.currentTarget.name;\n      })\n    }));\n  };\n\n  const addNewItem = () => {\n    console.log(newItemsElement.current.value.includes(','));\n\n    if (newItemsElement.current.value.includes(',')) {\n      let newItems = newItemsElement.current.value.split(',');\n      contextData.dispatchEditingPostData(editingPostData => _objectSpread({}, editingPostData, {\n        [props.type]: [...contextData.editingPostData[props.type], ...newItems]\n      }));\n    } else {\n      // let newItems = contextData.editingPostData[props.type].push(newItemsElement.current.value);\n      //     newItems = [...contextData.editingPostData[props.type],newItemsElement.current.value];\n      // console.log( contextData.editingPostData[props.type],newItems)\n      contextData.dispatchEditingPostData(_objectSpread({}, contextData.editingPostData, {\n        [props.type]: [...contextData.editingPostData[props.type], newItemsElement.current.value]\n      }));\n    }\n  };\n\n  const addedItems = contextData.editingPostData[props.type].map(item => {\n    let icon = props.type === 'tags' ? 'tags' : props.type === 'actors' ? 'star' : props.type === 'categories' ? 'folder' : '';\n    return __jsx(\"div\", {\n      key: item,\n      className: \"item\"\n    }, __jsx(\"p\", null, item), __jsx(\"button\", {\n      name: item,\n      onClick: e => deleteItem(e)\n    }, __jsx(FA, {\n      className: \"fontawesomeMedium\",\n      name: \"times\"\n    })));\n  });\n  return __jsx(\"div\", {\n    className: \"PostCategoriesTagsActors\"\n  }, __jsx(\"div\", {\n    className: \"addNewTag\"\n  }, __jsx(\"input\", {\n    ref: newItemsElement,\n    type: \"text\"\n  }), __jsx(\"button\", {\n    onClick: () => addNewItem()\n  }, \" Add\")), __jsx(\"span\", null, \"Separate tags with commas\"), __jsx(\"div\", {\n    className: \"items\"\n  }, addedItems));\n};\n\nexport default PostCategoriesTagsActors;","map":null,"metadata":{},"sourceType":"module"}