{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useRef } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport withRouter from \"next/dist/client/with-router\";\nimport axios from 'axios';\nimport { getAbsolutePath } from '../../_variables/_variables';\nimport { getMultipleSetting } from '../../_variables/ajaxVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\n\nvar Register = function Register(props) {\n  var messageLabel = useRef(null);\n\n  var _useState = useState({\n    username: undefined,\n    email: undefined,\n    password: undefined,\n    password2: undefined\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState({\n    response: undefined,\n    type: undefined\n  }),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var onChangeHandler = function onChangeHandler(e) {\n    setState(_objectSpread({}, state, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var onSubmitHandler = function onSubmitHandler(e) {\n    e.preventDefault();\n    axios.post('/api/v1/users/register', state).then(function (res) {\n      if (type === 'success') {\n        messageLabel.current.style.backgroundColor = 'green';\n      } else {\n        messageLabel.current.style.backgroundColor = 'red';\n      }\n\n      setData(_objectSpread({}, data, {\n        response: res.data.response,\n        type: res.data.type\n      }));\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  };\n\n  return __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: \"Register authPage\"\n  }, __jsx(\"form\", {\n    className: \"authForm\",\n    onSubmit: function onSubmit(e) {\n      return onSubmitHandler(e);\n    }\n  }, __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"username\"), __jsx(\"input\", {\n    name: \"username\",\n    onChange: function onChange(e) {\n      return onChangeHandler(e);\n    }\n  })), __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"email\"), __jsx(\"input\", {\n    name: \"email\",\n    onChange: function onChange(e) {\n      return onChangeHandler(e);\n    }\n  })), __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"password\"), __jsx(\"input\", {\n    name: \"password\",\n    onChange: function onChange(e) {\n      return onChangeHandler(e);\n    }\n  })), __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"repeat password\"), __jsx(\"input\", {\n    name: \"password2\",\n    onChange: function onChange(e) {\n      return onChangeHandler(e);\n    }\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    className: \"submitBtn\"\n  }, \"Register\"))));\n};\n\nRegister.getInitialProps = function _callee(_ref) {\n  var req, domainName, settings, settingsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = _ref.req;\n\n          if (!req) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getAbsolutePath(req));\n\n        case 4:\n          _context.t0 = _context.sent;\n          _context.next = 8;\n          break;\n\n        case 7:\n          _context.t0 = '';\n\n        case 8:\n          domainName = _context.t0;\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(getMultipleSetting({\n            settings: ['identity', 'navigation', 'design']\n          }, true, domainName));\n\n        case 11:\n          settingsData = _context.sent;\n          settings = settingsData.data.settings ? settingsData.data.settings : [];\n          return _context.abrupt(\"return\", _objectSpread({}, settings));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(Register);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/auth/register.js"],"names":["React","useState","useRef","AppLayout","withRouter","axios","getAbsolutePath","getMultipleSetting","SiteSettingSetter","Register","props","messageLabel","username","undefined","email","password","password2","state","setState","response","type","data","setData","onChangeHandler","e","target","name","value","onSubmitHandler","preventDefault","post","then","res","current","style","backgroundColor","err","console","log","getInitialProps","req","domainName","settings","settingsData"],"mappings":"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","sourcesContent":["import React, { useState,useRef } from 'react';\r\nimport AppLayout from \"../../components/layouts/AppLayout\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport axios from 'axios'\r\nimport { getAbsolutePath } from '../../_variables/_variables'\r\nimport { getMultipleSetting } from '../../_variables/ajaxVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\n\r\nconst Register = props => {\r\n    const messageLabel = useRef(null);\r\n    const [ state, setState ] = useState({\r\n        username: undefined,\r\n        email: undefined,\r\n        password: undefined,\r\n        password2: undefined\r\n    });\r\n    const [ data, setData ] = useState({\r\n        response:undefined,\r\n        type:undefined,\r\n    });\r\n\r\n    const onChangeHandler = e => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    const onSubmitHandler = e => {\r\n        e.preventDefault()\r\n        axios.post('/api/v1/users/register',state).then(res=>{\r\n            if (type === 'success'){\r\n                messageLabel.current.style.backgroundColor = 'green'\r\n            }else {\r\n                messageLabel.current.style.backgroundColor = 'red'\r\n            }\r\n\r\n            setData({\r\n                ...data,\r\n                response:res.data.response,\r\n                type:res.data.type,\r\n            })\r\n        }).catch(err=>console.log( err))\r\n    };\r\n\r\n    return (\r\n        <AppLayout>\r\n            <SiteSettingSetter { ...props }/>\r\n            <div className='Register authPage'>\r\n                <form className='authForm' onSubmit={e=>onSubmitHandler(e)}>\r\n                    <div className=\"authFormItem\">\r\n                        <p>username</p>\r\n                        <input name='username' onChange={ e => onChangeHandler(e) }/>\r\n                    </div>\r\n                    <div className=\"authFormItem\">\r\n                        <p>email</p>\r\n                        <input name='email' onChange={ e => onChangeHandler(e) }/>\r\n                    </div>\r\n                    <div className=\"authFormItem\">\r\n                        <p>password</p>\r\n                        <input name='password' onChange={ e => onChangeHandler(e) }/>\r\n                    </div>\r\n                    <div className=\"authFormItem\">\r\n                        <p>repeat password</p>\r\n                        <input name='password2' onChange={ e => onChangeHandler(e) }/>\r\n                    </div>\r\n                    <button type='submit' className='submitBtn'>Register</button>\r\n                </form>\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nRegister.getInitialProps = async ({ req }) => {\r\n    const domainName = req ? await getAbsolutePath(req) : ''\r\n    let settings;\r\n    const settingsData = await getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }, true, domainName)\r\n\r\n\r\n    settings = settingsData.data.settings ? settingsData.data.settings : []\r\n    return { ...settings }\r\n}\r\nexport default withRouter(Register);"]},"metadata":{},"sourceType":"module"}