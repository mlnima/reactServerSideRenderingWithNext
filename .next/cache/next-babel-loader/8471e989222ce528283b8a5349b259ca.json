{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { getPost } from '../../../_variables/ajaxPostsVariables';\nimport { getAbsolutePath } from '../../../_variables/_variables';\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\nimport TitleDescription from \"../../../components/adminIncludes/PostComponents/TitleDescription/TitleDescription\";\nimport ActionOnPost from \"../../../components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost\";\nimport DropDownWidget from \"../../../components/adminIncludes/PostComponents/DropDownWidget/DropDownWidget\";\nimport { AppContext } from \"../../../context/AppContext\";\nimport Format from \"../../../components/adminIncludes/PostComponents/Format/Format\";\nimport PostCategoriesTagsActors from \"../../../components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors\";\nimport VideoInformation from \"../../../components/adminIncludes/PostComponents/VideoInformation/VideoInformation\";\nimport withRouter from \"next/dist/client/with-router\";\n\nvar Index = function Index(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({}),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var onChangeHandler = function onChangeHandler(e) {\n    contextData.dispatchEditingPostData(_objectSpread({}, contextData.editingPostData, _defineProperty({}, e.target.name, e.target.value)));\n    setState(_objectSpread({}, state, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  useEffect(function () {\n    contextData.dispatchEditingPostData(_objectSpread({}, contextData.editingPostData, {}, props.post));\n    setState(props.post);\n  }, []);\n  useEffect(function () {\n    console.log(props);\n    console.log(state);\n  }, [props]);\n  return __jsx(React.Fragment, null, __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: \"Post\"\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(TitleDescription, {\n    postData: state,\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    component: VideoInformation,\n    title: \"Video Information\",\n    onChangeHandler: onChangeHandler\n  })), __jsx(\"div\", {\n    className: \"side\"\n  }, __jsx(DropDownWidget, {\n    component: ActionOnPost,\n    title: \"action\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    component: Format,\n    title: \"Format\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    isNewPost: props.query[\"new\"] === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"categories\",\n    title: \"Post Category\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    isNewPost: props.query[\"new\"] === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"tags\",\n    title: \"Post Tags\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    isNewPost: props.query[\"new\"] === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"actors\",\n    title: \"Post Actors\",\n    onChangeHandler: onChangeHandler\n  })))));\n};\n\nIndex.getInitialProps = function _callee(_ref) {\n  var query, req, domainName, post, postData, requestBody;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query, req = _ref.req;\n\n          if (!req) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getAbsolutePath(req));\n\n        case 4:\n          _context.t0 = _context.sent;\n          _context.next = 8;\n          break;\n\n        case 7:\n          _context.t0 = '';\n\n        case 8:\n          domainName = _context.t0;\n\n          if (!query[\"new\"]) {\n            _context.next = 13;\n            break;\n          }\n\n          post = {};\n          _context.next = 19;\n          break;\n\n        case 13:\n          if (!(query.postTitle || query.id)) {\n            _context.next = 19;\n            break;\n          }\n\n          requestBody = {\n            postTitle: query.postTitle,\n            _id: query.id\n          };\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(getPost(requestBody, true, domainName));\n\n        case 17:\n          postData = _context.sent;\n          post = postData.data ? postData.data.post : {};\n\n        case 19:\n          return _context.abrupt(\"return\", {\n            post: post,\n            query: query\n          });\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(Index);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/post/index.js"],"names":["React","useEffect","useState","useContext","useRef","getPost","getAbsolutePath","AdminLayout","TitleDescription","ActionOnPost","DropDownWidget","AppContext","Format","PostCategoriesTagsActors","VideoInformation","withRouter","Index","props","contextData","state","setState","onChangeHandler","e","dispatchEditingPostData","editingPostData","target","name","value","post","console","log","query","getInitialProps","req","domainName","postTitle","id","requestBody","_id","postData","data"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { getPost } from '../../../_variables/ajaxPostsVariables';\r\nimport { getAbsolutePath } from '../../../_variables/_variables'\r\n\r\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\r\nimport TitleDescription from \"../../../components/adminIncludes/PostComponents/TitleDescription/TitleDescription\";\r\nimport ActionOnPost from \"../../../components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost\";\r\nimport DropDownWidget from \"../../../components/adminIncludes/PostComponents/DropDownWidget/DropDownWidget\";\r\nimport { AppContext } from \"../../../context/AppContext\";\r\nimport Format from \"../../../components/adminIncludes/PostComponents/Format/Format\";\r\nimport PostCategoriesTagsActors from \"../../../components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors\";\r\nimport VideoInformation from \"../../../components/adminIncludes/PostComponents/VideoInformation/VideoInformation\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\n\r\nconst Index = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ state, setState ] = useState({})\r\n\r\n    const onChangeHandler = e => {\r\n        contextData.dispatchEditingPostData({\r\n            ...contextData.editingPostData,\r\n            [e.target.name]: e.target.value\r\n        })\r\n\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    useEffect(() => {\r\n        contextData.dispatchEditingPostData({ ...contextData.editingPostData, ...props.post })\r\n        setState(props.post)\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        console.log( props)\r\n        console.log( state)\r\n    }, [props]);\r\n    return (\r\n        <>\r\n            <AdminLayout>\r\n                <div className='Post'>\r\n                    <div className=\"content\">\r\n                        <TitleDescription postData={state} onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget component={ VideoInformation } title='Video Information' onChangeHandler={ onChangeHandler }/>\r\n                    </div>\r\n\r\n                    <div className=\"side\">\r\n                        <DropDownWidget component={ ActionOnPost } title='action' onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget component={ Format } title='Format' onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget isNewPost={ props.query.new === 'true' } component={ PostCategoriesTagsActors } type='categories' title='Post Category' onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget isNewPost={ props.query.new === 'true' } component={ PostCategoriesTagsActors } type='tags' title='Post Tags' onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget isNewPost={ props.query.new === 'true' } component={ PostCategoriesTagsActors } type='actors' title='Post Actors' onChangeHandler={ onChangeHandler }/>\r\n                    </div>\r\n\r\n                </div>\r\n            </AdminLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nIndex.getInitialProps = async ({ query, req }) => {\r\n    const domainName = req ? await getAbsolutePath(req) : '';\r\n    let post;\r\n    let postData\r\n    let requestBody;\r\n\r\n    if (query.new) {\r\n        post = {}\r\n    } else if (query.postTitle || query.id) {\r\n        requestBody = {\r\n            postTitle: query.postTitle,\r\n            _id: query.id,\r\n        };\r\n        postData = await getPost(requestBody, true, domainName)\r\n        post = postData.data ? postData.data.post : {}\r\n    }\r\n\r\n    return { post, query }\r\n};\r\nexport default withRouter(Index);"]},"metadata":{},"sourceType":"module"}