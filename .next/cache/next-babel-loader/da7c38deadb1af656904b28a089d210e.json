{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport ActorElement from '../../../components/includes/ActorElement/ActorElement';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\n\nconst actors = props => {\n  const renderActors = props.actorsSource.metas.map(meta => {\n    return __jsx(ActorElement, {\n      key: meta._id,\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: \"actors\"\n  }, renderActors), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getActorsData.pageNo,\n    totalCount: props.actorsSource.totalCount,\n    size: props.getActorsData.size,\n    maxPage: Math.ceil(parseInt(props.actorsSource.totalCount) / parseInt(props.getActorsData.size)) - 1\n  })));\n};\n\nactors.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let actorsSource;\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  const getActorsData = {\n    type: 'actor',\n    searchForImageIn: 'actors',\n    pageNo: parseInt(query.page) || 1,\n    size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) || 30,\n    sort: query.sort || 'latest'\n  };\n  const categoriesData = await getMeta(getActorsData);\n  actorsSource = categoriesData.data ? categoriesData.data : [];\n  return {\n    identity,\n    navigation,\n    query,\n    actorsSource,\n    getActorsData\n  };\n};\n\nexport default actors;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/actors/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","AppContext","TagElement","getSetting","getMeta","CategoryElement","ActorElement","SiteSettingSetter","PaginationComponent","actors","props","renderActors","actorsSource","metas","map","meta","_id","imageUrl","noImageUrl","name","count","getActorsData","pageNo","totalCount","size","Math","ceil","parseInt","getInitialProps","pathname","query","req","res","err","navigation","identity","identityData","navigationData","data","setting","type","searchForImageIn","page","tagsCountPerPage","sort","categoriesData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport TagElement from '../../../components/includes/TagElement/TagElement'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement'\r\nimport ActorElement from '../../../components/includes/ActorElement/ActorElement'\r\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent'\r\n\r\nconst actors = props => {\r\n\r\n    const renderActors = props.actorsSource.metas.map(meta => {\r\n        return (\r\n            <ActorElement key={ meta._id } imageUrl={ meta.imageUrl } noImageUrl={ meta.noImageUrl } name={ meta.name } count={ meta.count }/>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <AppLayout>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <div className='actors'>\r\n                    { renderActors }\r\n                </div>\r\n                <PaginationComponent\r\n                    isActive={ true }\r\n                    currentPage={props.getActorsData.pageNo }\r\n                    totalCount={ props.actorsSource.totalCount }\r\n                    size={ props.getActorsData.size }\r\n                    maxPage={ Math.ceil(parseInt(props.actorsSource.totalCount) / parseInt(props.getActorsData.size))- 1 }\r\n                />\r\n            </AppLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nactors.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let actorsSource ;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n\r\n    const getActorsData = {\r\n        type: 'actor',\r\n        searchForImageIn:'actors',\r\n        pageNo: parseInt(query.page) || 1,\r\n        size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) ||30,\r\n        sort: query.sort || 'latest',\r\n    }\r\n\r\n    const categoriesData = await getMeta(getActorsData)\r\n    actorsSource = categoriesData.data ? categoriesData.data : []\r\n\r\n    return { identity, navigation, query, actorsSource,getActorsData }\r\n}\r\nexport default actors;\r\n"]},"metadata":{},"sourceType":"module"}