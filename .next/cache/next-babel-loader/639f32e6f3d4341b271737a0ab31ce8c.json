{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport './UploadedPopView.scss';\nimport { fileTypeDetector } from '../../../../_variables/_variables';\n\nconst UploadedPopView = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    darkStyle: {\n      backgroundColor: 'black'\n    },\n    lightStyle: {\n      backgroundColor: 'white'\n    }\n  });\n  useEffect(() => {}, []);\n\n  const onCloseHandler = () => {\n    // props.setStateHandler('path', itemPath)\n    //props.setStateHandler('clickedItem','')\n    props.setState(_objectSpread({}, props.state, {\n      clickedItem: '',\n      path: props.state.prevPath\n    }));\n  };\n\n  const WhatToRender = data => {\n    switch (data.fileType) {\n      case 'image':\n        return __jsx(React.Fragment, null, __jsx(\"img\", {\n          className: \"uploaded-pop-view-image\",\n          src: window.location.origin + '/' + props.state.clickedItem.replace('./', '')\n        }), __jsx(\"input\", {\n          className: \"uploaded-pop-view-url\",\n          value: '/' + props.state.clickedItem.replace('./', '')\n        }), __jsx(\"input\", {\n          className: \"uploaded-pop-view-url\",\n          value: window.location.origin + '/' + props.state.clickedItem.replace('./', '')\n        }));\n        break;\n\n      case 'video':\n        return __jsx(React.Fragment, null, __jsx(\"video\", {\n          className: \"uploaded-pop-view-image\",\n          controls: true\n        }, __jsx(\"source\", {\n          src: window.location.origin + '/' + props.state.clickedItem.replace('./', '')\n        })), __jsx(\"input\", {\n          className: \"uploaded-pop-view-url\",\n          value: '/' + props.state.clickedItem.replace('./', '')\n        }), __jsx(\"input\", {\n          className: \"uploaded-pop-view-url\",\n          value: window.location.origin + '/' + props.state.clickedItem.replace('./', '')\n        }));\n        break;\n\n      default:\n        return null;\n    }\n  };\n\n  if (props.clickedItem) {\n    const fileType = fileTypeDetector(props.state.clickedItemName);\n    return __jsx(\"div\", {\n      className: \"uploaded-pop-view\"\n    }, __jsx(\"button\", {\n      className: \"closeBtn\",\n      onClick: () => onCloseHandler()\n    }, \"X\"), __jsx(\"div\", {\n      className: \"gallery-pop-view-content\",\n      style: state.lightStyle\n    }, __jsx(WhatToRender, {\n      fileType: fileType\n    })));\n  } else return null;\n};\n\nexport default UploadedPopView;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/FileManagerComponents/UploadedPopView/UploadedPopView.js"],"names":["React","useEffect","useState","useContext","useRef","fileTypeDetector","UploadedPopView","props","state","setState","darkStyle","backgroundColor","lightStyle","onCloseHandler","clickedItem","path","prevPath","WhatToRender","data","fileType","window","location","origin","replace","clickedItemName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport './UploadedPopView.scss'\r\nimport { fileTypeDetector } from '../../../../_variables/_variables'\r\n\r\nconst UploadedPopView = props => {\r\n    const [ state, setState ] = useState({\r\n        darkStyle:{\r\n            backgroundColor:'black'\r\n        },\r\n        lightStyle:{\r\n            backgroundColor:'white'\r\n        },\r\n\r\n    });\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n    const onCloseHandler = () => {\r\n        // props.setStateHandler('path', itemPath)\r\n        //props.setStateHandler('clickedItem','')\r\n        props.setState({\r\n            ...props.state,\r\n            clickedItem:'',\r\n            path:props.state.prevPath\r\n        })\r\n    }\r\n\r\n\r\n    const WhatToRender = data =>{\r\n        switch (data.fileType ) {\r\n            case 'image':\r\n               return (\r\n                      <>\r\n                         <img className='uploaded-pop-view-image' src={ window.location.origin + '/' + props.state.clickedItem.replace('./','')}/>\r\n                         <input className='uploaded-pop-view-url' value={'/' + props.state.clickedItem.replace('./','')}/>\r\n                         <input className='uploaded-pop-view-url' value={ window.location.origin + '/' + props.state.clickedItem.replace('./','')}/>\r\n\r\n                       </>\r\n               )\r\n                break\r\n            case 'video':\r\n               return (\r\n                      <>\r\n                          <video className='uploaded-pop-view-image' controls>\r\n                              <source src={ window.location.origin + '/' + props.state.clickedItem.replace('./','')}/>\r\n                          </video>\r\n                         <input className='uploaded-pop-view-url' value={'/' + props.state.clickedItem.replace('./','')}/>\r\n                         <input className='uploaded-pop-view-url' value={ window.location.origin + '/' + props.state.clickedItem.replace('./','')}/>\r\n                       </>\r\n               )\r\n                break\r\n            default:\r\n                return null\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if (props.clickedItem) {\r\n        const fileType = fileTypeDetector(props.state.clickedItemName)\r\n\r\n        return (\r\n            <div className='uploaded-pop-view'>\r\n                <button className='closeBtn' onClick={()=>onCloseHandler()}>X</button>\r\n                <div className='gallery-pop-view-content'  style={state.lightStyle}>\r\n                    <WhatToRender fileType={fileType}/>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n    } else return null\r\n\r\n};\r\nexport default UploadedPopView;\r\n"]},"metadata":{},"sourceType":"module"}