{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../components/layouts/AppLayout';\nimport { getMultipleSetting } from '../_variables/ajaxVariables';\nimport SiteSettingSetter from '../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport { getAbsolutePath } from '../_variables/_variables';\n\nvar Error = function Error(props) {\n  var _useState = useState({}),\n      settings = _useState[0],\n      setSettings = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n  }, [props]);\n  useEffect(function () {\n    getMultipleSetting({\n      settings: ['identity', 'navigation', 'design']\n    }).then(function (res) {\n      settings(_objectSpread({}, settings, {}, res.data.settings));\n    });\n  }, [props]);\n\n  var RenderSettings = function RenderSettings() {\n    if (settings.identity) {\n      return __jsx(SiteSettingSetter, settings);\n    } else return null;\n  };\n\n  return __jsx(AppLayout, null, __jsx(RenderSettings, null), __jsx(\"p\", null, props.statusCode ? \"An error \".concat(props.statusCode, \" occurred on server\") : 'An error occurred on client'));\n};\n\nError.getInitialProps = function _callee(_ref) {\n  var req, res, err, statusCode, data, domainName, settings, settingsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          req = _ref.req, res = _ref.res, err = _ref.err;\n          statusCode = res ? res.statusCode : err ? err.statusCode : 404;\n          data = res.settingData;\n\n          if (!req) {\n            _context.next = 9;\n            break;\n          }\n\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(getAbsolutePath(req));\n\n        case 6:\n          _context.t0 = _context.sent;\n          _context.next = 10;\n          break;\n\n        case 9:\n          _context.t0 = '';\n\n        case 10:\n          domainName = _context.t0;\n          _context.next = 13;\n          return _regeneratorRuntime.awrap(getMultipleSetting({\n            settings: ['identity', 'navigation', 'design']\n          }, true, domainName));\n\n        case 13:\n          settingsData = _context.sent;\n          settings = settingsData.data.settings ? settingsData.data.settings : [];\n          return _context.abrupt(\"return\", {\n            statusCode: statusCode,\n            settings: settings\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Error;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/_error.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getMultipleSetting","SiteSettingSetter","getAbsolutePath","Error","props","settings","setSettings","console","log","then","res","data","RenderSettings","identity","statusCode","getInitialProps","req","err","settingData","domainName","settingsData"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,OAAOC,iBAAP,MAA8B,8DAA9B;AACA,SAASC,eAAT,QAAgC,0BAAhC;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;AAAA,kBACeR,QAAQ,CAAC,EAAD,CADvB;AAAA,MACXS,QADW;AAAA,MACDC,WADC;;AAGnBX,EAAAA,SAAS,CAAC,YAAM;AACZY,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACH,GAFQ,EAEN,CAAEA,KAAF,CAFM,CAAT;AAGAT,EAAAA,SAAS,CAAC,YAAM;AACZK,IAAAA,kBAAkB,CAAC;AAAEK,MAAAA,QAAQ,EAAE,CAAE,UAAF,EAAc,YAAd,EAA4B,QAA5B;AAAZ,KAAD,CAAlB,CAAyEI,IAAzE,CAA8E,UAAAC,GAAG,EAAI;AACjFL,MAAAA,QAAQ,mBACDA,QADC,MAEDK,GAAG,CAACC,IAAJ,CAASN,QAFR,EAAR;AAIH,KALD;AAMH,GAPQ,EAON,CAAED,KAAF,CAPM,CAAT;;AASA,MAAMQ,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzB,QAAIP,QAAQ,CAACQ,QAAb,EAAuB;AACnB,aACI,MAAC,iBAAD,EAAwBR,QAAxB,CADJ;AAGH,KAJD,MAIO,OAAO,IAAP;AACV,GAND;;AAQA,SACI,MAAC,SAAD,QACI,MAAC,cAAD,OADJ,EAEI,iBACMD,KAAK,CAACU,UAAN,sBACiBV,KAAK,CAACU,UADvB,2BAEI,6BAHV,CAFJ,CADJ;AAUH,CAjCD;;AAmCAX,KAAK,CAACY,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,GAAT,QAASA,GAAT,EAAcN,GAAd,QAAcA,GAAd,EAAmBO,GAAnB,QAAmBA,GAAnB;AACdH,UAAAA,UADc,GACDJ,GAAG,GAAGA,GAAG,CAACI,UAAP,GAAoBG,GAAG,GAAGA,GAAG,CAACH,UAAP,GAAoB,GAD7C;AAEdH,UAAAA,IAFc,GAEPD,GAAG,CAACQ,WAFG;;AAAA,eAGDF,GAHC;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAGWd,eAAe,CAACc,GAAD,CAH1B;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,wBAGkC,EAHlC;;AAAA;AAGdG,UAAAA,UAHc;AAAA;AAAA,2CAKOnB,kBAAkB,CAAC;AAAEK,YAAAA,QAAQ,EAAE,CAAE,UAAF,EAAc,YAAd,EAA4B,QAA5B;AAAZ,WAAD,EAAuD,IAAvD,EAA6Dc,UAA7D,CALzB;;AAAA;AAKdC,UAAAA,YALc;AAMpBf,UAAAA,QAAQ,GAAGe,YAAY,CAACT,IAAb,CAAkBN,QAAlB,GAA6Be,YAAY,CAACT,IAAb,CAAkBN,QAA/C,GAA0D,EAArE;AANoB,2CAQb;AAAES,YAAAA,UAAU,EAAVA,UAAF;AAAcT,YAAAA,QAAQ,EAARA;AAAd,WARa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAWA,eAAeF,KAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../components/layouts/AppLayout'\r\nimport { getMultipleSetting } from '../_variables/ajaxVariables'\r\nimport SiteSettingSetter from '../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport { getAbsolutePath } from '../_variables/_variables'\r\n\r\nconst Error = props => {\r\n    const [ settings, setSettings ] = useState({})\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n    }, [ props ]);\r\n    useEffect(() => {\r\n        getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }).then(res => {\r\n            settings({\r\n                ...settings,\r\n                ...res.data.settings\r\n            })\r\n        })\r\n    }, [ props ]);\r\n\r\n    const RenderSettings = () => {\r\n        if (settings.identity) {\r\n            return (\r\n                <SiteSettingSetter { ...settings }/>\r\n            )\r\n        } else return null\r\n    }\r\n\r\n    return (\r\n        <AppLayout>\r\n            <RenderSettings/>\r\n            <p>\r\n                { props.statusCode\r\n                    ? `An error ${ props.statusCode } occurred on server`\r\n                    : 'An error occurred on client' }\r\n            </p>\r\n        </AppLayout>\r\n    )\r\n}\r\n\r\nError.getInitialProps = async ({ req, res, err }) => {\r\n    const statusCode = res ? res.statusCode : err ? err.statusCode : 404\r\n    const data = res.settingData\r\n    const domainName = req ? await getAbsolutePath(req) : ''\r\n    let settings;\r\n    const settingsData = await getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }, true, domainName)\r\n    settings = settingsData.data.settings ? settingsData.data.settings : []\r\n\r\n    return { statusCode, settings }\r\n}\r\n\r\nexport default Error\r\n"]},"metadata":{},"sourceType":"module"}