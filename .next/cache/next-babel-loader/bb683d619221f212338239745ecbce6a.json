{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\n\nconst tags = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    metaData: []\n  });\n  useEffect(() => {\n    console.log(props);\n  }, [props]); // useEffect(() => {\n  //     if (props.navigation) {\n  //         contextData.dispatchNavigationData(props.navigation.data)\n  //     }\n  //     if (props.identity) {\n  //         contextData.dispatchSiteIdentity(siteIdentity => ({\n  //             ...siteIdentity,\n  //             ...props.identity\n  //         }))\n  //     }\n  //     if (props.tags.length){\n  //         setState({\n  //             ...state,\n  //             metaData: props.categories\n  //         })\n  //     }else if (props.tags.length<1){\n  //         getMeta({\n  //             type: 'tag',\n  //             pageNo: 1,\n  //             size: 100\n  //         }).then(res=>{\n  //             console.log(res )\n  //             setState({\n  //                 ...state,\n  //                 metaData: res.data.meta\n  //             })\n  //         }).catch(err=>{\n  //             console.log( err)\n  //         })\n  //     }\n  // }, [ props ]);\n\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"tags\"\n  }));\n};\n\ntags.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let tags = [];\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n\n  if (query.meta) {\n    const tagsData = await getMeta({\n      type: query.meta,\n      pageNo: 1,\n      size: 100\n    });\n    tags = tagsData.data.meta ? tagsData.data.meta : [];\n  }\n\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  return {\n    identity,\n    navigation,\n    query,\n    tags\n  };\n};\n\nexport default tags;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/tags/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","tags","props","state","setState","metaData","console","log","getInitialProps","pathname","query","req","res","err","navigation","identity","identityData","navigationData","meta","tagsData","type","pageNo","size","data","setting"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,OAAT,QAAwB,wCAAxB;;AAEA,MAAMC,IAAI,GAAGC,KAAK,IAAI;AAClB,QAAM;AAAA,OAAEC,KAAF;AAAA,OAASC;AAAT,MAAsBT,QAAQ,CAAC;AACjCU,IAAAA,QAAQ,EAAE;AADuB,GAAD,CAApC;AAGAX,EAAAA,SAAS,CAAC,MAAM;AACZY,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CAJkB,CAOlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SACI,MAAC,SAAD,QACI;AAAK,IAAA,SAAS,EAAC;AAAf,IADJ,CADJ;AAOH,CA7CD;;AAgDAD,IAAI,CAACO,eAAL,GAAuB,OAAO;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,GAAnB;AAAwBC,EAAAA,GAAxB;AAA6BC,EAAAA;AAA7B,CAAP,KAA8C;AACjE,MAAIC,UAAJ;AACA,MAAIC,QAAJ;AACA,MAAId,IAAI,GAAG,EAAX;AACA,QAAMe,YAAY,GAAG,MAAMjB,UAAU,CAAC,UAAD,CAArC;AACA,QAAMkB,cAAc,GAAG,MAAMlB,UAAU,CAAC,YAAD,CAAvC;;AAEA,MAAIW,KAAK,CAACQ,IAAV,EAAgB;AACZ,UAAMC,QAAQ,GAAG,MAAMnB,OAAO,CAAC;AAC3BoB,MAAAA,IAAI,EAAEV,KAAK,CAACQ,IADe;AAE3BG,MAAAA,MAAM,EAAE,CAFmB;AAG3BC,MAAAA,IAAI,EAAE;AAHqB,KAAD,CAA9B;AAKArB,IAAAA,IAAI,GAAGkB,QAAQ,CAACI,IAAT,CAAcL,IAAd,GAAqBC,QAAQ,CAACI,IAAT,CAAcL,IAAnC,GAA0C,EAAjD;AACH;;AAEDH,EAAAA,QAAQ,GAAGC,YAAY,CAACO,IAAb,CAAkBC,OAAlB,GAA4BR,YAAY,CAACO,IAAb,CAAkBC,OAAlB,CAA0BD,IAAtD,GAA6D,EAAxE;AACAT,EAAAA,UAAU,GAAGG,cAAc,CAACM,IAAf,CAAoBC,OAApB,GAA8BP,cAAc,CAACM,IAAf,CAAoBC,OAAlD,GAA4D,EAAzE;AACA,SAAO;AAAET,IAAAA,QAAF;AAAYD,IAAAA,UAAZ;AAAwBJ,IAAAA,KAAxB;AAA+BT,IAAAA;AAA/B,GAAP;AACH,CAnBD;;AAoBA,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\n\r\nconst tags = props => {\r\n    const [ state, setState ] = useState({\r\n        metaData: []\r\n    });\r\n    useEffect(() => {\r\n        console.log(props )\r\n    }, [props]);\r\n    // useEffect(() => {\r\n    //     if (props.navigation) {\r\n    //         contextData.dispatchNavigationData(props.navigation.data)\r\n    //     }\r\n    //     if (props.identity) {\r\n    //         contextData.dispatchSiteIdentity(siteIdentity => ({\r\n    //             ...siteIdentity,\r\n    //             ...props.identity\r\n    //         }))\r\n    //     }\r\n    //     if (props.tags.length){\r\n    //         setState({\r\n    //             ...state,\r\n    //             metaData: props.categories\r\n    //         })\r\n    //     }else if (props.tags.length<1){\r\n    //         getMeta({\r\n    //             type: 'tag',\r\n    //             pageNo: 1,\r\n    //             size: 100\r\n    //         }).then(res=>{\r\n    //             console.log(res )\r\n    //             setState({\r\n    //                 ...state,\r\n    //                 metaData: res.data.meta\r\n    //             })\r\n    //         }).catch(err=>{\r\n    //             console.log( err)\r\n    //         })\r\n    //     }\r\n    // }, [ props ]);\r\n    return (\r\n        <AppLayout>\r\n            <div className='tags'>\r\n\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\n\r\ntags.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let tags = []\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n\r\n    if (query.meta) {\r\n        const tagsData = await getMeta({\r\n            type: query.meta,\r\n            pageNo: 1,\r\n            size: 100\r\n        })\r\n        tags = tagsData.data.meta ? tagsData.data.meta : []\r\n    }\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    return { identity, navigation, query, tags }\r\n}\r\nexport default tags;\r\n"]},"metadata":{},"sourceType":"module"}