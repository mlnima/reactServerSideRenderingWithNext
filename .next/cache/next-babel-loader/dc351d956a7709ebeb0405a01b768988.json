{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../components/layouts/AdminLayout';\nimport FileManagerControl from '../../../components/adminIncludes/FileManagerComponents/FileManagerControl/FileManagerControl';\nimport FileManagerArea from '../../../components/adminIncludes/FileManagerComponents/FileManagerArea/FileManagerArea';\nimport { readPath } from '../../../_variables/_ajaxFilesVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport withRouter from 'next/dist/client/with-router';\nimport UploadedPopView from '../../../components/adminIncludes/FileManagerComponents/UploadedPopView/UploadedPopView'; ///static/uploads/image/2020/4/706185_561483320532764_1215505165_o.jpg\n\nvar fileManager = function fileManager(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    path: '.',\n    prevPath: '.',\n    files: [],\n    clickedItem: '',\n    clickedItemName: '',\n    file: '',\n    editFile: false,\n    action: '',\n    _do: '',\n    // AlertBox:false,\n    DeleteAlertBox: false,\n    confirm: Date.now(),\n    message: '',\n    report: '',\n    inputBox: false,\n    newItemName: ''\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    // setState({\n    //     ...state,\n    //     prevPath: state.path\n    // })\n    setData();\n  }, [state.path]);\n\n  var setData = function setData() {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    readPath(state.path).then(function (res) {\n      // console.log(res.data.type )\n      if (res.data.type === 'dir') {\n        setState(_objectSpread({}, state, {\n          files: res.data.data // prevPath: path\n\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      } else if (res.data.type === 'file') {\n        setState(_objectSpread({}, state, {\n          clickedItem: state.path,\n          path: state.prevPath\n        })); // contextData.dispatchSettings({\n        //     ...contextData.settings,\n        //     textEditorCurrentFile: res.data.data\n        // })\n\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        })); // props.router.push('/admin/fileManager/textEditor')\n      } else {\n        setState(_objectSpread({}, state, {\n          error: true\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }\n    })[\"catch\"](function (err) {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  var setStateHandler = function setStateHandler(key, value) {\n    setState(_objectSpread({}, state, _defineProperty({}, key, value)));\n  };\n\n  return __jsx(AdminLayout, null, __jsx(UploadedPopView, {\n    clickedItem: state.clickedItem,\n    setStateHandler: setStateHandler,\n    state: state,\n    setState: setState\n  }), __jsx(\"div\", {\n    className: \"fileManager\"\n  }, __jsx(FileManagerControl, {\n    setStateHandler: setStateHandler,\n    data: state,\n    state: state,\n    setState: setState\n  }), __jsx(FileManagerArea, {\n    setStateHandler: setStateHandler,\n    data: state,\n    state: state,\n    setState: setState\n  })));\n};\n\nexport default withRouter(fileManager);","map":null,"metadata":{},"sourceType":"module"}