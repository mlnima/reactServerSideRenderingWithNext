{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef, createRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from \"next/dist/client/with-router\";\nimport Link from \"next/link\";\n\nvar BodyTable = function BodyTable(props) {\n  var contextData = useContext(AppContext);\n  var selectBoxes = useRef(contextData.adminPosts.map(function () {\n    return createRef();\n  }));\n\n  var _useState = useState({\n    hoveredId: '',\n    isMobile: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    if (window.innerWidth < 768) {\n      setState(_objectSpread({}, state, {\n        isMobile: true\n      }));\n    }\n  }, []);\n\n  var onDeletePermanentlyHandler = function onDeletePermanentlyHandler() {// deletePost(state.hoveredId).then(res => {\n    //     const posts = contextData.postsData.posts.filter(post => {\n    //         return post._id !== state.hoveredId\n    //     });\n    //     const report = contextData.state.reports.push(res.data.message)\n    //     contextData.setPostsData({\n    //         ...contextData.postsData,\n    //         posts\n    //     });\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         report\n    //     })\n    // })\n  };\n\n  var HoverOnTitle = function HoverOnTitle(props) {\n    if (props.post._id === state.hoveredId) {\n      var editPostPath = \"/admin/post?id=\".concat(props.post._id);\n\n      if (props.post.status === 'trash') {\n        return __jsx(\"th\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          href: editPostPath\n        }, __jsx(\"a\", null, __jsx(\"button\", null, \"Edit\"))), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'delete');\n          }\n        }, \"Delete\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'draft');\n          }\n        }, \"Draft\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'pending');\n          }\n        }, \"Pending\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'published');\n          }\n        }, \"Publish\"), __jsx(\"button\", null, \"View\"));\n      } else if (props.post.status === 'published') {\n        return __jsx(\"th\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          href: editPostPath\n        }, __jsx(\"a\", null, __jsx(\"button\", null, \"Edit\"))), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'trash');\n          }\n        }, \"Trash\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'draft');\n          }\n        }, \"Draft\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'pending');\n          }\n        }, \"Pending\"), __jsx(\"button\", null, \"View\"));\n      } else {\n        return __jsx(\"th\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          href: editPostPath\n        }, __jsx(\"a\", null, __jsx(\"button\", null, \"Edit\"))), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'draft');\n          }\n        }, \"Draft\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'pending');\n          }\n        }, \"Pending\"), __jsx(\"button\", null, \"View\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'trash');\n          }\n        }, \"Trash\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'published');\n          }\n        }, \"Publish\"));\n      }\n    } else return null;\n  };\n\n  var onCheckHandler = function onCheckHandler(e) {//\n    // if (e.target.checked) {\n    //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts;\n    //         pushedItemArr.push(e.target.name);\n    //         pushedItemArr = [...new Set(pushedItemArr)]\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    //\n    // } else {\n    //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\n    //             return id !== e.target.name\n    //         });\n    //         pushedItemArr = [...new Set(pushedItemArr)];\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    // }\n  };\n\n  var renderPosts = props.postsSource.posts.map(function (post) {\n    var renderTags = post.tags.map(function (item) {\n      return __jsx(Link, {\n        href: \"/\",\n        key: item\n      }, \" \", __jsx(\"a\", {\n        className: \"tagPreviewItem\"\n      }, item), \",\");\n    });\n    var author = post.author;\n\n    if (post.author === contextData.userData._id) {\n      author = contextData.userData.username;\n    }\n\n    var isChecked = contextData.adminPostsData.checkedPosts.includes(post._id);\n    return __jsx(\"tr\", {\n      key: post._id,\n      className: \"BodyTableItems\",\n      onTouchStart: function onTouchStart() {\n        setState(_objectSpread({}, state, {\n          hoveredId: post._id\n        }));\n      },\n      onMouseEnter: function onMouseEnter() {\n        setState(_objectSpread({}, state, {\n          hoveredId: post._id\n        }));\n      }\n    }, __jsx(\"td\", {\n      className: \"postColumn\"\n    }, __jsx(\"div\", null, __jsx(\"input\", {\n      name: post._id,\n      className: \" BodyTableItemCheckBox\",\n      type: \"checkbox\",\n      ref: function ref(e) {\n        return selectBoxes.current[contextData.adminPosts.indexOf(post)] = e;\n      },\n      checked: isChecked,\n      onChange: function onChange(e) {\n        return onCheckHandler(e);\n      }\n    })), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem\"\n    }, post.title)), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem author noMobile\"\n    }, author)), __jsx(\"div\", {\n      className: \"tagCategoriesActorsPreview BodyTableItem noMobile\"\n    }, __jsx(\"span\", null, \"   \", post.categories + ' , ')), __jsx(\"div\", {\n      className: \"tagCategoriesActorsPreview BodyTableItem noMobile\"\n    }, __jsx(\"span\", null, \"   \", post.tags + ' , ')), __jsx(\"div\", {\n      className: \"tagCategoriesActorsPreview BodyTableItem noMobile\"\n    }, __jsx(\"span\", null, \"      \", post.actors + ' , ')), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem noMobile\"\n    }, post.status)), __jsx(\"div\", null, __jsx(\"img\", {\n      className: \"BodyTableItem noMobile\",\n      src: post.mainThumbnail\n    }))), __jsx(HoverOnTitle, {\n      post: post\n    }));\n  });\n  return __jsx(\"tbody\", {\n    className: \"BodyTable\"\n  }, renderPosts);\n};\n\nexport default withRouter(BodyTable);","map":null,"metadata":{},"sourceType":"module"}