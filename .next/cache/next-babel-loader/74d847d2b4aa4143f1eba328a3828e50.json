{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useRef, useContext, useEffect } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport withRouter from 'next/dist/client/with-router';\nimport axios from 'axios';\nimport { AppContext } from \"../../context/AppContext\";\nimport { getAbsolutePath } from '../../_variables/_variables';\nimport { getMultipleSetting } from '../../_variables/ajaxVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\n\nconst Login = props => {\n  const contextData = useContext(AppContext);\n  const messageLabel = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    response: undefined,\n    type: undefined\n  });\n\n  const onChangeHandler = e => {\n    setState(_objectSpread({}, state, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  useEffect(() => {\n    console.log(props);\n  }, []);\n\n  const onSubmitHandler = e => {\n    e.preventDefault();\n    axios.post('/api/v1/users/login', state).then(res => {\n      let type = res.data.type;\n\n      if (type === 'success') {\n        if (res.data.token) {\n          localStorage.setItem('wt', res.data.token);\n        }\n      } else {}\n\n      setData(_objectSpread({}, data, {\n        response: res.data.response,\n        type: res.data.type\n      }));\n    }).then(() => {\n      contextData.functions.getAndSetUserInfo().then(() => {\n        props.router.back();\n      }); // contextData.functions.goToHomePage()\n    }).catch(err => console.log(err));\n  };\n\n  return __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: \"Login authPage\"\n  }, __jsx(\"form\", {\n    className: \"authForm\",\n    onSubmit: e => onSubmitHandler(e)\n  }, __jsx(\"label\", {\n    className: \"messageLabel\"\n  }, data.response), __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"username\"), __jsx(\"input\", {\n    name: \"username\",\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"div\", {\n    className: \"authFormItem\"\n  }, __jsx(\"p\", null, \"password\"), __jsx(\"input\", {\n    name: \"password\",\n    type: \"password\",\n    onChange: e => onChangeHandler(e)\n  })), __jsx(\"button\", {\n    className: \"submitBtn\",\n    type: \"submit\"\n  }, \"Login\"))));\n};\n\nLogin.getInitialProps = async ({\n  req\n}) => {\n  const domainName = req ? await getAbsolutePath(req) : '';\n  let settings;\n  const settingsData = await getMultipleSetting({\n    settings: ['identity', 'navigation', 'design']\n  }, true, domainName);\n  settings = settingsData.data.settings ? settingsData.data.settings : [];\n  return _objectSpread({}, settings);\n};\n\nexport default withRouter(Login);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/auth/login.js"],"names":["React","useState","useRef","useContext","useEffect","AppLayout","withRouter","axios","AppContext","getAbsolutePath","getMultipleSetting","SiteSettingSetter","Login","props","contextData","messageLabel","state","setState","data","setData","response","undefined","type","onChangeHandler","e","target","name","value","console","log","onSubmitHandler","preventDefault","post","then","res","token","localStorage","setItem","functions","getAndSetUserInfo","router","back","catch","err","getInitialProps","req","domainName","settings","settingsData"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useContext, useEffect } from 'react';\r\nimport AppLayout from \"../../components/layouts/AppLayout\";\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport axios from 'axios'\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { getAbsolutePath } from '../../_variables/_variables'\r\nimport { getMultipleSetting } from '../../_variables/ajaxVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\n\r\nconst Login = props => {\r\n    const contextData = useContext(AppContext);\r\n    const messageLabel = useRef(null);\r\n    const [ state, setState ] = useState({});\r\n    const [ data, setData ] = useState({\r\n        response: undefined,\r\n        type: undefined,\r\n    });\r\n\r\n    const onChangeHandler = e => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(props )\r\n    }, []);\r\n\r\n    const onSubmitHandler = e => {\r\n        e.preventDefault();\r\n        axios.post('/api/v1/users/login', state).then(res => {\r\n            let type = res.data.type;\r\n            if (type === 'success') {\r\n                if (res.data.token) {\r\n                    localStorage.setItem('wt', res.data.token)\r\n                }\r\n            } else {\r\n\r\n            }\r\n            setData({\r\n                ...data,\r\n                response: res.data.response,\r\n                type: res.data.type,\r\n            })\r\n\r\n        }).then(() => {\r\n            contextData.functions.getAndSetUserInfo().then(()=>{\r\n                props.router.back()\r\n            })\r\n            // contextData.functions.goToHomePage()\r\n        }).catch(err => console.log(err))\r\n    };\r\n\r\n    return (\r\n        <AppLayout>\r\n            <SiteSettingSetter { ...props }/>\r\n            <div className='Login authPage'>\r\n                <form className='authForm' onSubmit={ e => onSubmitHandler(e) }>\r\n                    <label className='messageLabel'>{ data.response }</label>\r\n                    <div className=\"authFormItem\">\r\n                        <p>username</p>\r\n                        <input name='username' onChange={ e => onChangeHandler(e) }/>\r\n                    </div>\r\n                    <div className=\"authFormItem\">\r\n                        <p>password</p>\r\n                        <input name='password' type='password' onChange={ e => onChangeHandler(e) }/>\r\n                    </div>\r\n                    <button className='submitBtn' type='submit'>Login</button>\r\n                </form>\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\nLogin.getInitialProps = async ({ req }) => {\r\n    const domainName = req ? await getAbsolutePath(req) : ''\r\n    let settings;\r\n    const settingsData = await getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }, true, domainName)\r\n\r\n\r\n    settings = settingsData.data.settings ? settingsData.data.settings : []\r\n    return { ...settings }\r\n}\r\nexport default withRouter(Login);"]},"metadata":{},"sourceType":"module"}