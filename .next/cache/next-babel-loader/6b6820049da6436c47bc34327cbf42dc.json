{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getMultipleSetting, getSetting, getWidgetsWithData, getMultipleWidgetWithData } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\nimport { Sidebar } from '../../../components/includes/Sidebar/Sidebar';\nimport Footer from '../../../components/includes/Footer/Footer';\nimport { getAbsolutePath } from '../../../_variables/_variables';\nimport dataDecoder from '../../../server/tools/dataDecoder';\n\nvar tags = function tags(props) {\n  var _useState = useState({\n    style: {}\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n\n    if (props.identity.tagsPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n  var renderTags = props.tagsSource.metas.map(function (meta) {\n    return __jsx(TagElement, {\n      key: props.tagsSource.metas.indexOf(meta),\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    style: state.style,\n    className: props.identity.data.tagsPageSidebar ? 'content withSidebar' : 'content withOutSidebar'\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"tags\"\n  }, renderTags), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getTagsData.pageNo,\n    totalCount: props.tagsSource.totalCount,\n    size: props.getTagsData.size,\n    maxPage: Math.ceil(parseInt(props.tagsSource.totalCount) / parseInt(props.getTagsData.size)) - 1,\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })), __jsx(Sidebar, {\n    key: \"tagsPageSidebar\",\n    isActive: props.identity.data.tagsPageSidebar,\n    widgets: props.widgets,\n    position: \"tagsPageSidebar\"\n  })), __jsx(Footer, {\n    widgets: props.widgets,\n    position: \"footer\"\n  })));\n};\n\ntags.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, domainName, getTagsData, tagsSource, widgets, settings, widgetsData, settingsData, tagsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req;\n\n          if (!req) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getAbsolutePath(req));\n\n        case 4:\n          _context.t0 = _context.sent;\n          _context.next = 8;\n          break;\n\n        case 7:\n          _context.t0 = '';\n\n        case 8:\n          domainName = _context.t0;\n          getTagsData = {\n            type: 'tag',\n            searchForImageIn: 'tags',\n            pageNo: parseInt(query.page) || 1,\n            size: parseInt(query.size) || 30,\n            sort: query.sort || 'latest'\n          };\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(getMultipleWidgetWithData({\n            widgets: ['tagsPageSidebar', 'home', 'footer', 'header']\n          }, true, domainName, 'tagsPage'));\n\n        case 12:\n          widgetsData = _context.sent;\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(getMultipleSetting({\n            settings: ['identity', 'navigation', 'design']\n          }, true, domainName, 'tagsPage'));\n\n        case 15:\n          settingsData = _context.sent;\n          _context.next = 18;\n          return _regeneratorRuntime.awrap(getMeta(getTagsData, true, domainName));\n\n        case 18:\n          tagsData = _context.sent;\n          settings = settingsData.data.settings ? dataDecoder(settingsData.data.settings).finalObject : [];\n          tagsSource = tagsData.data ? tagsData.data : {\n            tags: [],\n            totalCount: 0\n          };\n          widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n          return _context.abrupt(\"return\", _objectSpread({}, settings, {\n            tagsSource: tagsSource,\n            getTagsData: getTagsData,\n            query: query,\n            pathname: pathname,\n            widgets: widgets\n          }));\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(tags);","map":null,"metadata":{},"sourceType":"module"}