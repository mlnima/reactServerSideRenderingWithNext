{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nexport var likeValueCalculator = function likeValueCalculator(likes, dislikes) {\n  return likes > 0 && dislikes > 0 ? Math.round(likes * 100 / (likes + dislikes)) : likes === 0 && dislikes === 0 ? 0 : likes === 0 && dislikes > 0 ? 0 : likes > 0 && dislikes === 0 ? 100 : 0;\n};\nexport var getAbsolutePath = function getAbsolutePath(req) {\n  return _regeneratorRuntime.async(function getAbsolutePath$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(req.protocol);\n\n        case 2:\n          _context.t0 = _context.sent;\n          _context.t1 = _context.t0 + '://';\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(req.get('Host'));\n\n        case 6:\n          _context.t2 = _context.sent;\n          return _context.abrupt(\"return\", _context.t1 + _context.t2);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\nexport var generateAbsolutePath = function generateAbsolutePath() {\n  return window.location.protocol + '//' + window.location.host;\n};\nexport var clickPathGenerator = function clickPathGenerator(clickedItemName, pathFromContexts) {\n  if (pathFromContexts === '.') {\n    return './' + clickedItemName;\n  } else {\n    return pathFromContexts + '/' + clickedItemName;\n  }\n};\nexport var trimString = function trimString(string) {\n  return trimString();\n};\nexport var convertVariableNameToName = function convertVariableNameToName(name) {\n  return name.replace(/([A-Z])/g, \" $1\").charAt(0).toUpperCase() + name.replace(/([A-Z])/g, \" $1\").slice(1);\n};\nexport var fileTypeDetector = function fileTypeDetector(fileName) {\n  var splitFileName = fileName.split('.');\n  var fileFormat = splitFileName[splitFileName.length - 1].toLowerCase();\n  var finalFormat = '';\n  var fileFormats = {\n    image: ['jpg', 'png', 'jpeg', 'svg'],\n    video: ['mp4', '3gp'],\n    document: ['js', 'css', 'env', 'scss'],\n    application: ['exe'],\n    archive: ['zip', 'rar']\n  }; // const images = [ '.jpg', '.png', 'jpeg', 'svg' ]\n  // const video = [ '.mp4', '.3gp' ]\n  // const documents = [ '.js', '.css', '.env', '.scss' ]\n\n  Object.keys(fileFormats).forEach(function (formatArr) {\n    if (fileFormats[formatArr].includes(fileFormat)) {\n      finalFormat = formatArr;\n    }\n  }); // console.log(finalFormat )\n\n  return finalFormat;\n};","map":null,"metadata":{},"sourceType":"module"}