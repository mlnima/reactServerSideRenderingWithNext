{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { clickPathGenerator } from '../../../../_variables/_variables';\nimport './FileManagerArea.scss';\nimport { AppContext } from '../../../../context/AppContext';\nimport withRouter from 'next/dist/client/with-router';\nimport { fileTypeDetector } from '../../../../_variables/_variables';\nimport BarsSvg from '../../../../static/images/fontawesome/bars-solid.svg';\nimport JsLogoSvg from '../../../../static/images/fontawesome/js-square-brands.svg';\nimport SliderSvg from '../../../../static/images/fontawesome/sliders-h-solid.svg';\nimport FolderSvg from '../../../../static/images/fontawesome/folder-solid.svg';\nimport SassSvg from '../../../../static/images/fontawesome/sass-brands.svg';\nimport FileSvg from '../../../../static/images/fontawesome/file-solid.svg';\n\nvar FileManagerArea = function FileManagerArea(props) {\n  var contextData = useContext(AppContext); // useEffect(() => {\n  //     console.log(props)\n  // }, [ props ]);\n\n  var classGenerator = function classGenerator(fileName) {\n    var nextClass = '';\n\n    if (props.data.clickedItem === clickPathGenerator(fileName, props.state.path)) {\n      nextClass = ' clickedItem';\n    } else {\n      nextClass = ' unClickedItem';\n    }\n  };\n\n  var logoDetector = function logoDetector(fileName) {\n    if (fileName.includes('.js')) {\n      return JsLogoSvg;\n    } else if (fileName.includes('.env')) {\n      return SliderSvg;\n    } else if (!fileName.includes('.')) {\n      return FolderSvg;\n    } else if (fileName.includes('.scss')) {\n      return SassSvg;\n    } else return FileSvg;\n  };\n\n  var WhatToRender = function WhatToRender(data) {\n    var itemType = fileTypeDetector(data.fileName);\n\n    if (itemType === 'image') {\n      return __jsx(\"img\", {\n        className: \"file-manager-image-item\",\n        src: props.state.path.replace('.', '') + '/' + data.fileName\n      });\n    } else if (itemType === 'video') {\n      return __jsx(\"video\", {\n        className: \"file-manager-image-item\"\n      }, __jsx(\"source\", {\n        src: props.state.path.replace('.', '') + '/' + data.fileName\n      }));\n    } else {\n      return __jsx(\"button\", {\n        className: [classGenerator(data.fileName)],\n        key: data.fileName,\n        name: data.fileName\n      }, __jsx(\"img\", {\n        className: \"fontawesomeSvgLarge\",\n        src: logoDetector(data.fileName),\n        alt: \"\"\n      }));\n    }\n  };\n\n  var onClickHandler = function onClickHandler(item) {\n    var itemPath = clickPathGenerator(item, props.state.path);\n    props.setState(_objectSpread({}, props.state, {\n      path: itemPath,\n      clickedItemName: item // prevPath:itemPath\n\n    }));\n  };\n\n  var renderDir = props.state.files.map(function (item) {\n    return __jsx(\"div\", {\n      key: item,\n      className: \"dirItem\",\n      onClick: function onClick() {\n        return onClickHandler(item);\n      }\n    }, __jsx(WhatToRender, {\n      key: item,\n      fileName: item\n    }), __jsx(\"p\", null, \" \", item));\n  });\n  return __jsx(\"div\", {\n    className: \"FileManagerArea\"\n  }, renderDir);\n};\n\nexport default withRouter(FileManagerArea); // <buttonref={() => selectedItem.current[props.data.files.indexOf(item)]}\n// className={[fileLogoDetector(item)]} key={item} name={item} onClick={(e) => onClickHandler(e)}\n// onDoubleClick={(e) => onDoubleClickHandler(e)} onContextMenu={(e) => onContextMenuHandler(e)}/>","map":null,"metadata":{},"sourceType":"module"}