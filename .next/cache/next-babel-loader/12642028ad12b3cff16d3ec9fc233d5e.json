{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useRef, useContext } from 'react';\nimport AdminLayout from \"../../../../components/layouts/AdminLayout\";\nimport { getSetting, updateSetting } from \"../../../../_variables/ajaxVariables\";\nimport FA from 'react-fontawesome';\nimport NavigationItem from \"../../../../components/adminIncludes/NavigationItem/NavigationItem\";\nimport './navigationAdmin.scss';\nimport { AppContext } from '../../../../context/AppContext';\nimport withRouter from 'next/dist/client/with-router';\nimport AdminDesignSettingColorType from '../../../../components/adminIncludes/AdminDesignSettingColorType/AdminDesignSettingColorType';\n\nconst navigation = props => {\n  const contextData = useContext(AppContext);\n  const titleEl = useRef(null);\n  const urlEl = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    type: 'navigation',\n    data: [],\n    style: {\n      backgroundColor: '',\n      color: ''\n    }\n  });\n  useEffect(() => {\n    console.log(contextData.siteDesign);\n  }, [contextData.siteDesign]);\n  useEffect(() => {\n    setState(_objectSpread({}, state, {\n      style: {\n        backgroundColor: contextData.siteDesign.navigationBackgroundColor || '',\n        color: contextData.siteDesign.navigationTextColor || ''\n      }\n    }));\n  }, [contextData.siteDesign.navigationTextColor, contextData.siteDesign.navigationBackgroundColor]);\n\n  const onSaveChangesHandler = type => {\n    const contextValue = type === 'design' ? 'siteDesign' : type === 'navigation' ? 'navigationData' : null;\n    updateSetting(type, contextData[contextValue]).then(() => {\n      props.router.push({\n        pathname: props.router.pathname,\n        query: _objectSpread({}, props.router.query)\n      });\n    }).catch(err => {\n      console.log(err);\n      props.router.push({\n        pathname: props.router.pathname,\n        query: _objectSpread({}, props.router.query)\n      });\n    });\n  };\n\n  const onDeleteItemHandler = e => {\n    contextData.dispatchNavigationData([...contextData.navigationData.filter(i => i.title !== e.target.name)]);\n  };\n\n  const onAddItemHandler = () => {\n    const newItem = {\n      title: titleEl.current.value,\n      url: urlEl.current.value\n    };\n    contextData.dispatchNavigationData([...contextData.navigationData, newItem]);\n    titleEl.current.value = '';\n    urlEl.current.value = '';\n  };\n\n  const renderItems = (contextData.navigationData || []).map(item => {\n    return __jsx(NavigationItem, {\n      title: item.title,\n      url: item.url,\n      onDeleteItemHandler: onDeleteItemHandler\n    });\n  });\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    id: \"navigation-setting\"\n  }, __jsx(\"div\", {\n    className: \"add-navigation-items\"\n  }, __jsx(\"div\", {\n    className: \"add-navigation-item\"\n  }, __jsx(\"p\", null, \"Title :\"), __jsx(\"input\", {\n    ref: titleEl,\n    type: \"text\",\n    name: \"title\"\n  })), __jsx(\"div\", {\n    className: \"add-navigation-item\"\n  }, __jsx(\"p\", null, \"Url :\"), __jsx(\"input\", {\n    ref: urlEl,\n    type: \"text\",\n    name: \"url\"\n  })), __jsx(\"button\", {\n    onClick: () => onAddItemHandler()\n  }, \"Add\")), __jsx(\"div\", {\n    className: \"items-preview\",\n    style: state.style\n  }, renderItems), __jsx(\"button\", {\n    className: \"saveBtn\",\n    onClick: () => onSaveChangesHandler('navigation')\n  }, \"Save\")), __jsx(AdminDesignSettingColorType, {\n    positionName: \"navigationBackgroundColor\",\n    type: \"background\"\n  }), __jsx(AdminDesignSettingColorType, {\n    positionName: \"navigationTextColor\",\n    type: \"color\"\n  }), __jsx(\"button\", {\n    className: \"saveBtn\",\n    onClick: () => onSaveChangesHandler('design')\n  }, \"Save\"));\n};\n\nexport default withRouter(navigation);","map":null,"metadata":{},"sourceType":"module"}