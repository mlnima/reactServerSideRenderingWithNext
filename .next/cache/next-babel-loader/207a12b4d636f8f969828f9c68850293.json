{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../components/layouts/AppLayout';\nimport { getSetting } from '../../_variables/ajaxVariables';\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables';\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport withRouter from 'next/dist/client/with-router';\nimport Posts from '../../components/includes/Posts/Posts';\nimport Link from 'next/link';\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent';\n\nvar posts = function posts(props) {\n  var _useState = useState({\n    posts: [],\n    totalCount: 0\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState({\n    size: 30,\n    pageNo: 1,\n    postType: 'all',\n    fields: ['all'],\n    keyword: '',\n    author: 'all',\n    status: 'all'\n  }),\n      postsData = _useState2[0],\n      setPostsData = _useState2[1];\n\n  useEffect(function () {\n    console.log(props);\n  }, []);\n  useEffect(function () {\n    if (props.postsSource.posts) {\n      setState(_objectSpread({}, state, {\n        posts: props.postsSource.posts,\n        totalCount: props.postsSource.totalCount\n      }));\n    }\n\n    if (props.getPostsData) {\n      setPostsData(props.getPostsData);\n    }\n  }, [props]);\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"posts\"\n  }, __jsx(SiteSettingSetter, props), __jsx(Posts, {\n    posts: props.postsSource.posts || state.posts\n  }), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: postsData.page,\n    totalCount: state.totalCount,\n    size: postsData.size,\n    maxPage: Math.ceil(_parseInt(state.totalCount) / _parseInt(postsData.size)) - 1,\n    mainLinkUrl: \"http://localhost:3000/posts\"\n  })));\n};\n\nposts.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, navigation, identity, postsSource, getPostsData, identityData, navigationData, postsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          getPostsData = {\n            size: _parseInt(query.size) || 30,\n            pageNo: query.page || 1,\n            postType: query.type || 'all',\n            fields: ['all'],\n            keyword: query.keyword || '',\n            author: query.author || 'all',\n            status: 'published',\n            tag: query.tag || 'all',\n            category: query.category || 'all',\n            sort: query.sort || 'latest'\n          };\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 4:\n          identityData = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 7:\n          navigationData = _context.sent;\n          _context.next = 10;\n          return _regeneratorRuntime.awrap(getPosts(getPostsData));\n\n        case 10:\n          postsData = _context.sent;\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          postsSource = postsData.data ? postsData.data : [];\n          return _context.abrupt(\"return\", {\n            identity: identity,\n            navigation: navigation,\n            query: query,\n            postsSource: postsSource,\n            getPostsData: getPostsData\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(posts);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/posts/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","getPosts","SiteSettingSetter","withRouter","Posts","Link","PaginationComponent","posts","props","totalCount","state","setState","size","pageNo","postType","fields","keyword","author","status","postsData","setPostsData","console","log","postsSource","getPostsData","page","Math","ceil","getInitialProps","pathname","query","req","res","err","type","tag","category","sort","identityData","navigationData","identity","data","setting","navigation"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,qCAAlC;AACA,OAAOC,iBAAP,MAA8B,iEAA9B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,KAAP,MAAkB,uCAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,mBAAP,MAAgC,mEAAhC;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;AAAA,kBACSb,QAAQ,CAAC;AACjCY,IAAAA,KAAK,EAAE,EAD0B;AAEjCE,IAAAA,UAAU,EAAE;AAFqB,GAAD,CADjB;AAAA,MACXC,KADW;AAAA,MACJC,QADI;;AAAA,mBAMiBhB,QAAQ,CAAC;AACzCiB,IAAAA,IAAI,EAAE,EADmC;AAEzCC,IAAAA,MAAM,EAAE,CAFiC;AAGzCC,IAAAA,QAAQ,EAAE,KAH+B;AAIzCC,IAAAA,MAAM,EAAE,CAAE,KAAF,CAJiC;AAKzCC,IAAAA,OAAO,EAAE,EALgC;AAMzCC,IAAAA,MAAM,EAAE,KANiC;AAOzCC,IAAAA,MAAM,EAAE;AAPiC,GAAD,CANzB;AAAA,MAMXC,SANW;AAAA,MAMAC,YANA;;AAgBnB1B,EAAAA,SAAS,CAAC,YAAM;AACZ2B,IAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACH,GAFQ,EAEN,EAFM,CAAT;AAGAd,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIc,KAAK,CAACe,WAAN,CAAkBhB,KAAtB,EAA6B;AACzBI,MAAAA,QAAQ,mBACDD,KADC;AAEJH,QAAAA,KAAK,EAAEC,KAAK,CAACe,WAAN,CAAkBhB,KAFrB;AAGJE,QAAAA,UAAU,EAAED,KAAK,CAACe,WAAN,CAAkBd;AAH1B,SAAR;AAKH;;AACD,QAAID,KAAK,CAACgB,YAAV,EAAwB;AACpBJ,MAAAA,YAAY,CAACZ,KAAK,CAACgB,YAAP,CAAZ;AACH;AACJ,GAXQ,EAWN,CAAEhB,KAAF,CAXM,CAAT;AAaA,SACI,MAAC,SAAD,QACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,MAAC,iBAAD,EAAyBA,KAAzB,CADJ,EAEI,MAAC,KAAD;AAAO,IAAA,KAAK,EAAGA,KAAK,CAACe,WAAN,CAAkBhB,KAAlB,IAA2BG,KAAK,CAACH;AAAhD,IAFJ,EAGI,MAAC,mBAAD;AACI,IAAA,QAAQ,EAAG,IADf;AAEI,IAAA,WAAW,EAAGY,SAAS,CAACM,IAF5B;AAGI,IAAA,UAAU,EAAGf,KAAK,CAACD,UAHvB;AAII,IAAA,IAAI,EAAGU,SAAS,CAACP,IAJrB;AAKI,IAAA,OAAO,EAAGc,IAAI,CAACC,IAAL,CAAU,UAASjB,KAAK,CAACD,UAAf,IAA6B,UAASU,SAAS,CAACP,IAAnB,CAAvC,IAAkE,CALhF;AAMI,IAAA,WAAW,EAAC;AANhB,IAHJ,CADJ,CADJ;AAgBH,CAhDD;;AAkDAL,KAAK,CAACqB,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,QAAT,QAASA,QAAT,EAAmBC,KAAnB,QAAmBA,KAAnB,EAA0BC,GAA1B,QAA0BA,GAA1B,EAA+BC,GAA/B,QAA+BA,GAA/B,EAAoCC,GAApC,QAAoCA,GAApC;AAKdT,UAAAA,YALc,GAKC;AACjBZ,YAAAA,IAAI,EAAE,UAASkB,KAAK,CAAClB,IAAf,KAAwB,EADb;AAEjBC,YAAAA,MAAM,EAAEiB,KAAK,CAACL,IAAN,IAAc,CAFL;AAGjBX,YAAAA,QAAQ,EAAEgB,KAAK,CAACI,IAAN,IAAc,KAHP;AAIjBnB,YAAAA,MAAM,EAAE,CAAE,KAAF,CAJS;AAKjBC,YAAAA,OAAO,EAAEc,KAAK,CAACd,OAAN,IAAiB,EALT;AAMjBC,YAAAA,MAAM,EAAEa,KAAK,CAACb,MAAN,IAAgB,KANP;AAOjBC,YAAAA,MAAM,EAAE,WAPS;AAQjBiB,YAAAA,GAAG,EAAEL,KAAK,CAACK,GAAN,IAAa,KARD;AASjBC,YAAAA,QAAQ,EAAEN,KAAK,CAACM,QAAN,IAAkB,KATX;AAUjBC,YAAAA,IAAI,EAAEP,KAAK,CAACO,IAAN,IAAc;AAVH,WALD;AAAA;AAAA,2CAkBOtC,UAAU,CAAC,UAAD,CAlBjB;;AAAA;AAkBduC,UAAAA,YAlBc;AAAA;AAAA,2CAmBSvC,UAAU,CAAC,YAAD,CAnBnB;;AAAA;AAmBdwC,UAAAA,cAnBc;AAAA;AAAA,2CAoBItC,QAAQ,CAACuB,YAAD,CApBZ;;AAAA;AAoBdL,UAAAA,SApBc;AAsBpBqB,UAAAA,QAAQ,GAAGF,YAAY,CAACG,IAAb,CAAkBC,OAAlB,GAA4BJ,YAAY,CAACG,IAAb,CAAkBC,OAAlB,CAA0BD,IAAtD,GAA6D,EAAxE;AACAE,UAAAA,UAAU,GAAGJ,cAAc,CAACE,IAAf,CAAoBC,OAApB,GAA8BH,cAAc,CAACE,IAAf,CAAoBC,OAAlD,GAA4D,EAAzE;AACAnB,UAAAA,WAAW,GAAGJ,SAAS,CAACsB,IAAV,GAAiBtB,SAAS,CAACsB,IAA3B,GAAkC,EAAhD;AAxBoB,2CAyBb;AAAED,YAAAA,QAAQ,EAARA,QAAF;AAAYG,YAAAA,UAAU,EAAVA,UAAZ;AAAwBb,YAAAA,KAAK,EAALA,KAAxB;AAA+BP,YAAAA,WAAW,EAAXA,WAA/B;AAA4CC,YAAAA,YAAY,EAAZA;AAA5C,WAzBa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AA4BA,eAAerB,UAAU,CAACI,KAAD,CAAzB","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../_variables/ajaxVariables'\r\nimport { getMeta, getPosts } from '../../_variables/ajaxPostsVariables'\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport Posts from '../../components/includes/Posts/Posts'\r\nimport Link from 'next/link'\r\nimport PaginationComponent from '../../components/includes/PaginationComponent/PaginationComponent'\r\n\r\nconst posts = props => {\r\n    const [ state, setState ] = useState({\r\n        posts: [],\r\n        totalCount: 0\r\n    });\r\n\r\n    const [ postsData, setPostsData ] = useState({\r\n        size: 30,\r\n        pageNo: 1,\r\n        postType: 'all',\r\n        fields: [ 'all' ],\r\n        keyword: '',\r\n        author: 'all',\r\n        status: 'all',\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n    }, []);\r\n    useEffect(() => {\r\n        if (props.postsSource.posts) {\r\n            setState({\r\n                ...state,\r\n                posts: props.postsSource.posts,\r\n                totalCount: props.postsSource.totalCount\r\n            })\r\n        }\r\n        if (props.getPostsData) {\r\n            setPostsData(props.getPostsData)\r\n        }\r\n    }, [ props ]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div className='posts'>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <Posts posts={ props.postsSource.posts || state.posts }/>\r\n                <PaginationComponent\r\n                    isActive={ true }\r\n                    currentPage={ postsData.page }\r\n                    totalCount={ state.totalCount }\r\n                    size={ postsData.size }\r\n                    maxPage={ Math.ceil(parseInt(state.totalCount) / parseInt(postsData.size))- 1 }\r\n                    mainLinkUrl='http://localhost:3000/posts'\r\n                />\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nposts.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let postsSource;\r\n\r\n    const getPostsData = {\r\n        size: parseInt(query.size) || 30,\r\n        pageNo: query.page || 1,\r\n        postType: query.type || 'all',\r\n        fields: [ 'all' ],\r\n        keyword: query.keyword || '',\r\n        author: query.author || 'all',\r\n        status: 'published',\r\n        tag: query.tag || 'all',\r\n        category: query.category || 'all',\r\n        sort: query.sort || 'latest',\r\n    }\r\n\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    const postsData = await getPosts(getPostsData)\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    postsSource = postsData.data ? postsData.data : []\r\n    return { identity, navigation, query, postsSource, getPostsData }\r\n}\r\n\r\nexport default withRouter(posts);\r\n"]},"metadata":{},"sourceType":"module"}