{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from '../../../context/AppContext';\n\nconst AlertBox = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  useEffect(() => {}, []);\n\n  const RenderAlertLogo = () => {\n    return contextData.alert.type === 'error' ? 'X' : contextData.alert.type === 'info' ? '!' : null;\n  };\n\n  const onCloseHandler = () => {\n    contextData.dispatchAlert(_objectSpread({}, contextData.alert, {\n      active: false,\n      alertMessage: '',\n      type: ''\n    }));\n  };\n\n  if (contextData.alert.active) {\n    return __jsx(\"div\", {\n      className: \"alert-box\"\n    }, __jsx(\"button\", {\n      className: \"close-alert\",\n      onClick: () => onCloseHandler()\n    }, \"X\"), __jsx(\"div\", {\n      className: \"alert-message\"\n    }, __jsx(\"p\", null, contextData.alert.type, \":\"), __jsx(\"p\", {\n      className: \"alert\"\n    }, contextData.alert.alertMessage)));\n  } else return null;\n};\n\nexport default AlertBox;","map":null,"metadata":{},"sourceType":"module"}