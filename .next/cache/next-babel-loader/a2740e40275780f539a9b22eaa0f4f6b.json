{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport Link from 'next/link';\nimport withRouter from 'next/dist/client/with-router';\nimport _ from 'lodash';\n\nconst PaginationComponent = props => {\n  useEffect(() => {\n    console.log(props);\n  }, [props]);\n\n  const paginationRangeGenerator = (current, max) => {\n    return current === 1 && max <= 2 ? [2] : current === 1 ? _.range(2, 8) : current === 2 && max <= 3 ? _.range(2, 3) : current === 2 ? _.range(current, current + 6) : current === 3 ? _.range(current - 1, current + 5) : current === 4 ? _.range(current - 2, current + 4) : current >= 5 && current < max - 3 ? _.range(current - 3, current + 4) : current >= max - 3 ? _.range(max - 6, max) : 0;\n  };\n\n  const renderPaginationItems = paginationRangeGenerator(props.currentPage, props.maxPage).map(page => {\n    if (props.router) {\n      return __jsx(Link, {\n        key: page,\n        href: {\n          pathname: props.router.pathname,\n          query: _objectSpread({}, props.router.query, {\n            page\n          })\n        }\n      }, __jsx(\"a\", null, page));\n    }\n  });\n\n  if (props.isActive && props.totalCount > props.size) {\n    return __jsx(\"div\", {\n      className: \"pagination\"\n    }, __jsx(Link, {\n      key: \"...1\",\n      href: {\n        pathname: props.pathnameData,\n        query: _objectSpread({}, props.queryData, {\n          page: 1\n        })\n      }\n    }, __jsx(\"a\", null, \"1...\")), renderPaginationItems, __jsx(Link, {\n      key: `...${props.maxPage}`,\n      href: {\n        pathname: props.pathnameData,\n        query: _objectSpread({}, props.queryData, {\n          page: props.maxPage\n        })\n      }\n    }, __jsx(\"a\", null, \"...\", props.maxPage)));\n  } else return null;\n};\n\nexport default withRouter(PaginationComponent);","map":null,"metadata":{},"sourceType":"module"}