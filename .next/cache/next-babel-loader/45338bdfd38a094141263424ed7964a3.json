{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../components/layouts/AdminLayout';\nimport FileManagerControl from '../../../components/adminIncludes/FileManagerComponents/FileManagerControl/FileManagerControl';\nimport FileManagerArea from '../../../components/adminIncludes/FileManagerComponents/FileManagerArea/FileManagerArea';\nimport { readPath } from '../../../_variables/_ajaxFilesVariables';\nimport { AppContext } from '../../../context/AppContext';\n\nvar fileManager = function fileManager(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    path: '.',\n    files: [],\n    clickedItem: '',\n    file: '',\n    editFile: false,\n    action: '',\n    _do: '',\n    // AlertBox:false,\n    DeleteAlertBox: false,\n    confirm: Date.now(),\n    didDataChange: false,\n    message: '',\n    report: '',\n    inputBox: false,\n    newItemName: ''\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(state);\n  }, [state]);\n  useEffect(function () {}, [state.path, state.didDataChange]);\n\n  var setData = function setData() {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    readPath(state.path).then(function (res) {\n      if (res.data.type === 'dir') {\n        setState(_objectSpread({}, state, {\n          files: res.data.data\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      } else if (res.data.type === 'file') {\n        setState(_objectSpread({}, state, {\n          file: res.data.data\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      } else if (res.data.type === undefined) {\n        setState(_objectSpread({}, state, {\n          error: true\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      } else {\n        setState(_objectSpread({}, state, {\n          error: true\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }\n    })[\"catch\"](function (err) {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  var setStateHandler = function setStateHandler(key, value) {\n    setState(_objectSpread({}, state, {\n      key: value\n    }));\n  };\n\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: \"fileManager\"\n  }, __jsx(FileManagerControl, {\n    setStateHandler: setStateHandler\n  }), __jsx(FileManagerArea, {\n    setStateHandler: setStateHandler\n  })));\n};\n\nexport default fileManager;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/fileManager/index.js"],"names":["React","useEffect","useState","useContext","useRef","AdminLayout","FileManagerControl","FileManagerArea","readPath","AppContext","fileManager","props","contextData","path","files","clickedItem","file","editFile","action","_do","DeleteAlertBox","confirm","Date","now","didDataChange","message","report","inputBox","newItemName","state","setState","console","log","setData","dispatchState","loading","then","res","data","type","undefined","error","err","setStateHandler","key","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../components/layouts/AdminLayout'\r\nimport FileManagerControl from '../../../components/adminIncludes/FileManagerComponents/FileManagerControl/FileManagerControl'\r\nimport FileManagerArea from '../../../components/adminIncludes/FileManagerComponents/FileManagerArea/FileManagerArea';\r\nimport { readPath } from '../../../_variables/_ajaxFilesVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\n\r\nconst fileManager = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        path: '.',\r\n        files: [],\r\n        clickedItem: '',\r\n        file: '',\r\n        editFile: false,\r\n        action: '',\r\n        _do: '',\r\n        // AlertBox:false,\r\n        DeleteAlertBox: false,\r\n        confirm: Date.now(),\r\n        didDataChange: false,\r\n        message: '',\r\n        report: '',\r\n        inputBox: false,\r\n        newItemName: ''\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(state)\r\n    }, [ state ]);\r\n\r\n    useEffect(() => {\r\n    }, [state.path,state.didDataChange]);\r\n\r\n    const setData = () => {\r\n        contextData.dispatchState({\r\n            ...contextData.state,\r\n            loading: true\r\n        });\r\n        readPath(state.path).then(res => {\r\n            if (res.data.type === 'dir') {\r\n                setState({\r\n                    ...state,\r\n                    files: res.data.data\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                });\r\n            } else if (res.data.type === 'file') {\r\n                setState({\r\n                    ...state,\r\n                    file: res.data.data\r\n                });\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                });\r\n            } else if (res.data.type === undefined) {\r\n                setState({\r\n                    ...state,\r\n                    error: true\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                });\r\n            } else {\r\n                setState({\r\n                    ...state,\r\n                    error: true\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            });\r\n        })\r\n    }\r\n    const setStateHandler = (key, value) => {\r\n        setState({\r\n            ...state,\r\n            key: value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <div className='fileManager'>\r\n                <FileManagerControl setStateHandler={ setStateHandler }/>\r\n                <FileManagerArea setStateHandler={ setStateHandler }/>\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n};\r\nexport default fileManager;\r\n"]},"metadata":{},"sourceType":"module"}