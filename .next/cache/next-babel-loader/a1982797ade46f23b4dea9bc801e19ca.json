{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef, createRef } from 'react'; // import {Link, withRouter} from \"react-router-dom\";\n// import {updatePostStatus, deletePost, postsBulkAction, getPosts} from \"../../../../../variables/_ajaxPostsVariable\";\n// import QuickEdit from \"../QuickEdit/QuickEdit\";\n// import {adminTokenValidator} from \"../../../../../variables/_ajaxAuthVariables\";\n\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from \"next/dist/client/with-router\";\nimport Link from \"next/link\";\nimport './BodyTable.scss';\n\nvar BodyTable = function BodyTable(props) {\n  var contextData = useContext(AppContext);\n  var selectBoxes = useRef(contextData.adminPosts.map(function () {\n    return createRef();\n  }));\n\n  var _useState = useState({\n    hoveredId: '',\n    isMobile: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    if (window.innerWidth < 768) {\n      setState(_objectSpread({}, state, {\n        isMobile: true\n      }));\n    }\n  }, []);\n\n  var setData = function setData() {\n    // getPosts(\n    //     contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo,\n    //     ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status,\n    //     contextData.postsData.author, contextData.postsData.keyword).then(res => {\n    //     contextData.setPostsData({\n    //         ...contextData.postsData,\n    //         posts: res.data.posts,\n    //         error: res.data.error,\n    //         totalCount: res.data.totalCount\n    //     });\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         loading: false\n    //     });\n    // }).catch(() => {\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         login: false\n    //     })\n    // })\n    return null;\n  };\n\n  var onTrashHandler = function onTrashHandler() {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    contextData.bulkActionPost([state.hoveredId], 'trash').then(function () {\n      contextData.dispatchAdminPostsData(function (adminPostsData) {\n        return _objectSpread({}, adminPostsData, {\n          pageNo: adminPostsData.pageNo\n        });\n      });\n    })[\"catch\"](function () {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  }; // const onDeletePermanentlyHandler = (id)=>{\n  //\n  // }\n\n\n  var onDeletePermanentlyHandler = function onDeletePermanentlyHandler() {// deletePost(state.hoveredId).then(res => {\n    //     const posts = contextData.postsData.posts.filter(post => {\n    //         return post._id !== state.hoveredId\n    //     });\n    //     const report = contextData.state.reports.push(res.data.message)\n    //     contextData.setPostsData({\n    //         ...contextData.postsData,\n    //         posts\n    //     });\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         report\n    //     })\n    // })\n  };\n\n  var onRestoreHandler = function onRestoreHandler() {// contextData.setState({\n    //     ...contextData.state,\n    //     loading: true\n    // });\n    // postsBulkAction([state.hoveredId], 'Draft').then(res => {\n    //     setData()\n    // }).catch(err => {\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         loading: false\n    //     });\n    // })\n  };\n\n  var HoverOnTitle = function HoverOnTitle(props) {\n    if (props.post._id === state.hoveredId) {\n      var editPostPath = \"/admin/Post?id=\".concat(props.post._id);\n\n      if (props.post.status === 'Trash') {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          to: editPostPath\n        }, \"Edit\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onDeletePermanentlyHandler(props.post._id);\n          }\n        }, \"Delete Permanently\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onRestoreHandler();\n          }\n        }, \"Move to Draft\"));\n      } else {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          href: editPostPath\n        }, __jsx(\"a\", null, \"Edit\")), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onTrashHandler();\n          }\n        }, \"Trash\"), __jsx(\"button\", null, \"View\"));\n      }\n    } else return __jsx(\"div\", {\n      className: \"postControlOptions\"\n    });\n  };\n\n  var onCheckHandler = function onCheckHandler(e) {//\n    // if (e.target.checked) {\n    //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts;\n    //         pushedItemArr.push(e.target.name);\n    //         pushedItemArr = [...new Set(pushedItemArr)]\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    //\n    // } else {\n    //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\n    //             return id !== e.target.name\n    //         });\n    //         pushedItemArr = [...new Set(pushedItemArr)];\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    // }\n  };\n\n  var renderPosts = contextData.adminPosts.map(function (post) {\n    var renderTags = post.tags.map(function (item) {\n      return __jsx(Link, {\n        href: \"/\",\n        key: item,\n        className: \"tagPreviewItem\"\n      }, \" \", __jsx(\"a\", null, item), \",\");\n    });\n    var author = post.author;\n\n    if (post.author === contextData.userData._id) {\n      author = contextData.userData.username;\n    }\n\n    var isChecked = contextData.adminPostsData.checkedPosts.includes(post._id);\n    return __jsx(\"tr\", {\n      key: post._id,\n      className: \"BodyTableItems\",\n      onTouchStart: function onTouchStart() {\n        setState(_objectSpread({}, state, {\n          hoveredId: post._id\n        }));\n      },\n      onMouseEnter: function onMouseEnter() {\n        setState(_objectSpread({}, state, {\n          hoveredId: post._id\n        }));\n      }\n    }, __jsx(\"td\", {\n      className: \"postColumn\"\n    }, __jsx(\"div\", null, __jsx(\"input\", {\n      name: post._id,\n      className: \" BodyTableItemCheckBox\",\n      type: \"checkbox\",\n      ref: function ref(e) {\n        return selectBoxes.current[contextData.adminPosts.indexOf(post)] = e;\n      },\n      checked: isChecked,\n      onChange: function onChange(e) {\n        return onCheckHandler(e);\n      }\n    })), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem\"\n    }, post.title), __jsx(HoverOnTitle, {\n      post: post\n    })), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem author noMobile\"\n    }, author)), __jsx(\"div\", {\n      className: \"tagCategoriesActorsPreview BodyTableItem noMobile\"\n    }, __jsx(\"span\", null, \"   \", post.categories + ' , ')), __jsx(\"div\", {\n      className: \"tagCategoriesActorsPreview BodyTableItem noMobile\"\n    }, __jsx(\"span\", null, \"   \", post.tags + ' , ')), __jsx(\"div\", {\n      className: \"tagCategoriesActorsPreview BodyTableItem noMobile\"\n    }, __jsx(\"span\", null, \"      \", post.actors + ' , ')), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem noMobile\"\n    }, post.status)), __jsx(\"div\", null, __jsx(\"img\", {\n      className: \"BodyTableItem noMobile\",\n      src: post.mainThumbnail\n    }))));\n  });\n  return __jsx(\"tbody\", {\n    className: \"BodyTable\"\n  }, renderPosts, \"xxc\");\n};\n\nexport default withRouter(BodyTable);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostsComponents/PostsDataTable/BodyTable.js"],"names":["React","useEffect","useState","useContext","useRef","createRef","AppContext","withRouter","Link","BodyTable","props","contextData","selectBoxes","adminPosts","map","hoveredId","isMobile","state","setState","window","innerWidth","setData","onTrashHandler","dispatchState","loading","bulkActionPost","then","dispatchAdminPostsData","adminPostsData","pageNo","onDeletePermanentlyHandler","onRestoreHandler","HoverOnTitle","post","_id","editPostPath","status","onCheckHandler","e","renderPosts","renderTags","tags","item","author","userData","username","isChecked","checkedPosts","includes","current","indexOf","title","categories","actors","mainThumbnail"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef, createRef } from 'react';\r\n// import {Link, withRouter} from \"react-router-dom\";\r\n// import {updatePostStatus, deletePost, postsBulkAction, getPosts} from \"../../../../../variables/_ajaxPostsVariable\";\r\n// import QuickEdit from \"../QuickEdit/QuickEdit\";\r\n// import {adminTokenValidator} from \"../../../../../variables/_ajaxAuthVariables\";\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport Link from \"next/link\";\r\nimport './BodyTable.scss'\r\n\r\nconst BodyTable = props => {\r\n    const contextData = useContext(AppContext);\r\n    let selectBoxes = useRef(contextData.adminPosts.map(() => createRef()));\r\n    const [ state, setState ] = useState({\r\n        hoveredId: '',\r\n        isMobile: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (window.innerWidth < 768) {\r\n            setState({\r\n                ...state,\r\n                isMobile: true\r\n            })\r\n        }\r\n    }, []);\r\n    const setData = () => {\r\n        // getPosts(\r\n        //     contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo,\r\n        //     ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status,\r\n        //     contextData.postsData.author, contextData.postsData.keyword).then(res => {\r\n        //     contextData.setPostsData({\r\n        //         ...contextData.postsData,\r\n        //         posts: res.data.posts,\r\n        //         error: res.data.error,\r\n        //         totalCount: res.data.totalCount\r\n        //     });\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         loading: false\r\n        //     });\r\n        // }).catch(() => {\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         login: false\r\n        //     })\r\n        // })\r\n        return null\r\n    };\r\n\r\n    const onTrashHandler = () => {\r\n        contextData.dispatchState({\r\n            ...contextData.state,\r\n            loading: true\r\n        });\r\n        contextData.bulkActionPost([state.hoveredId], 'trash').then(() => {\r\n            contextData.dispatchAdminPostsData(adminPostsData=>({\r\n                ...adminPostsData,\r\n                pageNo:adminPostsData.pageNo\r\n            }))\r\n        }).catch(() => {\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            });\r\n        })\r\n    };\r\n\r\n    // const onDeletePermanentlyHandler = (id)=>{\r\n    //\r\n    // }\r\n\r\n    const onDeletePermanentlyHandler = () => {\r\n        // deletePost(state.hoveredId).then(res => {\r\n        //     const posts = contextData.postsData.posts.filter(post => {\r\n        //         return post._id !== state.hoveredId\r\n        //     });\r\n        //     const report = contextData.state.reports.push(res.data.message)\r\n        //     contextData.setPostsData({\r\n        //         ...contextData.postsData,\r\n        //         posts\r\n        //     });\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         report\r\n        //     })\r\n        // })\r\n    };\r\n\r\n    const onRestoreHandler = () => {\r\n        // contextData.setState({\r\n        //     ...contextData.state,\r\n        //     loading: true\r\n        // });\r\n        // postsBulkAction([state.hoveredId], 'Draft').then(res => {\r\n        //     setData()\r\n        // }).catch(err => {\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         loading: false\r\n        //     });\r\n        // })\r\n    };\r\n\r\n    let HoverOnTitle = (props) => {\r\n\r\n        if (props.post._id === state.hoveredId) {\r\n            let editPostPath = `/admin/Post?id=${ props.post._id }`;\r\n            if (props.post.status === 'Trash') {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link to={ editPostPath }>Edit</Link>\r\n                        <button onClick={ () => onDeletePermanentlyHandler(props.post._id) }>Delete Permanently</button>\r\n                        <button onClick={ () => onRestoreHandler() }>Move to Draft</button>\r\n                        {/*<button onClick={() => quickEditBtnHandler(props.post._id)}>QEdit</button>*/ }\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link href={ editPostPath }><a>Edit</a></Link>\r\n                        <button onClick={ () => onTrashHandler() }>Trash</button>\r\n                        <button>View</button>\r\n                        {/*<button onClick={() => quickEditBtnHandler(props.post._id)}>QEdit</button>*/ }\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else return (\r\n            <div className='postControlOptions'>\r\n\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const onCheckHandler = e => {\r\n        //\r\n        // if (e.target.checked) {\r\n        //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts;\r\n        //         pushedItemArr.push(e.target.name);\r\n        //         pushedItemArr = [...new Set(pushedItemArr)]\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        //\r\n        // } else {\r\n        //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\r\n        //             return id !== e.target.name\r\n        //         });\r\n        //         pushedItemArr = [...new Set(pushedItemArr)];\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        // }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    let renderPosts = contextData.adminPosts.map(post => {\r\n\r\n        const renderTags = post.tags.map(item => {\r\n            return (\r\n                <Link href='/' key={ item } className='tagPreviewItem'> <a>{ item }</a>,</Link>)\r\n        });\r\n\r\n        let author = post.author;\r\n        if (post.author === contextData.userData._id) {\r\n            author = contextData.userData.username\r\n        }\r\n\r\n        let isChecked = contextData.adminPostsData.checkedPosts.includes(post._id);\r\n        return (\r\n            <tr key={ post._id } className='BodyTableItems' onTouchStart={ () => {\r\n                setState({ ...state, hoveredId: post._id })\r\n            } } onMouseEnter={ () => {\r\n                setState({ ...state, hoveredId: post._id })\r\n            } }>\r\n                <td className='postColumn'>\r\n                    <div>\r\n                        <input name={ post._id } className=' BodyTableItemCheckBox' type='checkbox'\r\n                               ref={ e => selectBoxes.current[contextData.adminPosts.indexOf(post)] = e }\r\n                               checked={ isChecked }\r\n                               onChange={ (e) => onCheckHandler(e) }/>\r\n                    </div>\r\n                    <div>\r\n                        <p className='BodyTableItem'>{ post.title }</p>\r\n                        <HoverOnTitle post={ post }/>\r\n                    </div>\r\n                    <div>\r\n                        <p className='BodyTableItem author noMobile'>{ author }</p>\r\n                    </div>\r\n                    <div className='tagCategoriesActorsPreview BodyTableItem noMobile'>\r\n                        <span>   { post.categories + ' , ' }</span>\r\n\r\n\r\n\r\n                    </div>\r\n                    <div className='tagCategoriesActorsPreview BodyTableItem noMobile'>\r\n                        <span>   { post.tags  + ' , ' }</span>\r\n\r\n                    </div>\r\n\r\n                    <div className='tagCategoriesActorsPreview BodyTableItem noMobile'>\r\n                        <span>      { post.actors  + ' , ' }</span>\r\n\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p className='BodyTableItem noMobile'>{ post.status }</p>\r\n                    </div>\r\n                    < div>\r\n                        < img className='BodyTableItem noMobile' src={ post.mainThumbnail }/>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <tbody className='BodyTable'>\r\n        { renderPosts }\r\n        xxc\r\n        </tbody>\r\n    );\r\n};\r\nexport default withRouter(BodyTable);"]},"metadata":{},"sourceType":"module"}