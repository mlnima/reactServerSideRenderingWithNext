{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\nimport { DelayInput } from 'react-delay-input';\nimport './customScript.scss';\nimport { AppContext } from '../../../../context/AppContext';\nimport { getAbsolutePath } from '../../../../_variables/_variables';\nimport { getSetting } from '../../../../_variables/ajaxVariables';\nimport settings from '../general';\n\nconst customScript = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: newScript,\n    1: setNewScript\n  } = useState({\n    scriptName: '',\n    scriptBody: ''\n  });\n\n  const onChangeHandler = e => {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      customScript: e.target.value\n    }));\n  };\n\n  const onSaveHandler = () => {\n    contextData.functions.updateSetting('identity', contextData.siteIdentity).then(() => {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  const onNewScriptChangeHandler = e => {\n    setNewScript(_objectSpread({}, newScript, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const onAddHandler = e => {\n    e.preventDefault();\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      customScripts: [...contextData.siteIdentity.customScripts, newScript]\n    }));\n  };\n\n  const renderScripts = contextData.siteIdentity.customScripts.map(script => {\n    return __jsx(\"div\", {\n      className: \"customScriptPageItem\"\n    }, __jsx(\"p\", null, \"Name : \", script.scriptName), __jsx(DelayInput, {\n      element: \"textarea\",\n      className: \"customScript\",\n      name: \"videoEmbedCode\",\n      value: script.scriptBody,\n      delayTimeout: 1000,\n      onChange: e => onChangeHandler(e)\n    }), __jsx(\"button\", {\n      onClick: () => onSaveHandler()\n    }, \"Save\"));\n  });\n  return __jsx(AdminLayout, null, __jsx(\"form\", {\n    className: \"addCustomScriptForm\",\n    onSubmit: e => onAddHandler(e)\n  }, __jsx(\"input\", {\n    className: \"scriptName\",\n    name: \"scriptName\",\n    placeholder: \"Script Name\",\n    onChange: e => onNewScriptChangeHandler(e)\n  }), __jsx(\"textarea\", {\n    name: \"scriptBody\",\n    className: \"addScriptTextarea\",\n    placeholder: \"Script with out Script Tag\",\n    onChange: e => onNewScriptChangeHandler(e)\n  }), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Add\")), __jsx(\"div\", {\n    className: \"customScripts\"\n  }, renderScripts));\n};\n\nexport default customScript;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/settings/customScript/index.js"],"names":["React","useEffect","useState","useContext","useRef","AdminLayout","DelayInput","AppContext","getAbsolutePath","getSetting","settings","customScript","props","contextData","newScript","setNewScript","scriptName","scriptBody","onChangeHandler","e","dispatchSiteIdentity","siteIdentity","target","value","onSaveHandler","functions","updateSetting","then","dispatchState","state","loading","onNewScriptChangeHandler","name","onAddHandler","preventDefault","customScripts","renderScripts","map","script"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\r\nimport { DelayInput } from 'react-delay-input';\r\nimport './customScript.scss';\r\nimport { AppContext } from '../../../../context/AppContext'\r\nimport { getAbsolutePath } from '../../../../_variables/_variables'\r\nimport { getSetting } from '../../../../_variables/ajaxVariables'\r\nimport settings from '../general'\r\n\r\nconst customScript = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ newScript, setNewScript ] = useState({\r\n        scriptName: '',\r\n        scriptBody: ''\r\n    })\r\n\r\n    const onChangeHandler = e => {\r\n        contextData.dispatchSiteIdentity({\r\n            ...contextData.siteIdentity,\r\n            customScript: e.target.value\r\n        })\r\n    }\r\n\r\n    const onSaveHandler = () => {\r\n        contextData.functions.updateSetting('identity', contextData.siteIdentity).then(() => {\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                loading: false\r\n            })\r\n        })\r\n    }\r\n\r\n    const onNewScriptChangeHandler = e => {\r\n        setNewScript({\r\n            ...newScript,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    const onAddHandler = e => {\r\n        e.preventDefault()\r\n        contextData.dispatchSiteIdentity({\r\n            ...contextData.siteIdentity,\r\n            customScripts: [ ...contextData.siteIdentity.customScripts, newScript ]\r\n        })\r\n    }\r\n\r\n    const renderScripts = contextData.siteIdentity.customScripts.map(script => {\r\n        return (\r\n            <div className='customScriptPageItem'>\r\n                <p>Name : { script.scriptName }</p>\r\n                <DelayInput element=\"textarea\" className='customScript' name='videoEmbedCode' value={ script.scriptBody } delayTimeout={ 1000 } onChange={ e => onChangeHandler(e) }/>\r\n                <button onClick={ () => onSaveHandler() }>Save</button>\r\n            </div>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <form className='addCustomScriptForm' onSubmit={ e => onAddHandler(e) }>\r\n                <input className='scriptName' name='scriptName' placeholder='Script Name' onChange={ e => onNewScriptChangeHandler(e) }/>\r\n                <textarea name='scriptBody' className='addScriptTextarea' placeholder='Script with out Script Tag' onChange={ e => onNewScriptChangeHandler(e) }/>\r\n                <button type='submit'>Add</button>\r\n            </form>\r\n            <div className='customScripts'>\r\n                { renderScripts }\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\nexport default customScript;\r\n"]},"metadata":{},"sourceType":"module"}