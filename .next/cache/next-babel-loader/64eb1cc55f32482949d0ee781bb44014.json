{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\nimport { DelayInput } from 'react-delay-input';\nimport './customScript.scss';\nimport { AppContext } from '../../../../context/AppContext';\nimport { getAbsolutePath } from '../../../../_variables/_variables';\nimport { getSetting } from '../../../../_variables/ajaxVariables';\nimport settings from '../general';\n\nvar customScript = function customScript(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    scriptName: '',\n    scriptBody: ''\n  }),\n      newScript = _useState[0],\n      setNewScript = _useState[1];\n\n  var _useState2 = useState([]),\n      scriptsName = _useState2[0],\n      setScriptsName = _useState2[1];\n\n  useEffect(function () {\n    setScriptsName((contextData.siteIdentity.customScripts || []).map(function (script) {\n      return script.scriptName;\n    }));\n  }, [contextData.siteIdentity.customScripts]);\n\n  var onNewScriptChangeHandler = function onNewScriptChangeHandler(e) {\n    setNewScript(_objectSpread({}, newScript, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var onAddHandler = function onAddHandler(e) {\n    return _regeneratorRuntime.async(function onAddHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            e.preventDefault();\n\n            if (scriptsName.includes(newScript.scriptName)) {\n              contextData.dispatchAlert({\n                active: true,\n                alertMessage: 'already there is script with this name',\n                type: 'error'\n              });\n            } else {\n              contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n                customScripts: [].concat(_toConsumableArray(contextData.siteIdentity.customScripts), [newScript])\n              }));\n            }\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    });\n  };\n\n  var onDeleteHandler = function onDeleteHandler(scriptName) {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      customScripts: contextData.siteIdentity.customScripts.filter(function (script) {\n        return script.scriptName !== scriptName;\n      })\n    }));\n  };\n\n  var onSaveHandler = function onSaveHandler() {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    contextData.functions.updateSetting('identity', contextData.siteIdentity).then(function () {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    })[\"catch\"](function (err) {\n      console.log(err);\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  var onGoogleAnalyticsSaveHandler = function onGoogleAnalyticsSaveHandler(e) {\n    contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n      googleAnalyticsID: e.target.value\n    }));\n  };\n\n  var renderScripts = (contextData.siteIdentity.customScripts || []).map(function (script) {\n    var onChangeHandler = function onChangeHandler(e) {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: true\n      }));\n      var scriptIndex = contextData.siteIdentity.customScripts.findIndex(function (addedScript) {\n        return addedScript.scriptName === script.scriptName;\n      });\n\n      var updatedScript = _objectSpread({}, contextData.siteIdentity.customScripts[scriptIndex], _defineProperty({}, e.target.name, e.target.value));\n\n      setTimeout(function () {\n        var updatedScripts = [].concat(_toConsumableArray(contextData.siteIdentity.customScripts.slice(0, scriptIndex)), [updatedScript], _toConsumableArray(contextData.siteIdentity.customScripts.slice(scriptIndex + 1)));\n        contextData.dispatchSiteIdentity(_objectSpread({}, contextData.siteIdentity, {\n          customScripts: updatedScripts\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }, 500);\n    };\n\n    return __jsx(\"div\", {\n      key: script.scriptName,\n      className: \"customScriptPageItem\"\n    }, __jsx(\"div\", {\n      className: \"customScriptPageItemHead\"\n    }, __jsx(DelayInput, {\n      className: \"customScriptPageItemHeadName\",\n      name: \"scriptName\",\n      value: script.scriptName,\n      delayTimeout: 1000,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }), __jsx(\"button\", {\n      className: \"removeScript\",\n      onClick: function onClick() {\n        return onDeleteHandler(script.scriptName);\n      }\n    }, \"X\")), __jsx(DelayInput, {\n      element: \"textarea\",\n      className: \"customScript\",\n      name: \"scriptBody\",\n      value: script.scriptBody,\n      delayTimeout: 1000,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }));\n  });\n  return __jsx(AdminLayout, null, __jsx(\"input\", {\n    placeholder: \"Google Analytics ID\",\n    type: \"text\",\n    name: \"googleAnalyticsID\",\n    value: contextData.siteIdentity.googleAnalyticsID,\n    className: \"googleAnalyticsInput\",\n    onChange: function onChange(e) {\n      return onGoogleAnalyticsSaveHandler(e);\n    }\n  }), __jsx(\"form\", {\n    className: \"addCustomScriptForm\",\n    onSubmit: function onSubmit(e) {\n      return onAddHandler(e);\n    }\n  }, __jsx(\"input\", {\n    className: \"scriptName\",\n    name: \"scriptName\",\n    placeholder: \"Script Name\",\n    onChange: function onChange(e) {\n      return onNewScriptChangeHandler(e);\n    }\n  }), __jsx(\"textarea\", {\n    name: \"scriptBody\",\n    className: \"addScriptTextarea\",\n    placeholder: \"Script with out Script Tag\",\n    onChange: function onChange(e) {\n      return onNewScriptChangeHandler(e);\n    }\n  }), __jsx(\"button\", {\n    type: \"submit\"\n  }, \"Add\")), __jsx(\"div\", {\n    className: \"customScripts\"\n  }, renderScripts), __jsx(\"button\", {\n    className: \"saveBtn\",\n    onClick: function onClick() {\n      return onSaveHandler();\n    }\n  }, \"Save\"));\n};\n\nexport default customScript;","map":null,"metadata":{},"sourceType":"module"}