{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { getPost } from '../../../_variables/ajaxPostsVariables';\nimport { getAbsolutePath } from '../../../_variables/_variables';\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\nimport TitleDescription from \"../../../components/adminIncludes/PostComponents/TitleDescription/TitleDescription\";\nimport ActionOnPost from \"../../../components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost\";\nimport DropDownWidget from \"../../../components/adminIncludes/PostComponents/DropDownWidget/DropDownWidget\";\nimport { AppContext } from \"../../../context/AppContext\";\nimport Format from \"../../../components/adminIncludes/PostComponents/Format/Format\";\nimport PostCategoriesTagsActors from \"../../../components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors\";\nimport VideoInformation from \"../../../components/adminIncludes/PostComponents/VideoInformation/VideoInformation\";\nimport withRouter from \"next/dist/client/with-router\";\n\nvar Index = function Index(props) {\n  var contextData = useContext(AppContext);\n\n  var onChangeHandler = function onChangeHandler(e) {\n    contextData.dispatchEditingPostData(_objectSpread({}, contextData.editingPostData, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  useEffect(function () {\n    contextData.dispatchEditingPostData(_objectSpread({}, contextData.editingPostData, {}, props.post));\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: \"Post\"\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(TitleDescription, {\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    component: VideoInformation,\n    title: \"Video Information\",\n    onChangeHandler: onChangeHandler\n  })), __jsx(\"div\", {\n    className: \"side\"\n  }, __jsx(DropDownWidget, {\n    component: ActionOnPost,\n    title: \"action\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    component: Format,\n    title: \"Format\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    isNewPost: props.query[\"new\"] === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"categories\",\n    title: \"Post Category\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    isNewPost: props.query[\"new\"] === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"tags\",\n    title: \"Post Tags\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    isNewPost: props.query[\"new\"] === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"actors\",\n    title: \"Post Actors\",\n    onChangeHandler: onChangeHandler\n  })))));\n};\n\nIndex.getInitialProps = function _callee(_ref) {\n  var query, req, domainName, post, postData, requestBody;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref.query, req = _ref.req;\n\n          if (!req) {\n            _context.next = 7;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getAbsolutePath(req));\n\n        case 4:\n          _context.t0 = _context.sent;\n          _context.next = 8;\n          break;\n\n        case 7:\n          _context.t0 = '';\n\n        case 8:\n          domainName = _context.t0;\n\n          if (!query[\"new\"]) {\n            _context.next = 13;\n            break;\n          }\n\n          post = {};\n          _context.next = 19;\n          break;\n\n        case 13:\n          if (!(query.postTitle || query.id)) {\n            _context.next = 19;\n            break;\n          }\n\n          requestBody = {\n            postTitle: query.postTitle,\n            _id: query.id\n          };\n          _context.next = 17;\n          return _regeneratorRuntime.awrap(getPost(requestBody, true, domainName));\n\n        case 17:\n          postData = _context.sent;\n          post = postData.data ? postData.data.post : {};\n\n        case 19:\n          return _context.abrupt(\"return\", {\n            post: post,\n            query: query\n          });\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default withRouter(Index);","map":null,"metadata":{},"sourceType":"module"}