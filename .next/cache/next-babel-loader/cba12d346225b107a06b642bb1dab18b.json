{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport AdminLayout from \"../../../../components/layouts/AdminLayout\";\nimport { getSetting, updateSetting } from \"../../../../_variables/ajaxVariables\";\nimport FA from 'react-fontawesome';\nimport NavigationItem from \"../../../../components/includes/Header/Navigation/NavigationItem/NavigationItem\";\n\nconst navigation = props => {\n  const titleEl = useRef(null);\n  const urlEl = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    type: 'navigation',\n    data: []\n  });\n  useEffect(() => {\n    getSetting(state.type, false, window.location.origin).then(res => {\n      if (res.data.setting) {\n        setState(_objectSpread({}, state, {\n          data: res.data.setting.data || []\n        }));\n      }\n    });\n  }, []);\n\n  const onSaveChangesHandler = () => {\n    updateSetting('navigation', state.data).then(() => {\n      getSetting(state.type).then(res => {\n        if (res.data.setting) {\n          setState(_objectSpread({}, state, {\n            data: res.data.setting.data || []\n          }));\n        }\n      });\n    });\n  };\n\n  const onDeleteItemHandler = e => {\n    setState(_objectSpread({}, state, {\n      data: state.data.filter(i => i.title !== e.target.name)\n    }));\n  };\n\n  const onAddItemHandler = () => {\n    const newItem = {\n      title: titleEl.current.value,\n      url: urlEl.current.value\n    };\n    setState(_objectSpread({}, state, {\n      data: [...state.data, newItem]\n    }));\n    titleEl.current.value = '';\n    urlEl.current.value = '';\n  };\n\n  const renderItems = state.data.map(item => {\n    return __jsx(NavigationItem, {\n      title: item.title,\n      url: item.url,\n      onDeleteItemHandler: onDeleteItemHandler\n    });\n  });\n  {\n    /*<div className='items-preview-item'>*/\n  }\n  {\n    /*    <div className=\"item-title\">*/\n  }\n  {\n    /*        <p>{ item.title }</p>*/\n  }\n  {\n    /*        <button><FA className='fontawesomeMedium' name={ 'bars' }/></button>*/\n  }\n  {\n    /*    </div>*/\n  }\n  {\n    /*    <button name={ item.title } onClick={ (e) => onDeleteItemHandler(e) }>Del</button>*/\n  }\n  {\n    /*    <p>{ item.url }</p>*/\n  }\n  {\n    /*</div>*/\n  }\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    id: \"navigation-setting\"\n  }, __jsx(\"div\", {\n    className: \"add-navigation-items\"\n  }, __jsx(\"p\", null, \"Title :\"), __jsx(\"input\", {\n    ref: titleEl,\n    type: \"text\",\n    name: \"title\"\n  }), __jsx(\"p\", null, \"Url :\"), __jsx(\"input\", {\n    ref: urlEl,\n    type: \"text\",\n    name: \"url\"\n  }), __jsx(\"button\", {\n    onClick: () => onAddItemHandler()\n  }, \"Add\")), __jsx(\"div\", {\n    className: \"items-preview\"\n  }, renderItems), __jsx(\"button\", {\n    className: \"saveBtn\",\n    onClick: () => onSaveChangesHandler()\n  }, \"Save\")));\n};\n\nexport default navigation;","map":null,"metadata":{},"sourceType":"module"}