{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport axios from \"axios\";\nimport { getPost } from \"../../_variables/ajaxPostsVariables\";\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\nimport withRouter from \"next/dist/client/with-router\";\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\nimport Head from \"next/head\";\nimport { getSetting } from \"../../_variables/ajaxVariables\";\n\nconst Post = props => {\n  const RenderMeta = () => {\n    if (props.post.title) {\n      return __jsx(Head, null, __jsx(\"title\", null, props.post.title), __jsx(\"meta\", {\n        name: \"description\",\n        content: props.post.description\n      }), __jsx(\"meta\", {\n        name: \"keywords\",\n        content: [...props.post.tags, ...props.post.categories, ...props.post.actors]\n      }), __jsx(\"meta\", {\n        property: \"og:title\",\n        content: props.post.title\n      }), __jsx(\"meta\", {\n        property: \"og:type\",\n        content: props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType\n      }), __jsx(\"meta\", {\n        property: \"og:url\",\n        content: props.post.videoEmbedCode\n      }), __jsx(\"meta\", {\n        property: \"og:image\",\n        content: props.post.mainThumbnail\n      }));\n    } else return null;\n  };\n\n  useEffect(() => {\n    console.log(props);\n\n    if (props.navigate) {}\n  }, [props]);\n  return __jsx(AppLayout, null, __jsx(React.Fragment, null, __jsx(RenderMeta, null), __jsx(\"div\", {\n    className: \"post\"\n  }, __jsx(PostSidebar, null), __jsx(\"div\", {\n    className: \"main\"\n  }, __jsx(Iframe, {\n    iframeCode: props.post.videoEmbedCode,\n    meta: {\n      description: props.post.description,\n      title: props.post.title,\n      duration: props.post.duration,\n      thumbnailUrl: props.post.mainThumbnail,\n      embedURL: props.post.videoEmbedCode,\n      uploadDate: props.post.lastModify\n    }\n  }), __jsx(PostInfo, {\n    title: props.post.title,\n    description: props.post.description,\n    tags: props.post.tags,\n    actors: props.post.actors,\n    categories: props.post.categories,\n    id: props.post._id,\n    likes: props.post.likes,\n    disLikes: props.post.disLikes,\n    views: props.post.views,\n    videoEmbedCode: props.post.videoEmbedCode\n  })))));\n};\n\nPost.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let post;\n  let navigation;\n  const postBody = {\n    postTitle: query.postTitle\n  };\n  const navigationBody = {\n    type: 'navigation'\n  };\n\n  try {\n    const postData = await axios.post('http://localhost:3000/api/v1/posts/post', postBody);\n    post = postData.data.post;\n    const navigationData = await axios.post('http://localhost:3000/api/v1/settings/get', navigationBody);\n    navigation = navigationData.data;\n  } catch (e) {\n    console.error(e);\n  }\n\n  return {\n    post,\n    query,\n    navigation\n  };\n};\n\nexport default withRouter(Post);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/post/index.js"],"names":["React","useEffect","useState","useContext","AppLayout","axios","getPost","Iframe","PostInfo","withRouter","PostSidebar","Head","getSetting","Post","props","RenderMeta","post","title","description","tags","categories","actors","postType","videoEmbedCode","mainThumbnail","console","log","navigate","duration","thumbnailUrl","embedURL","uploadDate","lastModify","_id","likes","disLikes","views","getInitialProps","pathname","query","req","res","err","navigation","postBody","postTitle","navigationBody","type","postData","data","navigationData","e","error"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport AppLayout from \"../../components/layouts/AppLayout\";\r\nimport axios from \"axios\";\r\nimport { getPost } from \"../../_variables/ajaxPostsVariables\";\r\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\r\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\r\n\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport PostSidebar from \"../../components/includes/Post/PostSidebar/PostSidebar\";\r\nimport Head from \"next/head\";\r\nimport { getSetting } from \"../../_variables/ajaxVariables\";\r\n\r\nconst Post = props => {\r\n\r\n    const RenderMeta = () => {\r\n        if (props.post.title) {\r\n            return (\r\n                <Head>\r\n                    <title>{ props.post.title }</title>\r\n                    <meta name=\"description\" content={ props.post.description }/>\r\n                    <meta name=\"keywords\" content={ [ ...props.post.tags, ...props.post.categories, ...props.post.actors ] }/>\r\n                    <meta property=\"og:title\" content={ props.post.title }/>\r\n                    <meta property=\"og:type\" content={ props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType }/>\r\n                    {/*url should define*/ }\r\n                    <meta property=\"og:url\" content={ props.post.videoEmbedCode }/>\r\n                    <meta property=\"og:image\" content={ props.post.mainThumbnail }/>\r\n                </Head>\r\n            )\r\n        } else return null\r\n    }\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        console.log(props )\r\n            if(props.navigate){\r\n                \r\n            }\r\n    },[props ]);\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            <>\r\n                <RenderMeta/>\r\n                <div className='post'>\r\n                    <PostSidebar/>\r\n                    <div className=\"main\">\r\n                        <Iframe iframeCode={ props.post.videoEmbedCode } meta={ {\r\n                            description: props.post.description,\r\n                            title: props.post.title,\r\n                            duration: props.post.duration,\r\n                            thumbnailUrl: props.post.mainThumbnail,\r\n                            embedURL: props.post.videoEmbedCode,\r\n                            uploadDate: props.post.lastModify,\r\n                        } }/>\r\n\r\n                        <PostInfo\r\n                            title={ props.post.title }\r\n                            description={ props.post.description }\r\n                            tags={ props.post.tags }\r\n                            actors={ props.post.actors }\r\n                            categories={ props.post.categories }\r\n                            id={ props.post._id }\r\n                            likes={ props.post.likes }\r\n                            disLikes={ props.post.disLikes }\r\n                            views={ props.post.views }\r\n                            videoEmbedCode={ props.post.videoEmbedCode }\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let post;\r\n    let navigation;\r\n    const postBody = {\r\n        postTitle: query.postTitle,\r\n    };\r\n    const navigationBody = {\r\n        type:'navigation'\r\n    }\r\n    try {\r\n        const postData = await axios.post('http://localhost:3000/api/v1/posts/post', postBody);\r\n        post = postData.data.post\r\n        const navigationData = await axios.post('http://localhost:3000/api/v1/settings/get',navigationBody)\r\n        navigation = navigationData.data\r\n    } catch ( e ) {\r\n        console.error(e)\r\n    }\r\n    return { post, query,navigation }\r\n};\r\n\r\nexport default withRouter(Post);"]},"metadata":{},"sourceType":"module"}