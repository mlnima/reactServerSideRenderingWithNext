{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport FA from \"react-fontawesome\";\n\nconst PostCategoriesTagsActors = props => {\n  let newItemsElement = useRef(null);\n\n  const deleteItem = e => {\n    const deletedItemFromType = props.postData[props.type].filter(i => {\n      return i !== e.currentTarget.name;\n    });\n    props.onPostMetaChangeHandler(props.type, deletedItemFromType);\n  };\n\n  const addNewItem = () => {\n    if (newItemsElement.current.value.includes(',')) {\n      let newItems = newItemsElement.current.value.split(',');\n      const addedItemFromType = [...props.postData[props.type], ...newItems];\n      props.onPostMetaChangeHandler(props.type, addedItemFromType);\n    } else {\n      const addedItemFromType = [...props.postData[props.type], newItemsElement.current.value];\n      props.onPostMetaChangeHandler(props.type, addedItemFromType);\n    }\n  };\n\n  const addedItems = props.postData[props.type].map(item => {\n    let icon = props.type === 'tags' ? 'tags' : props.type === 'actors' ? 'star' : props.type === 'categories' ? 'folder' : '';\n    return __jsx(\"div\", {\n      key: item,\n      className: \"item\"\n    }, __jsx(\"p\", null, item), __jsx(\"button\", {\n      name: item,\n      onClick: e => deleteItem(e)\n    }, __jsx(FA, {\n      className: \"fontawesomeMedium\",\n      name: \"times\"\n    })));\n  });\n  return __jsx(\"div\", {\n    className: \"PostCategoriesTagsActors\"\n  }, __jsx(\"div\", {\n    className: \"addNewTag\"\n  }, __jsx(\"input\", {\n    ref: newItemsElement,\n    type: \"text\"\n  }), __jsx(\"button\", {\n    className: \"addBtn\",\n    onClick: () => addNewItem()\n  }, \" Add\")), __jsx(\"span\", {\n    className: \"small-info\"\n  }, \"Separate tags with commas\"), __jsx(\"div\", {\n    className: \"items\"\n  }, addedItems));\n};\n\nexport default PostCategoriesTagsActors;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors.js"],"names":["React","useRef","AppContext","FA","PostCategoriesTagsActors","props","newItemsElement","deleteItem","e","deletedItemFromType","postData","type","filter","i","currentTarget","name","onPostMetaChangeHandler","addNewItem","current","value","includes","newItems","split","addedItemFromType","addedItems","map","item","icon"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,OAAOC,EAAP,MAAe,mBAAf;;AAEA,MAAMC,wBAAwB,GAAGC,KAAK,IAAI;AACtC,MAAIC,eAAe,GAAGL,MAAM,CAAC,IAAD,CAA5B;;AAEA,QAAMM,UAAU,GAAIC,CAAD,IAAO;AACtB,UAAMC,mBAAmB,GAAGJ,KAAK,CAACK,QAAN,CAAeL,KAAK,CAACM,IAArB,EAA2BC,MAA3B,CAAkCC,CAAC,IAAI;AAC/D,aAAOA,CAAC,KAAKL,CAAC,CAACM,aAAF,CAAgBC,IAA7B;AACH,KAF2B,CAA5B;AAGAV,IAAAA,KAAK,CAACW,uBAAN,CAA8BX,KAAK,CAACM,IAApC,EAA0CF,mBAA1C;AACH,GALD;;AAOA,QAAMQ,UAAU,GAAG,MAAM;AACrB,QAAIX,eAAe,CAACY,OAAhB,CAAwBC,KAAxB,CAA8BC,QAA9B,CAAuC,GAAvC,CAAJ,EAAiD;AAC7C,UAAIC,QAAQ,GAAGf,eAAe,CAACY,OAAhB,CAAwBC,KAAxB,CAA8BG,KAA9B,CAAoC,GAApC,CAAf;AACA,YAAMC,iBAAiB,GAAG,CAAE,GAAGlB,KAAK,CAACK,QAAN,CAAeL,KAAK,CAACM,IAArB,CAAL,EAAiC,GAAGU,QAApC,CAA1B;AACAhB,MAAAA,KAAK,CAACW,uBAAN,CAA8BX,KAAK,CAACM,IAApC,EAA0CY,iBAA1C;AACH,KAJD,MAIO;AACH,YAAMA,iBAAiB,GAAG,CAAE,GAAGlB,KAAK,CAACK,QAAN,CAAeL,KAAK,CAACM,IAArB,CAAL,EAAiCL,eAAe,CAACY,OAAhB,CAAwBC,KAAzD,CAA1B;AACAd,MAAAA,KAAK,CAACW,uBAAN,CAA8BX,KAAK,CAACM,IAApC,EAA0CY,iBAA1C;AACH;AACJ,GATD;;AAWA,QAAMC,UAAU,GAAGnB,KAAK,CAACK,QAAN,CAAeL,KAAK,CAACM,IAArB,EAA2Bc,GAA3B,CAA+BC,IAAI,IAAI;AACtD,QAAIC,IAAI,GAAGtB,KAAK,CAACM,IAAN,KAAe,MAAf,GAAwB,MAAxB,GACLN,KAAK,CAACM,IAAN,KAAe,QAAf,GAA0B,MAA1B,GACIN,KAAK,CAACM,IAAN,KAAe,YAAf,GAA8B,QAA9B,GACI,EAHd;AAIA,WACI;AAAK,MAAA,GAAG,EAAGe,IAAX;AAAkB,MAAA,SAAS,EAAC;AAA5B,OACI,iBAAKA,IAAL,CADJ,EAGI;AAAQ,MAAA,IAAI,EAAGA,IAAf;AAAsB,MAAA,OAAO,EAAIlB,CAAD,IAAOD,UAAU,CAACC,CAAD;AAAjD,OAAuD,MAAC,EAAD;AAAI,MAAA,SAAS,EAAC,mBAAd;AAAkC,MAAA,IAAI,EAAC;AAAvC,MAAvD,CAHJ,CADJ;AAOH,GAZkB,CAAnB;AAcA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAO,IAAA,GAAG,EAAGF,eAAb;AAA+B,IAAA,IAAI,EAAC;AAApC,IADJ,EAEI;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA2B,IAAA,OAAO,EAAG,MAAMW,UAAU;AAArD,YAFJ,CADJ,EAKI;AAAM,IAAA,SAAS,EAAC;AAAhB,iCALJ,EAMI;AAAK,IAAA,SAAS,EAAC;AAAf,KACMO,UADN,CANJ,CADJ;AAYH,CA/CD;;AAgDA,eAAepB,wBAAf","sourcesContent":["import React, { useRef } from 'react';\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport FA from \"react-fontawesome\";\r\n\r\nconst PostCategoriesTagsActors = props => {\r\n    let newItemsElement = useRef(null);\r\n\r\n    const deleteItem = (e) => {\r\n        const deletedItemFromType = props.postData[props.type].filter(i => {\r\n            return i !== e.currentTarget.name\r\n        })\r\n        props.onPostMetaChangeHandler(props.type, deletedItemFromType)\r\n    };\r\n\r\n    const addNewItem = () => {\r\n        if (newItemsElement.current.value.includes(',')) {\r\n            let newItems = newItemsElement.current.value.split(',');\r\n            const addedItemFromType = [ ...props.postData[props.type], ...newItems ]\r\n            props.onPostMetaChangeHandler(props.type, addedItemFromType)\r\n        } else {\r\n            const addedItemFromType = [ ...props.postData[props.type], newItemsElement.current.value ]\r\n            props.onPostMetaChangeHandler(props.type, addedItemFromType)\r\n        }\r\n    };\r\n\r\n    const addedItems = props.postData[props.type].map(item => {\r\n        let icon = props.type === 'tags' ? 'tags'\r\n            : props.type === 'actors' ? 'star'\r\n                : props.type === 'categories' ? 'folder'\r\n                    : '';\r\n        return (\r\n            <div key={ item } className='item'>\r\n                <p>{ item }</p>\r\n\r\n                <button name={ item } onClick={ (e) => deleteItem(e) }><FA className='fontawesomeMedium' name='times'/></button>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className='PostCategoriesTagsActors'>\r\n            <div className=\"addNewTag\">\r\n                <input ref={ newItemsElement } type='text'/>\r\n                <button className='addBtn' onClick={ () => addNewItem() }> Add</button>\r\n            </div>\r\n            <span className='small-info'>Separate tags with commas</span>\r\n            <div className=\"items\">\r\n                { addedItems }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default PostCategoriesTagsActors;"]},"metadata":{},"sourceType":"module"}