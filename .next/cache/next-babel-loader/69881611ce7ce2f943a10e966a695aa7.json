{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\n\nconst metaPage = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    metaData: []\n  });\n  useEffect(() => {\n    if (props.navigation) {\n      contextData.dispatchNavigationData(props.navigation.data);\n    }\n\n    if (props.identity) {\n      contextData.dispatchSiteIdentity(siteIdentity => _objectSpread({}, siteIdentity, {}, props.identity));\n    }\n  }, [props]);\n  const renderMetas = state.metaData.map(meta => {\n    if (meta.count > 0) {\n      return __jsx(CategoryElement, {\n        key: meta._id,\n        imageUrl: meta.imageUrl,\n        noImageUrl: meta.noImageUrl,\n        name: meta.name,\n        count: meta.count\n      });\n    }\n  });\n  useEffect(() => {\n    console.log(props);\n  }, []);\n  return __jsx(AppLayout, null, __jsx(\"div\", null, \"xxx\"), renderMetas);\n};\n\nmetaPage.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let metaData = [];\n  const metaDetail = {\n    type: query.meta,\n    pageNo: 1,\n    size: 100,\n    searchForImageIn: 'categories'\n  };\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  return {\n    identity,\n    navigation,\n    query\n  };\n};\n\nexport default metaPage;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/metaPage/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","AppContext","CategoryElement","metaPage","props","contextData","state","setState","metaData","navigation","dispatchNavigationData","data","identity","dispatchSiteIdentity","siteIdentity","renderMetas","map","meta","count","_id","imageUrl","noImageUrl","name","console","log","getInitialProps","pathname","query","req","res","err","metaDetail","type","pageNo","size","searchForImageIn","identityData","navigationData","setting"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,OAAOC,eAAP,MAA4B,8DAA5B;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACtB,QAAMC,WAAW,GAAGR,UAAU,CAACI,UAAD,CAA9B;AACA,QAAM;AAAA,OAAEK,KAAF;AAAA,OAASC;AAAT,MAAsBX,QAAQ,CAAC;AACjCY,IAAAA,QAAQ,EAAE;AADuB,GAAD,CAApC;AAGAb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,KAAK,CAACK,UAAV,EAAsB;AAClBJ,MAAAA,WAAW,CAACK,sBAAZ,CAAmCN,KAAK,CAACK,UAAN,CAAiBE,IAApD;AACH;;AACD,QAAIP,KAAK,CAACQ,QAAV,EAAoB;AAChBP,MAAAA,WAAW,CAACQ,oBAAZ,CAAiCC,YAAY,sBACtCA,YADsC,MAEtCV,KAAK,CAACQ,QAFgC,CAA7C;AAIH;AACJ,GAVQ,EAUN,CAAER,KAAF,CAVM,CAAT;AAWA,QAAMW,WAAW,GAAGT,KAAK,CAACE,QAAN,CAAeQ,GAAf,CAAmBC,IAAI,IAAI;AAC3C,QAAIA,IAAI,CAACC,KAAL,GAAa,CAAjB,EAAoB;AAChB,aACI,MAAC,eAAD;AAAiB,QAAA,GAAG,EAAGD,IAAI,CAACE,GAA5B;AAAkC,QAAA,QAAQ,EAAGF,IAAI,CAACG,QAAlD;AAA6D,QAAA,UAAU,EAAGH,IAAI,CAACI,UAA/E;AAA4F,QAAA,IAAI,EAAGJ,IAAI,CAACK,IAAxG;AAA+G,QAAA,KAAK,EAAGL,IAAI,CAACC;AAA5H,QADJ;AAGH;AAEJ,GAPmB,CAApB;AASAvB,EAAAA,SAAS,CAAC,MAAM;AACZ4B,IAAAA,OAAO,CAACC,GAAR,CAAYpB,KAAZ;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,SACI,MAAC,SAAD,QACI,yBADJ,EAEMW,WAFN,CADJ;AAMH,CAnCD;;AAqCAZ,QAAQ,CAACsB,eAAT,GAA2B,OAAO;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,GAAnB;AAAwBC,EAAAA,GAAxB;AAA6BC,EAAAA;AAA7B,CAAP,KAA8C;AACrE,MAAIrB,UAAJ;AACA,MAAIG,QAAJ;AACA,MAAIJ,QAAQ,GAAG,EAAf;AACA,QAAMuB,UAAU,GAAG;AACfC,IAAAA,IAAI,EAAEL,KAAK,CAACV,IADG;AAEfgB,IAAAA,MAAM,EAAE,CAFO;AAGfC,IAAAA,IAAI,EAAE,GAHS;AAIfC,IAAAA,gBAAgB,EAAE;AAJH,GAAnB;AAMA,QAAMC,YAAY,GAAG,MAAMpC,UAAU,CAAC,UAAD,CAArC;AACA,QAAMqC,cAAc,GAAG,MAAMrC,UAAU,CAAC,YAAD,CAAvC;AACAY,EAAAA,QAAQ,GAAGwB,YAAY,CAACzB,IAAb,CAAkB2B,OAAlB,GAA4BF,YAAY,CAACzB,IAAb,CAAkB2B,OAAlB,CAA0B3B,IAAtD,GAA6D,EAAxE;AACAF,EAAAA,UAAU,GAAG4B,cAAc,CAAC1B,IAAf,CAAoB2B,OAApB,GAA8BD,cAAc,CAAC1B,IAAf,CAAoB2B,OAAlD,GAA4D,EAAzE;AACA,SAAO;AAAE1B,IAAAA,QAAF;AAAYH,IAAAA,UAAZ;AAAwBkB,IAAAA;AAAxB,GAAP;AACH,CAfD;;AAiBA,eAAexB,QAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement'\r\n\r\nconst metaPage = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        metaData: []\r\n    });\r\n    useEffect(() => {\r\n        if (props.navigation) {\r\n            contextData.dispatchNavigationData(props.navigation.data)\r\n        }\r\n        if (props.identity) {\r\n            contextData.dispatchSiteIdentity(siteIdentity => ({\r\n                ...siteIdentity,\r\n                ...props.identity\r\n            }))\r\n        }\r\n    }, [ props ]);\r\n    const renderMetas = state.metaData.map(meta => {\r\n        if (meta.count > 0) {\r\n            return (\r\n                <CategoryElement key={ meta._id } imageUrl={ meta.imageUrl } noImageUrl={ meta.noImageUrl } name={ meta.name } count={ meta.count }/>\r\n            )\r\n        }\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log(props )\r\n    }, []);\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div>xxx</div>\r\n            { renderMetas }\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nmetaPage.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let metaData = []\r\n    const metaDetail = {\r\n        type: query.meta,\r\n        pageNo: 1,\r\n        size: 100,\r\n        searchForImageIn: 'categories',\r\n    }\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    return { identity, navigation, query }\r\n}\r\n\r\nexport default metaPage;\r\n"]},"metadata":{},"sourceType":"module"}