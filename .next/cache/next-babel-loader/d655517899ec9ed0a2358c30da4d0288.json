{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../components/layouts/AppLayout';\nimport { getMultipleSetting } from '../_variables/ajaxVariables';\nimport SiteSettingSetter from '../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport { getAbsolutePath } from '../_variables/_variables';\n\nconst Error = props => {\n  const {\n    0: settings,\n    1: setSettings\n  } = useState({});\n  useEffect(() => {\n    getMultipleSetting({\n      settings: ['identity', 'navigation', 'design']\n    }).then(res => {\n      settings(_objectSpread({}, settings, {}, res.data.settings));\n    });\n  }, [props]);\n\n  const RenderSettings = () => {\n    if (settings.identity) {\n      return __jsx(SiteSettingSetter, settings);\n    } else return null;\n  };\n\n  return __jsx(AppLayout, null, __jsx(RenderSettings, null), __jsx(\"p\", null, props.statusCode ? `An error ${props.statusCode} occurred on server` : 'An error occurred on client'));\n};\n\nError.getInitialProps = async ({\n  req,\n  res,\n  err\n}) => {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;\n  const data = res.settingData;\n  const domainName = req ? await getAbsolutePath(req) : '';\n  let settings;\n  const settingsData = await getMultipleSetting({\n    settings: ['identity', 'navigation', 'design']\n  }, true, domainName);\n  settings = settingsData.data.settings ? settingsData.data.settings : [];\n  return {\n    statusCode,\n    settings\n  };\n};\n\nexport default Error;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/_error.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getMultipleSetting","SiteSettingSetter","getAbsolutePath","Error","props","settings","setSettings","then","res","data","RenderSettings","identity","statusCode","getInitialProps","req","err","settingData","domainName","settingsData"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,iCAAtB;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,OAAOC,iBAAP,MAA8B,8DAA9B;AACA,SAASC,eAAT,QAAgC,0BAAhC;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAAI;AACnB,QAAM;AAAA,OAAEC,QAAF;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,EAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,kBAAkB,CAAC;AAAEK,MAAAA,QAAQ,EAAE,CAAE,UAAF,EAAc,YAAd,EAA4B,QAA5B;AAAZ,KAAD,CAAlB,CAAyEE,IAAzE,CAA8EC,GAAG,IAAI;AACjFH,MAAAA,QAAQ,mBACDA,QADC,MAEDG,GAAG,CAACC,IAAJ,CAASJ,QAFR,EAAR;AAIH,KALD;AAMH,GAPQ,EAON,CAAED,KAAF,CAPM,CAAT;;AASA,QAAMM,cAAc,GAAG,MAAM;AACzB,QAAIL,QAAQ,CAACM,QAAb,EAAuB;AACnB,aACI,MAAC,iBAAD,EAAwBN,QAAxB,CADJ;AAGH,KAJD,MAIO,OAAO,IAAP;AACV,GAND;;AAQA,SACI,MAAC,SAAD,QACI,MAAC,cAAD,OADJ,EAEI,iBACMD,KAAK,CAACQ,UAAN,GACK,YAAYR,KAAK,CAACQ,UAAY,qBADnC,GAEI,6BAHV,CAFJ,CADJ;AAUH,CA9BD;;AAgCAT,KAAK,CAACU,eAAN,GAAwB,OAAO;AAAEC,EAAAA,GAAF;AAAON,EAAAA,GAAP;AAAYO,EAAAA;AAAZ,CAAP,KAA6B;AACjD,QAAMH,UAAU,GAAGJ,GAAG,GAAGA,GAAG,CAACI,UAAP,GAAoBG,GAAG,GAAGA,GAAG,CAACH,UAAP,GAAoB,GAAjE;AACA,QAAMH,IAAI,GAAGD,GAAG,CAACQ,WAAjB;AACA,QAAMC,UAAU,GAAGH,GAAG,GAAG,MAAMZ,eAAe,CAACY,GAAD,CAAxB,GAAgC,EAAtD;AACA,MAAIT,QAAJ;AACA,QAAMa,YAAY,GAAG,MAAMlB,kBAAkB,CAAC;AAAEK,IAAAA,QAAQ,EAAE,CAAE,UAAF,EAAc,YAAd,EAA4B,QAA5B;AAAZ,GAAD,EAAuD,IAAvD,EAA6DY,UAA7D,CAA7C;AACAZ,EAAAA,QAAQ,GAAGa,YAAY,CAACT,IAAb,CAAkBJ,QAAlB,GAA6Ba,YAAY,CAACT,IAAb,CAAkBJ,QAA/C,GAA0D,EAArE;AAEA,SAAO;AAAEO,IAAAA,UAAF;AAAcP,IAAAA;AAAd,GAAP;AACH,CATD;;AAWA,eAAeF,KAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../components/layouts/AppLayout'\r\nimport { getMultipleSetting } from '../_variables/ajaxVariables'\r\nimport SiteSettingSetter from '../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport { getAbsolutePath } from '../_variables/_variables'\r\n\r\nconst Error = props => {\r\n    const [ settings, setSettings ] = useState({})\r\n\r\n    useEffect(() => {\r\n        getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }).then(res => {\r\n            settings({\r\n                ...settings,\r\n                ...res.data.settings\r\n            })\r\n        })\r\n    }, [ props ]);\r\n\r\n    const RenderSettings = () => {\r\n        if (settings.identity) {\r\n            return (\r\n                <SiteSettingSetter { ...settings }/>\r\n            )\r\n        } else return null\r\n    }\r\n\r\n    return (\r\n        <AppLayout>\r\n            <RenderSettings/>\r\n            <p>\r\n                { props.statusCode\r\n                    ? `An error ${ props.statusCode } occurred on server`\r\n                    : 'An error occurred on client' }\r\n            </p>\r\n        </AppLayout>\r\n    )\r\n}\r\n\r\nError.getInitialProps = async ({ req, res, err }) => {\r\n    const statusCode = res ? res.statusCode : err ? err.statusCode : 404\r\n    const data = res.settingData\r\n    const domainName = req ? await getAbsolutePath(req) : ''\r\n    let settings;\r\n    const settingsData = await getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }, true, domainName)\r\n    settings = settingsData.data.settings ? settingsData.data.settings : []\r\n\r\n    return { statusCode, settings }\r\n}\r\n\r\nexport default Error\r\n"]},"metadata":{},"sourceType":"module"}