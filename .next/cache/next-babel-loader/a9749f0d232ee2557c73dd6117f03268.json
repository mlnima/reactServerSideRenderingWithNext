{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../../../context/AppContext\";\nimport { getPosts, postsBulkAction, emptyTrash } from \"../../../../../variables/_ajaxPostsVariable\";\n\nconst FilterDropDownActions = props => {\n  const bulkAction = useRef(null);\n  const typeToDisplay = useRef(null);\n  let contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  useEffect(() => {\n    typeToDisplay.current.value = contextData.postsData.type;\n  }, []); // useEffect(()=>{\n  //     console.log( contextData.postsData.checkedPosts)\n  // },[ contextData.postsData.checkedPosts]);\n  //\n  // const setData = ()=>{\n  //     getPosts(\n  //         contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo,\n  //         ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status,\n  //         contextData.postsData.author, contextData.postsData.keyword).then(res => {\n  //         contextData.setPostsData({\n  //             ...contextData.postsData,\n  //             posts: res.data.posts,\n  //             error: res.data.error,\n  //             totalCount: res.data.totalCount\n  //         });\n  //         contextData.setState({\n  //             ...contextData.state,\n  //             loading: false\n  //         });\n  //     }).catch(() => {\n  //         contextData.setState({\n  //             ...contextData.state,\n  //             login: false\n  //         })\n  //     })\n  // }\n\n  const onFormatChangeHandler = () => {\n    if (bulkAction.current.value !== 'none') {\n      contextData.setState(_objectSpread({}, contextData.state, {\n        loading: true\n      }));\n      postsBulkAction(contextData.postsData.checkedPosts, bulkAction.current.value).then(() => {\n        setData();\n      }).catch(err => {\n        contextData.setState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }); // contextData.setPostsData({\n      //     ...contextData.postsData,\n      //     statusActionForCheckedPosts: bulkAction.current.value\n      // })\n    }\n  }; // if (contextData.postsData.statusActionForCheckedPosts !== 'none'){\n  //     updateManyPostStatus(contextData.postsData.checkedPosts,contextData.postsData.statusActionForCheckedPosts)\n  // }\n\n\n  const onFormatChangeSubmitHandler = () => {};\n\n  const changePostsTypeToDisplay = e => {\n    if (e.target.value !== 'none') {\n      contextData.setPostsData(_objectSpread({}, contextData.postsData, {\n        type: e.target.value\n      }));\n    }\n  };\n\n  const onEmptyTrashHandler = () => {\n    emptyTrash().then(res => {\n      if (res.data.error) {\n        contextData.setState(_objectSpread({}, contextData.state, {\n          report: res.data.message,\n          reportColor: 'red'\n        }));\n      } else {\n        contextData.setState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n        setData();\n        contextData.setState(_objectSpread({}, contextData.state, {\n          report: res.data.message,\n          reportColor: 'green'\n        }));\n      }\n    }).catch(() => {\n      contextData.setState(_objectSpread({}, contextData.state, {\n        report: 'Can Not Communicate With Server'\n      }));\n    });\n  };\n\n  const EmptyTrash = () => {\n    if (contextData.postsData.status === 'Trash') {\n      return __jsx(\"button\", {\n        onClick: () => onEmptyTrashHandler()\n      }, \"Empty Trash\");\n    } else return null;\n  };\n\n  return __jsx(\"div\", {\n    className: \"FilterDropDownActions\"\n  }, __jsx(\"div\", {\n    className: \"bulkAction\"\n  }, __jsx(\"select\", {\n    ref: bulkAction,\n    placeholder: \"Bulk Actions\"\n  }, __jsx(\"option\", {\n    value: \"none\"\n  }, \"Bulk Actions\"), __jsx(\"option\", {\n    value: \"Published\"\n  }, \"Published\"), __jsx(\"option\", {\n    value: \"Draft\"\n  }, \"Draft\"), __jsx(\"option\", {\n    value: \"Trash\"\n  }, \"Trash\")), __jsx(\"button\", {\n    className: \"actionBtn\",\n    onClick: () => onFormatChangeHandler()\n  }, \"Apply\")), __jsx(\"div\", {\n    className: \"DateCategoryFotmat\"\n  }, __jsx(\"select\", {\n    ref: typeToDisplay,\n    onChange: e => changePostsTypeToDisplay(e)\n  }, __jsx(\"option\", {\n    value: \"Video\"\n  }, \"Video\"), __jsx(\"option\", {\n    value: \"Standard\"\n  }, \"Standard\"))), __jsx(EmptyTrash, null));\n};\n\nexport default FilterDropDownActions;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostsComponents/Filters/FilterDropDownActions.js"],"names":["React","useEffect","useState","useContext","useRef","AppContext","getPosts","postsBulkAction","emptyTrash","FilterDropDownActions","props","bulkAction","typeToDisplay","contextData","state","setState","current","value","postsData","type","onFormatChangeHandler","loading","checkedPosts","then","setData","catch","err","onFormatChangeSubmitHandler","changePostsTypeToDisplay","e","target","setPostsData","onEmptyTrashHandler","res","data","error","report","message","reportColor","EmptyTrash","status"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext, useRef} from 'react';\r\nimport {AppContext} from \"../../../../../../context/AppContext\";\r\nimport {getPosts, postsBulkAction,emptyTrash} from \"../../../../../variables/_ajaxPostsVariable\";\r\n\r\nconst FilterDropDownActions = props => {\r\n    const bulkAction = useRef(null);\r\n    const typeToDisplay = useRef(null);\r\n    let contextData = useContext(AppContext);\r\n    const [state, setState] = useState({});\r\n    useEffect(() => {\r\n        typeToDisplay.current.value = contextData.postsData.type\r\n    }, []);\r\n\r\n    // useEffect(()=>{\r\n    //     console.log( contextData.postsData.checkedPosts)\r\n    // },[ contextData.postsData.checkedPosts]);\r\n    //\r\n    // const setData = ()=>{\r\n    //     getPosts(\r\n    //         contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo,\r\n    //         ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status,\r\n    //         contextData.postsData.author, contextData.postsData.keyword).then(res => {\r\n    //         contextData.setPostsData({\r\n    //             ...contextData.postsData,\r\n    //             posts: res.data.posts,\r\n    //             error: res.data.error,\r\n    //             totalCount: res.data.totalCount\r\n    //         });\r\n    //         contextData.setState({\r\n    //             ...contextData.state,\r\n    //             loading: false\r\n    //         });\r\n    //     }).catch(() => {\r\n    //         contextData.setState({\r\n    //             ...contextData.state,\r\n    //             login: false\r\n    //         })\r\n    //     })\r\n    // }\r\n    const onFormatChangeHandler = () => {\r\n        if (bulkAction.current.value !== 'none') {\r\n            contextData.setState({\r\n                ...contextData.state,\r\n                loading:true\r\n            });\r\n            postsBulkAction(contextData.postsData.checkedPosts,bulkAction.current.value).then(()=>{\r\n               setData()\r\n            }).catch(err=>{\r\n                contextData.setState({\r\n                    ...contextData.state,\r\n                    loading:false\r\n                })\r\n            })\r\n\r\n            // contextData.setPostsData({\r\n            //     ...contextData.postsData,\r\n            //     statusActionForCheckedPosts: bulkAction.current.value\r\n            // })\r\n        }\r\n    };\r\n    // if (contextData.postsData.statusActionForCheckedPosts !== 'none'){\r\n    //     updateManyPostStatus(contextData.postsData.checkedPosts,contextData.postsData.statusActionForCheckedPosts)\r\n    // }\r\n\r\n    const onFormatChangeSubmitHandler=()=>{\r\n\r\n    }\r\n\r\n    const changePostsTypeToDisplay = e=>{\r\n        if (e.target.value !== 'none') {\r\n            contextData.setPostsData({\r\n                ...contextData.postsData,\r\n                type: e.target.value\r\n            })\r\n        }\r\n    };\r\n\r\n\r\n    const onEmptyTrashHandler = ()=>{\r\n        emptyTrash().then(res=>{\r\n            if (res.data.error){\r\n                contextData.setState({\r\n                    ...contextData.state,\r\n                    report:res.data.message,\r\n                    reportColor:'red'\r\n                })\r\n            }else {\r\n                contextData.setState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                });\r\n                setData();\r\n                contextData.setState({\r\n                    ...contextData.state,\r\n                    report:res.data.message,\r\n                    reportColor:'green'\r\n                })\r\n            }\r\n        }).catch(()=>{\r\n            contextData.setState({\r\n                ...contextData.state,\r\n                report:'Can Not Communicate With Server'\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    const EmptyTrash =()=>{\r\n        if (contextData.postsData.status === 'Trash'){\r\n            return (\r\n                <button onClick={()=>onEmptyTrashHandler()}>Empty Trash</button>\r\n            )\r\n        }else return null\r\n    };\r\n\r\n    return (\r\n        <div className='FilterDropDownActions'>\r\n            <div className=\"bulkAction\">\r\n                <select ref={bulkAction} placeholder='Bulk Actions' >\r\n                    <option value='none'>Bulk Actions</option>\r\n                    <option value='Published'>Published</option>\r\n                    <option value='Draft'>Draft</option>\r\n                    <option value='Trash'>Trash</option>\r\n                </select>\r\n                <button className='actionBtn' onClick={() => onFormatChangeHandler()}>Apply</button>\r\n            </div>\r\n            <div className=\"DateCategoryFotmat\">\r\n                {/*<select>*/}\r\n                {/*    <option>All dates</option>*/}\r\n                {/*</select>*/}\r\n                {/*<select>*/}\r\n                {/*    <option>All Posts Categories</option>*/}\r\n                {/*</select>*/}\r\n                <select ref={typeToDisplay} onChange={e => changePostsTypeToDisplay(e)}>\r\n                    {/*<option value='none'>All formats</option>*/}\r\n                    <option value='Video'>Video</option>\r\n                    <option value='Standard'>Standard</option>\r\n                </select>\r\n            </div>\r\n            <EmptyTrash/>\r\n        </div>\r\n    );\r\n};\r\nexport default FilterDropDownActions;"]},"metadata":{},"sourceType":"module"}