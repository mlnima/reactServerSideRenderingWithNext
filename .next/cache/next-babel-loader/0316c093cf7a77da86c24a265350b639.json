{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport ActorElement from '../../../components/includes/ActorElement/ActorElement';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\nimport withRouter from 'next/dist/client/with-router';\n\nconst actors = props => {\n  const renderActors = props.actorsSource.metas.map(meta => {\n    return __jsx(ActorElement, {\n      key: meta._id,\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: \"actors\"\n  }, renderActors), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getActorsData.pageNo,\n    totalCount: props.actorsSource.totalCount,\n    size: props.getActorsData.size,\n    maxPage: Math.ceil(parseInt(props.actorsSource.totalCount) / parseInt(props.getActorsData.size)) - 1,\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })));\n};\n\nactors.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let actorsSource;\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  const getActorsData = {\n    type: 'actor',\n    searchForImageIn: 'actors',\n    pageNo: parseInt(query.page) || 1,\n    size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) || 30,\n    sort: query.sort || 'latest'\n  };\n  const categoriesData = await getMeta(getActorsData);\n  actorsSource = categoriesData.data ? categoriesData.data : [];\n  return {\n    identity,\n    navigation,\n    query,\n    actorsSource,\n    getActorsData,\n    pathname\n  };\n};\n\nexport default withRouter(actors);","map":null,"metadata":{},"sourceType":"module"}