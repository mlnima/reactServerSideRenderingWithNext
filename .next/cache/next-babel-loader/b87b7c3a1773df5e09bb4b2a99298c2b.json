{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport './UploadedPopView.scss';\nimport { fileTypeDetector } from '../../../../_variables/_variables';\n\nvar UploadedPopView = function UploadedPopView(props) {\n  var _useState = useState({\n    darkStyle: {\n      backgroundColor: 'black'\n    },\n    lightStyle: {\n      backgroundColor: 'white'\n    }\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {}, []);\n\n  var onCloseHandler = function onCloseHandler() {\n    // props.setStateHandler('path', itemPath)\n    //props.setStateHandler('clickedItem','')\n    props.setState(_objectSpread({}, props.state, {\n      clickedItem: '',\n      path: props.state.prevPath\n    }));\n  };\n\n  var WhatToRender = function WhatToRender(data) {\n    switch (data.fileType) {\n      case 'image':\n        return __jsx(React.Fragment, null, __jsx(\"img\", {\n          className: \"uploaded-pop-view-image\",\n          src: window.location.origin + '/' + props.state.clickedItem.replace('./', '')\n        }), __jsx(\"input\", {\n          className: \"uploaded-pop-view-url\",\n          value: '/' + props.state.clickedItem.replace('./', '')\n        }), __jsx(\"input\", {\n          className: \"uploaded-pop-view-url\",\n          value: window.location.origin + '/' + props.state.clickedItem.replace('./', '')\n        }));\n        break;\n\n      case 'video':\n        return __jsx(React.Fragment, null, __jsx(\"video\", {\n          className: \"uploaded-pop-view-image\",\n          controls: true\n        }, __jsx(\"source\", {\n          src: window.location.origin + '/' + props.state.clickedItem.replace('./', '')\n        })), __jsx(\"input\", {\n          className: \"uploaded-pop-view-url\",\n          value: '/' + props.state.clickedItem.replace('./', '')\n        }), __jsx(\"input\", {\n          className: \"uploaded-pop-view-url\",\n          value: window.location.origin + '/' + props.state.clickedItem.replace('./', '')\n        }));\n        break;\n\n      default:\n        return null;\n    }\n  };\n\n  if (props.clickedItem) {\n    var fileType = fileTypeDetector(props.state.clickedItemName);\n    return __jsx(\"div\", {\n      className: \"uploaded-pop-view\"\n    }, __jsx(\"button\", {\n      className: \"closeBtn\",\n      onClick: function onClick() {\n        return onCloseHandler();\n      }\n    }, \"X\"), __jsx(\"div\", {\n      className: \"gallery-pop-view-content\",\n      style: state.lightStyle\n    }, __jsx(WhatToRender, {\n      fileType: fileType\n    })));\n  } else return null;\n};\n\nexport default UploadedPopView;","map":null,"metadata":{},"sourceType":"module"}