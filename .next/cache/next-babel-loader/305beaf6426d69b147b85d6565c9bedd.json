{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport { getSetting, getWidgetsWithData } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport ActorElement from '../../../components/includes/ActorElement/ActorElement';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\nimport withRouter from 'next/dist/client/with-router';\nimport SideBar from '../../../components/includes/Sidebar/Sidebar';\nimport Footer from '../../../components/includes/Footer/Footer';\n\nconst actors = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    style: {}\n  });\n  const renderActors = props.actorsSource.metas.map(meta => {\n    return __jsx(ActorElement, {\n      key: props.actorsSource.metas.indexOf(meta),\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  useEffect(() => {\n    console.log(props);\n\n    if (props.identity.actorsPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    style: state.style,\n    className: props.identity.actorsPageSidebar ? 'content withSidebar' : 'content withOutSidebar'\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"actors\"\n  }, renderActors), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getActorsData.pageNo,\n    totalCount: props.actorsSource.totalCount,\n    size: props.getActorsData.size,\n    maxPage: Math.ceil(parseInt(props.actorsSource.totalCount) / parseInt(props.getActorsData.size)) - 1,\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })), __jsx(SideBar, {\n    key: \"actorsPageSidebar\",\n    isActive: props.identity.actorsPageSidebar,\n    widgets: props.widgets,\n    position: \"actorsPageSidebar\"\n  })), __jsx(Footer, null)));\n};\n\nactors.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let actorsSource;\n  let widgets;\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  const widgetsData = await getWidgetsWithData('actorsPageSidebar');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n  const getActorsData = {\n    type: 'actor',\n    searchForImageIn: 'actors',\n    pageNo: parseInt(query.page) || 1,\n    size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) || 30,\n    sort: query.sort || 'latest'\n  };\n  const categoriesData = await getMeta(getActorsData);\n  actorsSource = categoriesData.data ? categoriesData.data : [];\n  return {\n    identity,\n    navigation,\n    query,\n    actorsSource,\n    getActorsData,\n    pathname,\n    widgets\n  };\n};\n\nexport default withRouter(actors);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/actors/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","AppContext","TagElement","getSetting","getWidgetsWithData","getMeta","CategoryElement","ActorElement","SiteSettingSetter","PaginationComponent","withRouter","SideBar","Footer","actors","props","state","setState","style","renderActors","actorsSource","metas","map","meta","indexOf","imageUrl","noImageUrl","name","count","console","log","identity","actorsPageSidebar","gridArea","getActorsData","pageNo","totalCount","size","Math","ceil","parseInt","query","router","pathname","widgets","getInitialProps","req","res","err","navigation","identityData","navigationData","widgetsData","data","setting","type","searchForImageIn","page","tagsCountPerPage","sort","categoriesData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport TagElement from '../../../components/includes/TagElement/TagElement'\r\nimport { getSetting, getWidgetsWithData } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement'\r\nimport ActorElement from '../../../components/includes/ActorElement/ActorElement'\r\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent'\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport SideBar from '../../../components/includes/Sidebar/Sidebar'\r\nimport Footer from '../../../components/includes/Footer/Footer'\r\n\r\nconst actors = props => {\r\n    const [ state, setState ] = useState({\r\n        style: {}\r\n    })\r\n    const renderActors = props.actorsSource.metas.map(meta => {\r\n        return (\r\n            <ActorElement key={ props.actorsSource.metas.indexOf(meta) } imageUrl={ meta.imageUrl } noImageUrl={ meta.noImageUrl } name={ meta.name } count={ meta.count }/>\r\n        )\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        if (props.identity.actorsPageSidebar) {\r\n            setState({\r\n                style: {\r\n                    gridArea: 'content'\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [ props ]);\r\n    return (\r\n        <>\r\n            <AppLayout>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <div style={ state.style } className={ props.identity.actorsPageSidebar ? 'content withSidebar' : 'content withOutSidebar' }>\r\n                    <div>\r\n                        <div className='actors'>\r\n                            { renderActors }\r\n                        </div>\r\n                        <PaginationComponent\r\n                            isActive={ true }\r\n                            currentPage={ props.getActorsData.pageNo }\r\n                            totalCount={ props.actorsSource.totalCount }\r\n                            size={ props.getActorsData.size }\r\n                            maxPage={ Math.ceil(parseInt(props.actorsSource.totalCount) / parseInt(props.getActorsData.size)) - 1 }\r\n                            queryData={ props.query || props.router.query }\r\n                            pathnameData={ props.pathname || props.router.pathname }\r\n                        />\r\n                    </div>\r\n                    <SideBar key='actorsPageSidebar' isActive={ props.identity.actorsPageSidebar } widgets={ props.widgets } position='actorsPageSidebar'/>\r\n                </div>\r\n                <Footer/>\r\n            </AppLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nactors.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let actorsSource;\r\n    let widgets;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    const widgetsData = await getWidgetsWithData('actorsPageSidebar')\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    widgets = widgetsData.data.widgets ? widgetsData.data.widgets : []\r\n    const getActorsData = {\r\n        type: 'actor',\r\n        searchForImageIn: 'actors',\r\n        pageNo: parseInt(query.page) || 1,\r\n        size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) || 30,\r\n        sort: query.sort || 'latest',\r\n    }\r\n\r\n    const categoriesData = await getMeta(getActorsData)\r\n    actorsSource = categoriesData.data ? categoriesData.data : []\r\n\r\n    return { identity, navigation, query, actorsSource, getActorsData, pathname, widgets }\r\n}\r\nexport default withRouter(actors);\r\n"]},"metadata":{},"sourceType":"module"}