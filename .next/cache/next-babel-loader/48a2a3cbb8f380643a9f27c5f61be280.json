{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from \"../../../components/layouts/AppLayout\";\nimport { getSetting, getWidgetsWithData } from '../../../_variables/ajaxVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport withRouter from 'next/dist/client/with-router';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport RenderMetaDataPages from '../../../components/includes/RenderMetaDataPages/RenderMetaDataPages';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\nimport CategoriesSidebar from '../../../components/includes/pages/Categories/CategoriesSidebar/CategoriesSidebar';\nimport SideBar from '../../../components/includes/SideBar/SideBar'; // import './categories.scss'import './categories.scss'\n\nconst categories = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    style: {}\n  });\n  useEffect(() => {\n    console.log(props);\n\n    if (props.identity.categoriesPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n  const renderCategories = props.categoriesSource.metas.map(meta => {\n    return __jsx(CategoryElement, {\n      key: meta._id,\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    style: state.style,\n    className: props.identity.categoriesPageSidebar ? 'content withSidebar' : 'content withOutSidebar'\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"categories\"\n  }, renderCategories), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getCategoriesData.pageNo,\n    totalCount: props.categoriesSource.totalCount,\n    size: props.getCategoriesData.size,\n    maxPage: Math.ceil(parseInt(props.categoriesSource.totalCount) / parseInt(props.getCategoriesData.size)) - 1,\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })), __jsx(SideBar, {\n    isActive: props.identity.categoriesPageSidebar,\n    widgets: props.widgets,\n    position: \"categoriesPageSidebar\"\n  }))));\n};\n\ncategories.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let widgets;\n  let categoriesSource;\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n  const widgetsData = await getWidgetsWithData('categoriesPageSidebar');\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n  const getCategoriesData = {\n    type: 'category',\n    searchForImageIn: 'categories',\n    pageNo: parseInt(query.page) || 1,\n    size: parseInt(query.size) || parseInt(identity.postsCountPerPage) || 30,\n    sort: query.sort || 'latest'\n  };\n  const categoriesData = await getMeta(getCategoriesData);\n  categoriesSource = categoriesData.data ? categoriesData.data : [];\n  return {\n    identity,\n    navigation,\n    query,\n    categoriesSource,\n    getCategoriesData,\n    pathname,\n    widgets\n  };\n};\n\nexport default withRouter(categories);","map":null,"metadata":{},"sourceType":"module"}