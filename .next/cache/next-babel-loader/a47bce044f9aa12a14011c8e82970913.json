{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport DropDownWidget from \"../DropDownWidget/DropDownWidget\";\nimport { AppContext } from \"../../../../context/AppContext\";\nimport FA from \"react-fontawesome\";\nimport withRouter from \"next/dist/client/with-router\";\nimport { updatePost, savePost } from '../../../../_variables/ajaxPostsVariables';\n\nconst ActionOnPost = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  useEffect(() => {}, []);\n\n  const onSaveHandler = () => {\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n\n    if (props.postData._id) {\n      // contextData.functions.updatePost(contextData.editingPostData)\n      updatePost(props.postData, window.location.origin).then(() => {\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }).catch(err => {\n        console.log(err);\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      });\n    } else {\n      savePost(props.postData, window.location.origin).then(res => {\n        props.router.push('/admin/post?id=' + res.data.savedPostData._id);\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      }).catch(err => {\n        contextData.dispatchAlert(_objectSpread({}, contextData.alert, {\n          active: true,\n          alertMessage: err.response.data.error,\n          type: 'error'\n        }));\n        contextData.dispatchState(_objectSpread({}, contextData.state, {\n          loading: false\n        }));\n      });\n    }\n  };\n\n  const onPreviewHandler = () => {\n    props.router.push('/' + props.postData.title);\n  };\n\n  return __jsx(\"div\", {\n    className: \"ActionOnPost\"\n  }, __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"button\", {\n    className: \"previewBtn\",\n    onClick: () => onPreviewHandler()\n  }, \"Preview\")), __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"select\", {\n    name: \"status\",\n    value: props.postData.status,\n    onChange: e => props.onChangeHandler(e)\n  }, __jsx(\"option\", {\n    value: \"published\"\n  }, \"Published\"), __jsx(\"option\", {\n    value: \"draft\"\n  }, \"Draft\"), __jsx(\"option\", {\n    value: \"trash\"\n  }, \"Trash\"))), __jsx(\"div\", {\n    className: \"ActionOnPostItem\"\n  }, __jsx(\"button\", {\n    className: \"SaveBtn\",\n    onClick: () => onSaveHandler()\n  }, \"Save\")));\n};\n\nActionOnPost.getInitialProps = async ({\n  query\n}) => {\n  return {\n    query\n  };\n};\n\nexport default withRouter(ActionOnPost);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost.js"],"names":["React","useEffect","useState","useContext","DropDownWidget","AppContext","FA","withRouter","updatePost","savePost","ActionOnPost","props","contextData","state","setState","onSaveHandler","dispatchState","loading","postData","_id","window","location","origin","then","catch","err","console","log","res","router","push","data","savedPostData","dispatchAlert","alert","active","alertMessage","response","error","type","onPreviewHandler","title","status","e","onChangeHandler","getInitialProps","query"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport DropDownWidget from \"../DropDownWidget/DropDownWidget\";\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport FA from \"react-fontawesome\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport { updatePost, savePost } from '../../../../_variables/ajaxPostsVariables'\r\n\r\nconst ActionOnPost = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ state, setState ] = useState({});\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const onSaveHandler = () => {\r\n        contextData.dispatchState({\r\n            ...contextData.state,\r\n            loading: true\r\n        })\r\n        if (props.postData._id) {\r\n            // contextData.functions.updatePost(contextData.editingPostData)\r\n            updatePost(props.postData, window.location.origin).then(() => {\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n            }).catch(err => {\r\n                console.log(err)\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n            })\r\n        } else {\r\n            savePost(props.postData, window.location.origin).then(res => {\r\n\r\n                props.router.push('/admin/post?id=' + res.data.savedPostData._id)\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n            }).catch(err => {\r\n\r\n                contextData.dispatchAlert({\r\n                    ...contextData.alert,\r\n                    active: true,\r\n                    alertMessage: err.response.data.error,\r\n                    type: 'error'\r\n                })\r\n                contextData.dispatchState({\r\n                    ...contextData.state,\r\n                    loading: false\r\n                })\r\n            })\r\n        }\r\n    };\r\n\r\n    const onPreviewHandler = () => {\r\n    props.router.push('/'+ props.postData.title)\r\n    }\r\n    return (\r\n        <div className='ActionOnPost'>\r\n            <div className='ActionOnPostItem'>\r\n                <button className='previewBtn' onClick={ () => onPreviewHandler() }>Preview</button>\r\n            </div>\r\n            <div className='ActionOnPostItem'>\r\n                <select name='status' value={ props.postData.status } onChange={ e => props.onChangeHandler(e) }>\r\n                    <option value='published'>Published</option>\r\n                    <option value='draft'>Draft</option>\r\n                    <option value='trash'>Trash</option>\r\n                </select>\r\n            </div>\r\n            <div className='ActionOnPostItem'>\r\n                <button className='SaveBtn' onClick={ () => onSaveHandler() }>Save</button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nActionOnPost.getInitialProps = async ({ query }) => {\r\n\r\n    return { query }\r\n};\r\nexport default withRouter(ActionOnPost);"]},"metadata":{},"sourceType":"module"}