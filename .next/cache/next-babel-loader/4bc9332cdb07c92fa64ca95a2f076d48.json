{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport Link from 'next/link';\nimport withRouter from 'next/dist/client/with-router';\n\nconst PaginationComponent = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    pages: [],\n    elements: []\n  });\n\n  let numberGen = current => {\n    console.log(current);\n    let numArr = [];\n\n    if (current === 1) {\n      for (let i = 1; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current === 2) {\n      numArr.push(1);\n\n      for (let i = 2; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current === 3) {\n      numArr.push(1);\n      numArr.push(2);\n\n      for (let i = 3; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current > 3) {\n      let min = current - 3;\n      let max = current + 3;\n\n      for (let i = current; i <= max; i++) {\n        numArr.push(i);\n      }\n\n      for (let i = current; i >= min; i--) {\n        numArr.push(i);\n      }\n    }\n\n    if (current > 3) {\n      numArr.push(1);\n    }\n\n    if (Math.ceil(props.totalCount / props.size)) {\n      numArr.push(parseInt(props.maxPage) - 1);\n    }\n\n    numArr = [...new Set(numArr)];\n    numArr = numArr.sort((x, y) => {\n      return x - y;\n    });\n    return numArr;\n  };\n\n  useEffect(() => {\n    setState({\n      pages: numberGen(props.currentPage)\n    });\n  }, [props]);\n  useEffect(() => {\n    console.log(props);\n    console.log(state);\n  }, [props]);\n  const renderPaginationItems = numberGen(props.currentPage).map(page => {\n    if (props.router) {\n      let newQueryData = props.router.query;\n      newQueryData.page = page;\n      console.log(newQueryData);\n      return __jsx(Link, {\n        href: {\n          pathname: props.router.pathname,\n          query: newQueryData\n        }\n      }, __jsx(\"a\", null, page));\n    } // let path = props.router.pathname ? props.router.pathname + '?' : ''\n    // for (const item in props.router.query){\n    //     let string = item === 'page'? `${item}=${page}` : `${item}=${props.router.query[item]}`\n    //     path += '&' + string\n    // }\n\n  });\n\n  if (props.isActive) {\n    return __jsx(\"div\", {\n      className: \"pagination\"\n    }, renderPaginationItems);\n  } else return null;\n};\n\nexport default withRouter(PaginationComponent);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/includes/PaginationComponent/PaginationComponent.js"],"names":["React","useEffect","useState","useContext","useRef","Link","withRouter","PaginationComponent","props","state","setState","pages","elements","numberGen","current","console","log","numArr","i","push","min","max","Math","ceil","totalCount","size","parseInt","maxPage","Set","sort","x","y","currentPage","renderPaginationItems","map","page","router","newQueryData","query","pathname","isActive"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,MAAMC,mBAAmB,GAAGC,KAAK,IAAI;AACjC,QAAM;AAAA,OAAEC,KAAF;AAAA,OAASC;AAAT,MAAsBR,QAAQ,CAAC;AACjCS,IAAAA,KAAK,EAAE,EAD0B;AAEjCC,IAAAA,QAAQ,EAAC;AAFwB,GAAD,CAApC;;AAKA,MAAIC,SAAS,GAAIC,OAAD,IAAa;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAaF,OAAb;AACA,QAAIG,MAAM,GAAG,EAAb;;AACA,QAAIH,OAAO,KAAK,CAAhB,EAAmB;AACf,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;AACJ;;AACD,QAAIJ,OAAO,KAAK,CAAhB,EAAmB;AACfG,MAAAA,MAAM,CAACE,IAAP,CAAY,CAAZ;;AACA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;AACJ;;AACD,QAAIJ,OAAO,KAAK,CAAhB,EAAmB;AACfG,MAAAA,MAAM,CAACE,IAAP,CAAY,CAAZ;AACAF,MAAAA,MAAM,CAACE,IAAP,CAAY,CAAZ;;AACA,WAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;AACJ;;AACD,QAAIJ,OAAO,GAAG,CAAd,EAAiB;AACb,UAAIM,GAAG,GAAGN,OAAO,GAAG,CAApB;AACA,UAAIO,GAAG,GAAGP,OAAO,GAAG,CAApB;;AACA,WAAK,IAAII,CAAC,GAAGJ,OAAb,EAAsBI,CAAC,IAAIG,GAA3B,EAAgCH,CAAC,EAAjC,EAAqC;AACjCD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;;AACD,WAAK,IAAIA,CAAC,GAAGJ,OAAb,EAAsBI,CAAC,IAAIE,GAA3B,EAAgCF,CAAC,EAAjC,EAAqC;AACjCD,QAAAA,MAAM,CAACE,IAAP,CAAYD,CAAZ;AACH;AACJ;;AACD,QAAIJ,OAAO,GAAG,CAAd,EAAiB;AACbG,MAAAA,MAAM,CAACE,IAAP,CAAY,CAAZ;AACH;;AACD,QAAIG,IAAI,CAACC,IAAL,CAAUf,KAAK,CAACgB,UAAN,GAAmBhB,KAAK,CAACiB,IAAnC,CAAJ,EAA8C;AAC1CR,MAAAA,MAAM,CAACE,IAAP,CAAYO,QAAQ,CAAClB,KAAK,CAACmB,OAAP,CAAR,GAA0B,CAAtC;AACH;;AAEDV,IAAAA,MAAM,GAAG,CAAE,GAAG,IAAIW,GAAJ,CAAQX,MAAR,CAAL,CAAT;AACAA,IAAAA,MAAM,GAAGA,MAAM,CAACY,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC3B,aAAOD,CAAC,GAAGC,CAAX;AACH,KAFQ,CAAT;AAIA,WAAOd,MAAP;AACH,GA5CD;;AAgDAhB,EAAAA,SAAS,CAAC,MAAM;AAEZS,IAAAA,QAAQ,CAAC;AACLC,MAAAA,KAAK,EAAEE,SAAS,CAACL,KAAK,CAACwB,WAAP;AADX,KAAD,CAAR;AAIH,GANQ,EAMN,CAAExB,KAAF,CANM,CAAT;AASAP,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAZ;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACH,GAHQ,EAGN,CAAED,KAAF,CAHM,CAAT;AAOA,QAAMyB,qBAAqB,GAAEpB,SAAS,CAACL,KAAK,CAACwB,WAAP,CAAT,CAA6BE,GAA7B,CAAiCC,IAAI,IAAE;AAChE,QAAI3B,KAAK,CAAC4B,MAAV,EAAiB;AACb,UAAIC,YAAY,GAAG7B,KAAK,CAAC4B,MAAN,CAAaE,KAAhC;AACAD,MAAAA,YAAY,CAACF,IAAb,GAAoBA,IAApB;AACApB,MAAAA,OAAO,CAACC,GAAR,CAAYqB,YAAZ;AACA,aACI,MAAC,IAAD;AAAM,QAAA,IAAI,EAAE;AACRE,UAAAA,QAAQ,EAAC/B,KAAK,CAAC4B,MAAN,CAAaG,QADd;AACuBD,UAAAA,KAAK,EAACD;AAD7B;AAAZ,SAEG,iBAAIF,IAAJ,CAFH,CADJ;AAKH,KAV+D,CAWhE;AACA;AACA;AACA;AACA;;AAEH,GAjB4B,CAA7B;;AAmBA,MAAI3B,KAAK,CAACgC,QAAV,EAAoB;AAChB,WACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACKP,qBADL,CADJ;AAKH,GAND,MAMO,OAAO,IAAP;AAEV,CAjGD;;AAkGA,eAAe3B,UAAU,CAACC,mBAAD,CAAzB","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport Link from 'next/link'\r\nimport withRouter from 'next/dist/client/with-router'\r\n\r\nconst PaginationComponent = props => {\r\n    const [ state, setState ] = useState({\r\n        pages: [],\r\n        elements:[]\r\n    });\r\n\r\n    let numberGen = (current) => {\r\n        console.log( current)\r\n        let numArr = [];\r\n        if (current === 1) {\r\n            for (let i = 1; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 2) {\r\n            numArr.push(1)\r\n            for (let i = 2; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 3) {\r\n            numArr.push(1)\r\n            numArr.push(2)\r\n            for (let i = 3; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current > 3) {\r\n            let min = current - 3\r\n            let max = current + 3\r\n            for (let i = current; i <= max; i++) {\r\n                numArr.push(i)\r\n            }\r\n            for (let i = current; i >= min; i--) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current > 3) {\r\n            numArr.push(1)\r\n        }\r\n        if (Math.ceil(props.totalCount / props.size)) {\r\n            numArr.push(parseInt(props.maxPage) - 1)\r\n        }\r\n\r\n        numArr = [ ...new Set(numArr) ];\r\n        numArr = numArr.sort((x, y) => {\r\n            return x - y\r\n        });\r\n\r\n        return numArr\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setState({\r\n            pages: numberGen(props.currentPage)\r\n        });\r\n\r\n    }, [ props ]);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        console.log(state)\r\n    }, [ props ]);\r\n\r\n\r\n\r\n    const renderPaginationItems= numberGen(props.currentPage).map(page=>{\r\n        if (props.router){\r\n            let newQueryData = props.router.query;\r\n            newQueryData.page = page\r\n            console.log(newQueryData )\r\n            return(\r\n                <Link href={{\r\n                    pathname:props.router.pathname,query:newQueryData\r\n                }}><a>{page}</a></Link>\r\n            )\r\n        }\r\n        // let path = props.router.pathname ? props.router.pathname + '?' : ''\r\n        // for (const item in props.router.query){\r\n        //     let string = item === 'page'? `${item}=${page}` : `${item}=${props.router.query[item]}`\r\n        //     path += '&' + string\r\n        // }\r\n\r\n    })\r\n\r\n    if (props.isActive) {\r\n        return (\r\n            <div className='pagination'>\r\n                {renderPaginationItems }\r\n            </div>\r\n        );\r\n    } else return null\r\n\r\n};\r\nexport default withRouter(PaginationComponent);\r\n"]},"metadata":{},"sourceType":"module"}