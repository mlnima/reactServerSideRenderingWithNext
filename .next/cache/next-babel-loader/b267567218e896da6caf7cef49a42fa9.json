{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\nimport Link from \"next/link\";\n\nconst Pagination = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    pages: []\n  });\n  useEffect(() => {\n    if (isNaN(props.postsData.pageNo)) {\n      let pageNo = 1;\n      setState({\n        pages: numberGen(pageNo)\n      });\n    } else {\n      setState({\n        pages: numberGen(props.postsData.pageNo)\n      });\n    }\n  }, [props]);\n\n  let numberGen = current => {\n    let numArr = [];\n\n    if (current === 1) {\n      for (let i = 1; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current === 2) {\n      numArr.push(1);\n\n      for (let i = 2; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current === 3) {\n      numArr.push(1);\n      numArr.push(2);\n\n      for (let i = 3; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current > 3) {\n      let min = current - 3;\n      let max = current + 3;\n\n      for (let i = current; i <= max; i++) {\n        numArr.push(i);\n      }\n\n      for (let i = current; i >= min; i--) {\n        numArr.push(i);\n      }\n    }\n\n    if (current > 3) {\n      numArr.push(1);\n    }\n\n    if (Math.ceil(props.postsData.totalCount / props.postsData.size)) {\n      numArr.push(parseInt(props.maxPage) - 1);\n    }\n\n    numArr = [...new Set(numArr)];\n    numArr = numArr.sort((x, y) => {\n      return x - y;\n    });\n    return numArr;\n  };\n\n  let currentPageNumberStyle = number => {\n    let style = {};\n    let normalStyle = {\n      color: 'white'\n    };\n    let activeStyle = {\n      background: 'none',\n      backgroundColor: ' #f90',\n      color: ' #151719',\n      fontWeight: 'bold',\n      fontSize: 'large'\n    };\n\n    if (isNaN(props.activePage)) {\n      let pageNo = 1;\n\n      if (number === pageNo) {\n        style = activeStyle;\n      }\n    } else {\n      if (number === props.activePage) {\n        style = activeStyle;\n      } else {\n        style = normalStyle;\n      }\n    }\n\n    return style;\n  };\n\n  let pageNumbersGenerator = state.pages.map(num => {\n    // let min = parseInt(props.maxPage) -3\n    if (num > 0 && num <= Math.ceil(props.postsData.totalCount / props.postsData.size) - 1) {\n      let numInBtn = num.toString();\n      let path = props.mainLinkUrl + numInBtn; // if (props.type === 'video') {\n      //     path = `/${contextData.state.language}/posts/video/${numInBtn}`;\n      // }\n      // if (props.type === 'farsiStory') {\n      //     path = `/${contextData.state.language}/posts/farsiStory/${numInBtn}`;\n      // }\n      // if (props.type === 'searchVideo') {\n      //     path = `/${contextData.state.language}/posts/searchVideo/${props.match.params.word}/${numInBtn}`;\n      // }\n      // if (props.type === 'searchFarsiStory') {\n      //     path = `${props.mainLinkUrl}${encodeURI(props.match.params.word)}/${numInBtn}`;\n      // }\n      //\n      // if (num === (Math.ceil(props.postsData.totalCount / props.postsData.size))) {\n      //     numInBtn = `... ${num -1}`\n      // }\n\n      return __jsx(Link, {\n        key: num,\n        href: path\n      }, \" \", __jsx(\"a\", {\n        style: currentPageNumberStyle(num)\n      }, __jsx(\"span\", null, \" \", numInBtn, \" \")), \" \");\n    }\n  });\n\n  if (props.pagination) {\n    return __jsx(\"div\", {\n      className: \"Pagination\"\n    }, pageNumbersGenerator);\n  } else {\n    return null;\n  }\n};\n\nexport default Pagination;","map":null,"metadata":{},"sourceType":"module"}