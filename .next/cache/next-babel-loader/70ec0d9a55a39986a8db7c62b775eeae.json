{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from 'next/dist/client/with-router';\nimport AdminLayout from '../../../../components/layouts/AdminLayout'; // import './TextEditor.scss'\n\nvar textEditor = function textEditor(props) {\n  var contextData = useContext(AppContext);\n  var textArea = useRef(null);\n  var message = useRef(null);\n\n  var _useState = useState({\n    file: '',\n    message: 'to leave this page please close text editor'\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    if (contextData.settings.textEditorCurrentFile !== '') {\n      textArea.current.value = contextData.textEditorCurrentFile.textEditorCurrentFile;\n    } else {// props.history.push('/admin/FileManager')\n    }\n  }, [, contextData.settings.textEditorCurrentFile, contextData.settings.textEditorEditMode]);\n\n  var onCloseHandler = function onCloseHandler() {\n    contextData.dispatchSettings(_objectSpread({}, contextData.dispatchSettings, {\n      textEditorCurrentFile: '',\n      textEditorEditMode: false\n    }));\n    props.router.push(props.router.back());\n  };\n\n  var ReadOnlyOrEditHandler = function ReadOnlyOrEditHandler() {\n    if (!contextData.settings.textEditorEditMode) {\n      return __jsx(\"textarea\", {\n        className: \"noEditMode\",\n        ref: textArea,\n        value: contextData.settings.textEditorEditMode\n      });\n    } else return __jsx(\"textarea\", {\n      className: \"EditMode\",\n      ref: textArea\n    });\n  };\n\n  var onEditModeHandler = function onEditModeHandler() {\n    contextData.dispatchSettings(_objectSpread({}, contextData.dispatchSettings, {\n      textEditorEditMode: true\n    }));\n  };\n\n  var onSaveHandler = function onSaveHandler() {};\n\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: \"TextEditor\"\n  }, __jsx(\"div\", {\n    className: \"TextEditorControl\"\n  }, __jsx(\"button\", {\n    className: \"closeBtn fas fa-times\",\n    onClick: function onClick() {\n      return onCloseHandler();\n    }\n  }), __jsx(\"button\", {\n    className: \"editBtn fas fa-edit\",\n    onClick: function onClick() {\n      return onEditModeHandler();\n    }\n  }), __jsx(\"button\", {\n    className: \"editBtn fas fa-save\",\n    onClick: function onClick() {\n      return onSaveHandler();\n    }\n  })), __jsx(\"label\", {\n    ref: message\n  }, state.message), __jsx(ReadOnlyOrEditHandler, null)));\n};\n\nexport default withRouter(textEditor);","map":null,"metadata":{},"sourceType":"module"}