{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport AppLayout from \"../../components/layouts/AppLayout\";\nimport axios from \"axios\";\nimport { getComments, getPost } from \"../../_variables/ajaxPostsVariables\";\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\nimport withRouter from \"next/dist/client/with-router\";\nimport Head from \"next/head\";\nimport { getSetting, getWidgetsWithData, getMultipleWidgetWithData, getMultipleSetting } from \"../../_variables/ajaxVariables\";\nimport { AppContext } from \"../../context/AppContext\";\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport SideBar from '../../components/includes/Sidebar/Sidebar';\nimport CommentFrom from '../../components/includes/Post/CommentFrom/CommentFrom';\nimport CommentsRenderer from '../../components/includes/CommentsRenderer/CommentsRenderer';\nimport Footer from '../../components/includes/Footer/Footer';\n\nconst Post = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    style: {}\n  });\n  useEffect(() => {\n    console.log(props);\n\n    if (props.identity.postPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n\n  const RenderMeta = () => {\n    if (props.post.title) {\n      return __jsx(Head, null, __jsx(\"title\", null, props.post.title), __jsx(\"meta\", {\n        name: \"description\",\n        content: props.post.description\n      }), __jsx(\"meta\", {\n        name: \"keywords\",\n        content: [...props.post.tags, ...props.post.categories, ...props.post.actors]\n      }), __jsx(\"meta\", {\n        property: \"og:title\",\n        content: props.post.title\n      }), __jsx(\"meta\", {\n        property: \"og:type\",\n        content: props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType\n      }), __jsx(\"meta\", {\n        property: \"og:url\",\n        content: props.post.videoEmbedCode\n      }), __jsx(\"meta\", {\n        property: \"og:image\",\n        content: props.post.mainThumbnail\n      }));\n    } else return null;\n  };\n\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    className: props.identity.data.postPageSidebar ? 'post withSidebar' : 'post withOutSidebar'\n  }, __jsx(\"div\", {\n    style: state.style,\n    className: \"main\"\n  }, __jsx(Iframe, {\n    iframeCode: props.post.videoEmbedCode,\n    meta: {\n      description: props.post.description,\n      title: props.post.title,\n      duration: props.post.duration,\n      thumbnailUrl: props.post.mainThumbnail,\n      embedURL: props.post.videoEmbedCode,\n      uploadDate: props.post.lastModify\n    }\n  }), __jsx(PostInfo, {\n    title: props.post.title,\n    description: props.post.description,\n    tags: props.post.tags,\n    actors: props.post.actors,\n    categories: props.post.categories,\n    id: props.post._id,\n    likes: props.post.likes,\n    disLikes: props.post.disLikes,\n    views: props.post.views,\n    videoEmbedCode: props.post.videoEmbedCode\n  }), __jsx(CommentsRenderer, {\n    comments: props.comments\n  }), __jsx(CommentFrom, {\n    documentId: props.post._id\n  })), __jsx(SideBar, {\n    key: \"postPageSidebar\",\n    isActive: props.identity.data.postPageSidebar,\n    widgets: props.widgets,\n    position: \"postPageSidebar\"\n  })), __jsx(Footer, null)));\n};\n\nPost.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  const postBody = {\n    postTitle: query.postTitle\n  };\n  let post;\n  let widgets;\n  let settings;\n  let comments;\n  const postData = await axios.post('http://localhost:3000/api/v1/posts/post', postBody);\n  post = postData.data.post;\n  const widgetsData = await getMultipleWidgetWithData({\n    widgets: ['postPageSidebar', 'footer']\n  }, true);\n  const settingsData = await getMultipleSetting({\n    settings: ['identity', 'navigation', 'design']\n  }, true);\n  const commentsData = await getComments({\n    onDocument: post._id\n  });\n  settings = settingsData.data.settings ? settingsData.data.settings : [];\n  widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n  comments = commentsData.data.comments ? commentsData.data.comments : [];\n  return _objectSpread({\n    post,\n    query,\n    widgets,\n    comments\n  }, settings);\n};\n\nexport default withRouter(Post);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/post/index.js"],"names":["React","useEffect","useState","useContext","AppLayout","axios","getComments","getPost","Iframe","PostInfo","withRouter","Head","getSetting","getWidgetsWithData","getMultipleWidgetWithData","getMultipleSetting","AppContext","SiteSettingSetter","SideBar","CommentFrom","CommentsRenderer","Footer","Post","props","contextData","state","setState","style","console","log","identity","postPageSidebar","gridArea","RenderMeta","post","title","description","tags","categories","actors","postType","videoEmbedCode","mainThumbnail","data","duration","thumbnailUrl","embedURL","uploadDate","lastModify","_id","likes","disLikes","views","comments","widgets","getInitialProps","pathname","query","req","res","err","postBody","postTitle","settings","postData","widgetsData","settingsData","commentsData","onDocument"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport AppLayout from \"../../components/layouts/AppLayout\";\r\nimport axios from \"axios\";\r\nimport { getComments, getPost } from \"../../_variables/ajaxPostsVariables\";\r\nimport Iframe from \"../../components/includes/Post/Iframe/Iframe\";\r\nimport PostInfo from \"../../components/includes/Post/PostInfo/PostInfo\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport Head from \"next/head\";\r\nimport { getSetting, getWidgetsWithData, getMultipleWidgetWithData, getMultipleSetting } from \"../../_variables/ajaxVariables\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport SiteSettingSetter from '../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport SideBar from '../../components/includes/Sidebar/Sidebar'\r\nimport CommentFrom from '../../components/includes/Post/CommentFrom/CommentFrom'\r\nimport CommentsRenderer from '../../components/includes/CommentsRenderer/CommentsRenderer'\r\nimport Footer from '../../components/includes/Footer/Footer'\r\n\r\nconst Post = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        style: {}\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        if (props.identity.postPageSidebar) {\r\n            setState({\r\n                style: {\r\n                    gridArea: 'content'\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [ props ]);\r\n\r\n    const RenderMeta = () => {\r\n        if (props.post.title) {\r\n            return (\r\n                <Head>\r\n                    <title>{ props.post.title }</title>\r\n                    <meta name=\"description\" content={ props.post.description }/>\r\n                    <meta name=\"keywords\" content={ [ ...props.post.tags, ...props.post.categories, ...props.post.actors ] }/>\r\n                    <meta property=\"og:title\" content={ props.post.title }/>\r\n                    <meta property=\"og:type\" content={ props.post.postType === 'video' ? props.post.postType + '.' + 'movies' : props.post.postType }/>\r\n                    {/*url should define*/ }\r\n                    <meta property=\"og:url\" content={ props.post.videoEmbedCode }/>\r\n                    <meta property=\"og:image\" content={ props.post.mainThumbnail }/>\r\n                </Head>\r\n            )\r\n        } else return null\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppLayout>\r\n                <SiteSettingSetter { ...props }/>\r\n                {/*<RenderMeta/>*/}\r\n                <div className={ props.identity.data.postPageSidebar ? 'post withSidebar' : 'post withOutSidebar' }>\r\n\r\n                    <div style={ state.style } className=\"main\">\r\n                        <Iframe iframeCode={ props.post.videoEmbedCode } meta={ {\r\n                            description: props.post.description,\r\n                            title: props.post.title,\r\n                            duration: props.post.duration,\r\n                            thumbnailUrl: props.post.mainThumbnail,\r\n                            embedURL: props.post.videoEmbedCode,\r\n                            uploadDate: props.post.lastModify,\r\n                        } }/>\r\n\r\n                        <PostInfo\r\n                            title={ props.post.title }\r\n                            description={ props.post.description }\r\n                            tags={ props.post.tags }\r\n                            actors={ props.post.actors }\r\n                            categories={ props.post.categories }\r\n                            id={ props.post._id }\r\n                            likes={ props.post.likes }\r\n                            disLikes={ props.post.disLikes }\r\n                            views={ props.post.views }\r\n                            videoEmbedCode={ props.post.videoEmbedCode }\r\n                        />\r\n                        <CommentsRenderer comments={ props.comments }/>\r\n                        <CommentFrom documentId={ props.post._id }/>\r\n\r\n                    </div>\r\n\r\n                    <SideBar key='postPageSidebar' isActive={ props.identity.data.postPageSidebar } widgets={ props.widgets } position='postPageSidebar'/>\r\n                </div>\r\n                <Footer/>\r\n            </AppLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    const postBody = {\r\n        postTitle: query.postTitle,\r\n    };\r\n\r\n    let post;\r\n    let widgets;\r\n    let settings;\r\n    let comments;\r\n\r\n\r\n    const postData = await axios.post('http://localhost:3000/api/v1/posts/post', postBody);\r\n    post = postData.data.post\r\n    const widgetsData = await getMultipleWidgetWithData({ widgets: [ 'postPageSidebar', 'footer' ] }, true)\r\n    const settingsData = await getMultipleSetting({ settings: [ 'identity', 'navigation', 'design' ] }, true)\r\n\r\n    const commentsData = await getComments({ onDocument: post._id })\r\n    settings = settingsData.data.settings ? settingsData.data.settings : []\r\n    widgets = widgetsData.data.widgets ? widgetsData.data.widgets : []\r\n    comments = commentsData.data.comments ? commentsData.data.comments : []\r\n    return { post, query, widgets, comments, ...settings }\r\n\r\n};\r\n\r\nexport default withRouter(Post);"]},"metadata":{},"sourceType":"module"}