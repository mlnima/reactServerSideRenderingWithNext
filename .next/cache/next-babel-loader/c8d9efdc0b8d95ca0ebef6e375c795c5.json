{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\nexport const updateSetting = async (type, data) => {\n  const body = {\n    token: localStorage.wt,\n    type,\n    data\n  };\n  return await axios.post(window.location.origin + '/api/v1/settings/update', body);\n};\nexport const saveCustomStyle = async data => {\n  const body = {\n    token: localStorage.wt,\n    data\n  };\n  return await axios.post(window.location.origin + '/api/v1/settings/saveCustomStyle', body);\n};\nexport const getSetting = async (type, cache, domainName) => {\n  const body = {\n    type\n  };\n  return await axios.post(domainName + `/api/v1/settings/get?type=${type}`, body);\n};\nexport const addNewWidget = async data => {\n  const body = {\n    data,\n    token: localStorage.wt\n  };\n  return await axios.post(window.location.origin + '/api/v1/settings/addWidget', body);\n};\nexport const getWidgets = async (position, cache, domainName) => {\n  const body = {\n    position\n  };\n  return await axios.post(domainName + '/api/v1/settings/getWidget', body);\n};\nexport const getMultipleWidgetWithData = async (widgets, cache, domainName) => {\n  const body = _objectSpread({}, widgets);\n\n  return await axios.post(domainName + '/api/v1/settings/getMultipleWidgetWithData', body);\n};\nexport const getMultipleSetting = async (settings, cache, domainName) => {\n  const isCache = cache ? '' : `?cache=${Date.now()}`;\n\n  const body = _objectSpread({}, settings);\n\n  return await axios.post(domainName + `/api/v1/settings/getMultiple`, body);\n};\nexport const getWidgetsWithData = async (position, domainName) => {\n  const body = {\n    position\n  };\n  return await axios.post(domainName + '/api/v1/settings/getWidgetsWithData', body);\n};\nexport const updateWidgets = async (id, data) => {\n  const body = {\n    id,\n    data,\n    token: localStorage.wt\n  };\n  return await axios.post(window.location.origin + '/api/v1/settings/updateWidget', body);\n};\nexport const deleteWidgets = async id => {\n  const body = {\n    id,\n    token: localStorage.wt\n  };\n  return await axios.post(window.location.origin + '/api/v1/settings/deleteWidget', body);\n};\nexport const executor = async command => {\n  const body = {\n    command,\n    token: localStorage.wt\n  };\n  return await axios.post(window.location.origin + '/api/v1/settings/executor', body);\n};","map":null,"metadata":{},"sourceType":"module"}