{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from 'next/dist/client/with-router';\nimport AdminLayout from '../../../../components/layouts/AdminLayout'; // import './TextEditor.scss'\n\nconst textEditor = props => {\n  let contextData = useContext(AppContext);\n  const textArea = useRef(null);\n  const message = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    file: '',\n    message: 'to leave this page please close text editor'\n  });\n  useEffect(() => {\n    if (contextData.settings.textEditorCurrentFile !== '') {\n      textArea.current.value = contextData.textEditorCurrentFile.textEditorCurrentFile;\n    } else {// props.history.push('/admin/FileManager')\n    }\n  }, [, contextData.settings.textEditorCurrentFile, contextData.settings.textEditorEditMode]);\n\n  const onCloseHandler = () => {\n    contextData.dispatchSettings(_objectSpread({}, contextData.dispatchSettings, {\n      textEditorCurrentFile: '',\n      textEditorEditMode: false\n    }));\n    props.router.push(props.router.back());\n  };\n\n  const ReadOnlyOrEditHandler = () => {\n    if (!contextData.settings.textEditorEditMode) {\n      return __jsx(\"textarea\", {\n        className: \"noEditMode\",\n        ref: textArea,\n        value: contextData.settings.textEditorEditMode\n      });\n    } else return __jsx(\"textarea\", {\n      className: \"EditMode\",\n      ref: textArea\n    });\n  };\n\n  let onEditModeHandler = () => {\n    contextData.dispatchSettings(_objectSpread({}, contextData.dispatchSettings, {\n      textEditorEditMode: true\n    }));\n  };\n\n  let onSaveHandler = () => {};\n\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: \"TextEditor\"\n  }, __jsx(\"div\", {\n    className: \"TextEditorControl\"\n  }, __jsx(\"button\", {\n    className: \"closeBtn fas fa-times\",\n    onClick: () => onCloseHandler()\n  }), __jsx(\"button\", {\n    className: \"editBtn fas fa-edit\",\n    onClick: () => onEditModeHandler()\n  }), __jsx(\"button\", {\n    className: \"editBtn fas fa-save\",\n    onClick: () => onSaveHandler()\n  })), __jsx(\"label\", {\n    ref: message\n  }, state.message), __jsx(ReadOnlyOrEditHandler, null)));\n};\n\nexport default withRouter(textEditor);","map":null,"metadata":{},"sourceType":"module"}