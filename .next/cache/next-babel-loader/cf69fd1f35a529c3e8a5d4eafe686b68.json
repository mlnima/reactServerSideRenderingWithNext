{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef, createRef } from 'react'; // import {Link, withRouter} from \"react-router-dom\";\n// import {updatePostStatus, deletePost, postsBulkAction, getPosts} from \"../../../../../variables/_ajaxPostsVariable\";\n// import QuickEdit from \"../QuickEdit/QuickEdit\";\n// import {adminTokenValidator} from \"../../../../../variables/_ajaxAuthVariables\";\n\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from \"next/dist/client/with-router\";\nimport Link from \"next/link\";\nimport { CSSTransitionGroup } from 'react-transition-group';\n\nvar BodyTable = function BodyTable(props) {\n  var contextData = useContext(AppContext);\n  var selectBoxes = useRef(contextData.adminPosts.map(function () {\n    return createRef();\n  }));\n\n  var _useState = useState({\n    hoveredId: '',\n    isMobile: false\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    if (window.innerWidth < 768) {\n      setState(_objectSpread({}, state, {\n        isMobile: true\n      }));\n    }\n  }, []);\n\n  var onDeletePermanentlyHandler = function onDeletePermanentlyHandler() {// deletePost(state.hoveredId).then(res => {\n    //     const posts = contextData.postsData.posts.filter(post => {\n    //         return post._id !== state.hoveredId\n    //     });\n    //     const report = contextData.state.reports.push(res.data.message)\n    //     contextData.setPostsData({\n    //         ...contextData.postsData,\n    //         posts\n    //     });\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         report\n    //     })\n    // })\n  };\n\n  var HoverOnTitle = function HoverOnTitle(props) {\n    if (props.post._id === state.hoveredId) {\n      var editPostPath = \"/admin/post?id=\".concat(props.post._id);\n\n      if (props.post.status === 'trash') {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          href: editPostPath\n        }, __jsx(\"a\", null, __jsx(\"button\", null, \"Edit\"))), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'delete');\n          }\n        }, \"Delete\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'draft');\n          }\n        }, \"Draft\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'pending');\n          }\n        }, \"Pending\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'published');\n          }\n        }, \"Publish\"), __jsx(\"button\", null, \"View\"));\n      } else if (props.post.status === 'published') {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          href: editPostPath\n        }, __jsx(\"a\", null, __jsx(\"button\", null, \"Edit\"))), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onDeletePermanentlyHandler(props.post._id);\n          }\n        }, \"Delete\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'draft');\n          }\n        }, \"Draft\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'pending');\n          }\n        }, \"Pending\"), __jsx(\"button\", null, \"View\"));\n      } else {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          href: editPostPath\n        }, __jsx(\"a\", null, __jsx(\"button\", null, \"Edit\"))), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'draft');\n          }\n        }, \"Draft\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'pending');\n          }\n        }, \"Pending\"), __jsx(\"button\", null, \"View\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'trash');\n          }\n        }, \"Trash\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return contextData.functions.bulkActionPost([state.hoveredId], 'published');\n          }\n        }, \"Publish\"));\n      }\n    } else return null;\n  };\n\n  var onCheckHandler = function onCheckHandler(e) {//\n    // if (e.target.checked) {\n    //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts;\n    //         pushedItemArr.push(e.target.name);\n    //         pushedItemArr = [...new Set(pushedItemArr)]\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    //\n    // } else {\n    //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\n    //             return id !== e.target.name\n    //         });\n    //         pushedItemArr = [...new Set(pushedItemArr)];\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    // }\n  };\n\n  var renderPosts = props.postsSource.posts.map(function (post) {\n    var renderTags = post.tags.map(function (item) {\n      return __jsx(Link, {\n        href: \"/\",\n        key: item\n      }, \" \", __jsx(\"a\", {\n        className: \"tagPreviewItem\"\n      }, item), \",\");\n    });\n    var author = post.author;\n\n    if (post.author === contextData.userData._id) {\n      author = contextData.userData.username;\n    }\n\n    var isChecked = contextData.adminPostsData.checkedPosts.includes(post._id);\n    return __jsx(React.Fragment, null, __jsx(CSSTransitionGroup, {\n      transitionName: {\n        enter: 'enter',\n        enterActive: 'enterActive',\n        leave: 'leave',\n        leaveActive: 'leaveActive',\n        appear: 'appear',\n        appearActive: 'appearActive'\n      },\n      transitionEnterTimeout: 500,\n      transitionLeaveTimeout: 300\n    }, __jsx(\"tr\", {\n      key: post._id,\n      className: \"BodyTableItems\",\n      onTouchStart: function onTouchStart() {\n        setState(_objectSpread({}, state, {\n          hoveredId: post._id\n        }));\n      },\n      onMouseEnter: function onMouseEnter() {\n        setState(_objectSpread({}, state, {\n          hoveredId: post._id\n        }));\n      }\n    }, __jsx(\"td\", {\n      className: \"postColumn\"\n    }, __jsx(\"div\", null, __jsx(\"input\", {\n      name: post._id,\n      className: \" BodyTableItemCheckBox\",\n      type: \"checkbox\",\n      ref: function ref(e) {\n        return selectBoxes.current[contextData.adminPosts.indexOf(post)] = e;\n      },\n      checked: isChecked,\n      onChange: function onChange(e) {\n        return onCheckHandler(e);\n      }\n    })), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem\"\n    }, post.title)), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem author noMobile\"\n    }, author)), __jsx(\"div\", {\n      className: \"tagCategoriesActorsPreview BodyTableItem noMobile\"\n    }, __jsx(\"span\", null, \"   \", post.categories + ' , ')), __jsx(\"div\", {\n      className: \"tagCategoriesActorsPreview BodyTableItem noMobile\"\n    }, __jsx(\"span\", null, \"   \", post.tags + ' , ')), __jsx(\"div\", {\n      className: \"tagCategoriesActorsPreview BodyTableItem noMobile\"\n    }, __jsx(\"span\", null, \"      \", post.actors + ' , ')), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem noMobile\"\n    }, post.status)), __jsx(\"div\", null, __jsx(\"img\", {\n      className: \"BodyTableItem noMobile\",\n      src: post.mainThumbnail\n    }))), __jsx(HoverOnTitle, {\n      post: post\n    }))));\n  });\n  return __jsx(\"tbody\", {\n    className: \"BodyTable\"\n  }, renderPosts);\n};\n\nexport default withRouter(BodyTable);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostsComponents/PostsDataTable/BodyTable.js"],"names":["React","useEffect","useState","useContext","useRef","createRef","AppContext","withRouter","Link","CSSTransitionGroup","BodyTable","props","contextData","selectBoxes","adminPosts","map","hoveredId","isMobile","state","setState","window","innerWidth","onDeletePermanentlyHandler","HoverOnTitle","post","_id","editPostPath","status","functions","bulkActionPost","onCheckHandler","e","renderPosts","postsSource","posts","renderTags","tags","item","author","userData","username","isChecked","adminPostsData","checkedPosts","includes","enter","enterActive","leave","leaveActive","appear","appearActive","current","indexOf","title","categories","actors","mainThumbnail"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef, createRef } from 'react';\r\n// import {Link, withRouter} from \"react-router-dom\";\r\n// import {updatePostStatus, deletePost, postsBulkAction, getPosts} from \"../../../../../variables/_ajaxPostsVariable\";\r\n// import QuickEdit from \"../QuickEdit/QuickEdit\";\r\n// import {adminTokenValidator} from \"../../../../../variables/_ajaxAuthVariables\";\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport Link from \"next/link\";\r\nimport { CSSTransitionGroup } from 'react-transition-group'\r\n\r\nconst BodyTable = props => {\r\n    const contextData = useContext(AppContext);\r\n    let selectBoxes = useRef(contextData.adminPosts.map(() => createRef()));\r\n    const [ state, setState ] = useState({\r\n        hoveredId: '',\r\n        isMobile: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (window.innerWidth < 768) {\r\n            setState({\r\n                ...state,\r\n                isMobile: true\r\n            })\r\n        }\r\n    }, []);\r\n\r\n    const onDeletePermanentlyHandler = () => {\r\n        // deletePost(state.hoveredId).then(res => {\r\n        //     const posts = contextData.postsData.posts.filter(post => {\r\n        //         return post._id !== state.hoveredId\r\n        //     });\r\n        //     const report = contextData.state.reports.push(res.data.message)\r\n        //     contextData.setPostsData({\r\n        //         ...contextData.postsData,\r\n        //         posts\r\n        //     });\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         report\r\n        //     })\r\n        // })\r\n    };\r\n\r\n    let HoverOnTitle = (props) => {\r\n        if (props.post._id === state.hoveredId) {\r\n            let editPostPath = `/admin/post?id=${ props.post._id }`;\r\n            if (props.post.status === 'trash') {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link href={ editPostPath }><a><button>Edit</button></a></Link>\r\n                        <button onClick={ () => contextData.functions.bulkActionPost([ state.hoveredId ], 'delete') }>Delete</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'draft') }>Draft</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'pending') }>Pending</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'published') }>Publish</button>\r\n                        <button>View</button>\r\n                    </div>\r\n                )\r\n            }else if (props.post.status === 'published'){\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link href={ editPostPath }><a><button>Edit</button></a></Link>\r\n                        <button onClick={ () => onDeletePermanentlyHandler(props.post._id) }>Delete</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'draft') }>Draft</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'pending') }>Pending</button>\r\n                        <button>View</button>\r\n                    </div>\r\n                )\r\n            }else {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link href={ editPostPath }><a><button>Edit</button></a></Link>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'draft') }>Draft</button>\r\n                        <button onClick={ () => contextData.functions.bulkActionPost([ state.hoveredId ], 'pending') }>Pending</button>\r\n                        <button>View</button>\r\n                        <button onClick={ () => contextData.functions.bulkActionPost([ state.hoveredId ], 'trash') }>Trash</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'published') }>Publish</button>\r\n                    </div>\r\n                )\r\n            }\r\n\r\n        } else return null\r\n    };\r\n\r\n    const onCheckHandler = e => {\r\n        //\r\n        // if (e.target.checked) {\r\n        //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts;\r\n        //         pushedItemArr.push(e.target.name);\r\n        //         pushedItemArr = [...new Set(pushedItemArr)]\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        //\r\n        // } else {\r\n        //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\r\n        //             return id !== e.target.name\r\n        //         });\r\n        //         pushedItemArr = [...new Set(pushedItemArr)];\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        // }\r\n    };\r\n\r\n    let renderPosts = props.postsSource.posts.map(post => {\r\n\r\n        const renderTags = post.tags.map(item => {\r\n            return (\r\n                <Link href='/' key={ item } > <a className='tagPreviewItem'>{ item }</a>,</Link>)\r\n        });\r\n\r\n        let author = post.author;\r\n        if (post.author === contextData.userData._id) {\r\n            author = contextData.userData.username\r\n        }\r\n\r\n        let isChecked = contextData.adminPostsData.checkedPosts.includes(post._id);\r\n        return (\r\n            <>\r\n                <CSSTransitionGroup\r\n                    transitionName={ {\r\n                        enter: 'enter',\r\n                        enterActive: 'enterActive',\r\n                        leave: 'leave',\r\n                        leaveActive: 'leaveActive',\r\n                        appear: 'appear',\r\n                        appearActive: 'appearActive'\r\n                    } }\r\n                    transitionEnterTimeout={500}\r\n                    transitionLeaveTimeout={300}>\r\n            <tr key={ post._id } className='BodyTableItems' onTouchStart={ () => {\r\n                setState({ ...state, hoveredId: post._id })\r\n            } } onMouseEnter={ () => {\r\n                setState({ ...state, hoveredId: post._id })\r\n            } }>\r\n                <td className='postColumn'>\r\n                    <div>\r\n                        <input name={ post._id } className=' BodyTableItemCheckBox' type='checkbox'\r\n                               ref={ e => selectBoxes.current[contextData.adminPosts.indexOf(post)] = e }\r\n                               checked={ isChecked }\r\n                               onChange={ (e) => onCheckHandler(e) }/>\r\n                    </div>\r\n                    <div>\r\n                        <p className='BodyTableItem'>{ post.title }</p>\r\n\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p className='BodyTableItem author noMobile'>{ author }</p>\r\n                    </div>\r\n                    <div className='tagCategoriesActorsPreview BodyTableItem noMobile'>\r\n                        <span>   { post.categories + ' , ' }</span>\r\n\r\n\r\n                    </div>\r\n                    <div className='tagCategoriesActorsPreview BodyTableItem noMobile'>\r\n                        <span>   { post.tags + ' , ' }</span>\r\n\r\n                    </div>\r\n\r\n                    <div className='tagCategoriesActorsPreview BodyTableItem noMobile'>\r\n                        <span>      { post.actors + ' , ' }</span>\r\n\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p className='BodyTableItem noMobile'>{ post.status }</p>\r\n                    </div>\r\n                    < div>\r\n                        < img className='BodyTableItem noMobile' src={ post.mainThumbnail }/>\r\n                    </div>\r\n                </td>\r\n                <HoverOnTitle post={ post }/>\r\n               </tr>\r\n                </CSSTransitionGroup>\r\n                </>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <tbody className='BodyTable'>\r\n        { renderPosts }\r\n        </tbody>\r\n    );\r\n};\r\nexport default withRouter(BodyTable);"]},"metadata":{},"sourceType":"module"}