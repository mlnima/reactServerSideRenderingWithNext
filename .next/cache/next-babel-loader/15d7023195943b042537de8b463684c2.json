{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\n\nconst PostCategoriesTagsActors = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: items,\n    1: setItems\n  } = useState([]);\n  let newItemsElement = useRef(null);\n  useEffect(() => {}, []);\n\n  const deleteItem = e => {// contextData.setPostData({\n    //     ...contextData.postData,\n    //     post: {\n    //         ...contextData.postData.post,\n    //         tags: contextData.postData.post.tags.filter(tag => {\n    //             return tag != e.target.name\n    //         })\n    //     }\n    // })\n  };\n\n  const addNewItem = () => {\n    let newItems; // if (newItemsElement.current.value.includes(',')){\n\n    if (contextData.editingPostData.tags) {\n      if (newItemsElement.current.value.includes(',')) {\n        newItems = contextData.editingPostData.tags.concat(newItemsElement.current.value.split(','));\n      } else {\n        newItems = newItemsElement.current.value.split(',');\n      }\n    } else {\n      if (newItemsElement.current.value.includes(',')) {\n        newItems = [];\n      } else {\n        newItems = newItemsElement.current.value.split(',');\n      }\n    } // }else {\n    //     newItems\n    // }\n\n\n    contextData.dispatchEditingPostData(editingPostData => _objectSpread({}, editingPostData, {\n      [props.type]: []\n    })); // if (newItem.current.value.includes(',')) {\n    //     newItems = contextData.postData.post.tags.concat(newTag.current.value.split(','));\n    // } else {\n    //     newItems = contextData.postData.post.tags.concat([newTag.current.value]);\n    // }\n    //\n    // newTags = [...new Set(newTags)];\n    // contextData.setPostData({\n    //     ...contextData.postData,\n    //     post: {\n    //         ...contextData.postData.post,\n    //         tags: newTags\n    //     }\n    // })\n  };\n\n  let renderTags = items.map(item => {\n    return __jsx(\"div\", {\n      key: item,\n      className: \"tagElement\"\n    }, __jsx(\"p\", null, item), __jsx(\"button\", {\n      name: item,\n      onClick: e => deleteItem(e),\n      className: \"fas fa-times-circle\"\n    }));\n  });\n  return __jsx(\"div\", {\n    className: \"PostCategoriesTagsActors\"\n  }, __jsx(\"div\", {\n    className: \"addNewTag\"\n  }, __jsx(\"input\", {\n    ref: newItemsElement,\n    type: \"text\"\n  }), __jsx(\"button\", {\n    onClick: () => addNewItem()\n  }, \" Add\")), __jsx(\"span\", null, \"Separate tags with commas\"), __jsx(\"div\", {\n    className: \"tags\"\n  }, renderTags));\n};\n\nexport default PostCategoriesTagsActors;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors.js"],"names":["React","useEffect","useState","useContext","useRef","AppContext","PostCategoriesTagsActors","props","contextData","items","setItems","newItemsElement","deleteItem","e","addNewItem","newItems","editingPostData","tags","current","value","includes","concat","split","dispatchEditingPostData","type","renderTags","map","item"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAwBC,QAAxB,EAAiCC,UAAjC,EAA4CC,MAA5C,QAAyD,OAAzD;AACA,SAASC,UAAT,QAA2B,gCAA3B;;AACA,MAAMC,wBAAwB,GAAGC,KAAK,IAAI;AACtC,QAAMC,WAAW,GAAGL,UAAU,CAACE,UAAD,CAA9B;AACA,QAAM;AAAA,OAACI,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,MAAIS,eAAe,GAAGP,MAAM,CAAC,IAAD,CAA5B;AACAH,EAAAA,SAAS,CAAC,MAAI,CAEb,CAFQ,EAEP,EAFO,CAAT;;AAIA,QAAMW,UAAU,GAAIC,CAAD,IAAO,CACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAVD;;AAYA,QAAMC,UAAU,GAAG,MAAM;AACrB,QAAIC,QAAJ,CADqB,CAOrB;;AACI,QAAIP,WAAW,CAACQ,eAAZ,CAA4BC,IAAhC,EAAqC;AACjC,UAAIN,eAAe,CAACO,OAAhB,CAAwBC,KAAxB,CAA8BC,QAA9B,CAAuC,GAAvC,CAAJ,EAAgD;AAC5CL,QAAAA,QAAQ,GAAGP,WAAW,CAACQ,eAAZ,CAA4BC,IAA5B,CAAiCI,MAAjC,CAAwCV,eAAe,CAACO,OAAhB,CAAwBC,KAAxB,CAA8BG,KAA9B,CAAoC,GAApC,CAAxC,CAAX;AACH,OAFD,MAEM;AACFP,QAAAA,QAAQ,GAAGJ,eAAe,CAACO,OAAhB,CAAwBC,KAAxB,CAA8BG,KAA9B,CAAoC,GAApC,CAAX;AACH;AAEJ,KAPD,MAOM;AACF,UAAIX,eAAe,CAACO,OAAhB,CAAwBC,KAAxB,CAA8BC,QAA9B,CAAuC,GAAvC,CAAJ,EAAgD;AAC5CL,QAAAA,QAAQ,GAAG,EAAX;AACH,OAFD,MAEM;AACFA,QAAAA,QAAQ,GAAGJ,eAAe,CAACO,OAAhB,CAAwBC,KAAxB,CAA8BG,KAA9B,CAAoC,GAApC,CAAX;AACH;AAEJ,KAtBgB,CAuBrB;AACA;AACA;;;AAIAd,IAAAA,WAAW,CAACe,uBAAZ,CAAoCP,eAAe,sBAC5CA,eAD4C;AAE/C,OAACT,KAAK,CAACiB,IAAP,GAAa;AAFkC,MAAnD,EA7BqB,CAmCrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAjDD;;AAoDA,MAAIC,UAAU,GAAGhB,KAAK,CAACiB,GAAN,CAAUC,IAAI,IAAI;AAC/B,WACI;AAAK,MAAA,GAAG,EAAEA,IAAV;AAAgB,MAAA,SAAS,EAAC;AAA1B,OACI,iBAAIA,IAAJ,CADJ,EAEI;AAAQ,MAAA,IAAI,EAAEA,IAAd;AAAoB,MAAA,OAAO,EAAGd,CAAD,IAAOD,UAAU,CAACC,CAAD,CAA9C;AAAmD,MAAA,SAAS,EAAC;AAA7D,MAFJ,CADJ;AAMH,GAPgB,CAAjB;AAUA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAO,IAAA,GAAG,EAAEF,eAAZ;AAA6B,IAAA,IAAI,EAAC;AAAlC,IADJ,EAEI;AAAQ,IAAA,OAAO,EAAE,MAAMG,UAAU;AAAjC,YAFJ,CADJ,EAKI,gDALJ,EAMI;AAAK,IAAA,SAAS,EAAC;AAAf,KACKW,UADL,CANJ,CADJ;AAYH,CA9FD;;AA+FA,eAAenB,wBAAf","sourcesContent":["import React,{useEffect,useState,useContext,useRef} from 'react';\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nconst PostCategoriesTagsActors = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [items, setItems] = useState([]);\r\n    let newItemsElement = useRef(null);\r\n    useEffect(()=>{\r\n\r\n    },[]);\r\n\r\n    const deleteItem = (e) => {\r\n        // contextData.setPostData({\r\n        //     ...contextData.postData,\r\n        //     post: {\r\n        //         ...contextData.postData.post,\r\n        //         tags: contextData.postData.post.tags.filter(tag => {\r\n        //             return tag != e.target.name\r\n        //         })\r\n        //     }\r\n        // })\r\n    };\r\n\r\n    const addNewItem = () => {\r\n        let newItems;\r\n         \r\n\r\n\r\n\r\n\r\n        // if (newItemsElement.current.value.includes(',')){\r\n            if (contextData.editingPostData.tags){\r\n                if (newItemsElement.current.value.includes(',')){\r\n                    newItems = contextData.editingPostData.tags.concat(newItemsElement.current.value.split(','));\r\n                }else {\r\n                    newItems = newItemsElement.current.value.split(',')\r\n                }\r\n\r\n            }else {\r\n                if (newItemsElement.current.value.includes(',')){\r\n                    newItems = []\r\n                }else {\r\n                    newItems = newItemsElement.current.value.split(',')\r\n                }\r\n\r\n            }\r\n        // }else {\r\n        //     newItems\r\n        // }\r\n\r\n\r\n\r\n        contextData.dispatchEditingPostData(editingPostData=>({\r\n            ...editingPostData,\r\n            [props.type]:[]\r\n        }))\r\n\r\n\r\n        // if (newItem.current.value.includes(',')) {\r\n        //     newItems = contextData.postData.post.tags.concat(newTag.current.value.split(','));\r\n        // } else {\r\n        //     newItems = contextData.postData.post.tags.concat([newTag.current.value]);\r\n        // }\r\n        //\r\n        // newTags = [...new Set(newTags)];\r\n        // contextData.setPostData({\r\n        //     ...contextData.postData,\r\n        //     post: {\r\n        //         ...contextData.postData.post,\r\n        //         tags: newTags\r\n        //     }\r\n        // })\r\n    };\r\n\r\n\r\n    let renderTags = items.map(item => {\r\n        return (\r\n            <div key={item} className='tagElement'>\r\n                <p>{item}</p>\r\n                <button name={item} onClick={(e) => deleteItem(e)} className='fas fa-times-circle'/>\r\n            </div>\r\n        )\r\n    });\r\n\r\n\r\n    return (\r\n        <div className='PostCategoriesTagsActors'>\r\n            <div className=\"addNewTag\">\r\n                <input ref={newItemsElement} type='text'/>\r\n                <button onClick={() => addNewItem()}> Add</button>\r\n            </div>\r\n            <span>Separate tags with commas</span>\r\n            <div className=\"tags\">\r\n                {renderTags}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default PostCategoriesTagsActors;"]},"metadata":{},"sourceType":"module"}