{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Set from \"@babel/runtime-corejs2/core-js/set\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef, createRef } from 'react';\nimport { AppContext } from \"../../../../../../context/AppContext\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { updatePostStatus, deletePost, postsBulkAction, getPosts } from \"../../../../../variables/_ajaxPostsVariable\";\nimport QuickEdit from \"../QuickEdit/QuickEdit\";\nimport { adminTokenValidator } from \"../../../../../variables/_ajaxAuthVariables\";\n\nvar BodyTable = function BodyTable(props) {\n  var contextData = useContext(AppContext);\n  var selectBoxes = useRef(contextData.postsData.posts.map(function () {\n    return createRef();\n  }));\n\n  var _useState = useState({\n    hoveredId: ''\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var setData = function setData() {\n    getPosts(contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo, ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status, contextData.postsData.author, contextData.postsData.keyword).then(function (res) {\n      contextData.setPostsData(_objectSpread({}, contextData.postsData, {\n        posts: res.data.posts,\n        error: res.data.error,\n        totalCount: res.data.totalCount\n      }));\n      contextData.setState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    })[\"catch\"](function () {\n      contextData.setState(_objectSpread({}, contextData.state, {\n        login: false\n      }));\n    });\n  };\n\n  var onTrashHandler = function onTrashHandler() {\n    contextData.setState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    postsBulkAction([state.hoveredId], 'Trash').then(function (res) {\n      setData();\n    })[\"catch\"](function (err) {\n      contextData.setState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  }; // const onDeletePermanentlyHandler = (id)=>{\n  //\n  // }\n\n\n  var onDeletePermanentlyHandler = function onDeletePermanentlyHandler() {\n    deletePost(state.hoveredId).then(function (res) {\n      var posts = contextData.postsData.posts.filter(function (post) {\n        return post._id !== state.hoveredId;\n      });\n      var report = contextData.state.reports.push(res.data.message);\n      contextData.setPostsData(_objectSpread({}, contextData.postsData, {\n        posts: posts\n      }));\n      contextData.setState(_objectSpread({}, contextData.state, {\n        report: report\n      }));\n    });\n  };\n\n  var onRestoreHandler = function onRestoreHandler() {\n    contextData.setState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    postsBulkAction([state.hoveredId], 'Draft').then(function (res) {\n      setData();\n    })[\"catch\"](function (err) {\n      contextData.setState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  var HoverOnTitle = function HoverOnTitle(props) {\n    if (props.post._id === state.hoveredId) {\n      var editPostPath = \"/admin/Post/\".concat(props.post._id);\n\n      if (props.post.status === 'Trash') {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          to: editPostPath\n        }, \"Edit\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onDeletePermanentlyHandler(props.post._id);\n          }\n        }, \"Delete Permanently\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onRestoreHandler();\n          }\n        }, \"Move to Draft\"));\n      } else {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          to: editPostPath\n        }, \"Edit\"), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onTrashHandler();\n          }\n        }, \"Trash\"), __jsx(\"button\", null, \"View\"));\n      }\n    } else return __jsx(\"div\", {\n      className: \"postControlOptions\"\n    });\n  };\n\n  var onCheckHandler = function onCheckHandler(e) {\n    if (e.target.checked) {\n      if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\n        var pushedItemArr = contextData.postsData.checkedPosts;\n        pushedItemArr.push(e.target.name);\n        pushedItemArr = _toConsumableArray(new _Set(pushedItemArr));\n        contextData.setPostsData(_objectSpread({}, contextData.postsData, {\n          checkedPosts: pushedItemArr\n        }));\n      }\n    } else {\n      if (contextData.postsData.checkedPosts.includes(e.target.name)) {\n        var _pushedItemArr = contextData.postsData.checkedPosts.filter(function (id) {\n          return id !== e.target.name;\n        });\n\n        _pushedItemArr = _toConsumableArray(new _Set(_pushedItemArr));\n        contextData.setPostsData(_objectSpread({}, contextData.postsData, {\n          checkedPosts: _pushedItemArr\n        }));\n      }\n    }\n  };\n\n  var renderPosts = contextData.postsData.posts.map(function (post) {\n    var author = post.author;\n\n    if (post.author === contextData.adminData._id) {\n      author = contextData.adminData.username;\n    }\n\n    var isChecked = contextData.postsData.checkedPosts.includes(post._id);\n    return __jsx(\"tr\", {\n      key: post._id,\n      className: \"BodyTableItems\",\n      onMouseEnter: function onMouseEnter() {\n        setState(_objectSpread({}, state, {\n          hoveredId: post._id\n        }));\n      }\n    }, __jsx(\"td\", {\n      className: \"postColumn\"\n    }, __jsx(\"div\", null, __jsx(\"input\", {\n      name: post._id,\n      className: \" BodyTableItemCheckBox\",\n      type: \"checkbox\",\n      ref: function ref(e) {\n        return selectBoxes.current[contextData.postsData.posts.indexOf(post)] = e;\n      },\n      checked: isChecked,\n      onChange: function onChange(e) {\n        return onCheckHandler(e);\n      }\n    })), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem\"\n    }, post.title.en), __jsx(HoverOnTitle, {\n      post: post\n    })), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem author\"\n    }, author)), __jsx(\"div\", {\n      className: \"tagPreview BodyTableItem\"\n    }, post.categories.map(function (category) {\n      return __jsx(Link, {\n        to: \"/\",\n        key: category,\n        className: \"tagPreviewItem\"\n      }, category, \" ,\");\n    })), __jsx(\"div\", {\n      className: \"tagPreview BodyTableItem\"\n    }, post.tags.map(function (tag) {\n      return __jsx(Link, {\n        to: \"/\",\n        key: tag,\n        className: \"tagPreviewItem\"\n      }, tag, \" ,\");\n    })), __jsx(\"div\", {\n      className: \"actorsPreview BodyTableItem\"\n    }, post.actors.map(function (actor) {\n      return __jsx(Link, {\n        to: \"/\",\n        key: actor,\n        className: \"actorsPreviewItem\"\n      }, actor, \" ,\");\n    })), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem\"\n    }, post.status)), __jsx(\"div\", null, __jsx(\"img\", {\n      className: \"BodyTableItem\",\n      src: post.imageUrl\n    }))));\n  });\n  return __jsx(\"tbody\", {\n    className: \"BodyTable\"\n  }, renderPosts);\n};\n\nexport default withRouter(BodyTable);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostsComponents/PostsDataTable/BodyTable.js"],"names":["React","useEffect","useState","useContext","useRef","createRef","AppContext","Link","withRouter","updatePostStatus","deletePost","postsBulkAction","getPosts","QuickEdit","adminTokenValidator","BodyTable","props","contextData","selectBoxes","postsData","posts","map","hoveredId","state","setState","setData","type","size","pageNo","status","author","keyword","then","res","setPostsData","data","error","totalCount","loading","login","onTrashHandler","err","onDeletePermanentlyHandler","filter","post","_id","report","reports","push","message","onRestoreHandler","HoverOnTitle","editPostPath","onCheckHandler","e","target","checked","checkedPosts","includes","name","pushedItemArr","id","renderPosts","adminData","username","isChecked","current","indexOf","title","en","categories","category","tags","tag","actors","actor","imageUrl"],"mappings":"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","sourcesContent":["import React, {useEffect, useState, useContext, useRef, createRef} from 'react';\r\nimport {AppContext} from \"../../../../../../context/AppContext\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport {updatePostStatus, deletePost, postsBulkAction, getPosts} from \"../../../../../variables/_ajaxPostsVariable\";\r\nimport QuickEdit from \"../QuickEdit/QuickEdit\";\r\nimport {adminTokenValidator} from \"../../../../../variables/_ajaxAuthVariables\";\r\n\r\n\r\nconst BodyTable = props => {\r\n    let contextData = useContext(AppContext);\r\n    let selectBoxes = useRef(contextData.postsData.posts.map(() => createRef()));\r\n    const [state, setState] = useState({\r\n        hoveredId: '',\r\n    });\r\n\r\n    const setData = () => {\r\n        getPosts(\r\n            contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo,\r\n            ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status,\r\n            contextData.postsData.author, contextData.postsData.keyword).then(res => {\r\n            contextData.setPostsData({\r\n                ...contextData.postsData,\r\n                posts: res.data.posts,\r\n                error: res.data.error,\r\n                totalCount: res.data.totalCount\r\n            });\r\n            contextData.setState({\r\n                ...contextData.state,\r\n                loading: false\r\n            });\r\n        }).catch(() => {\r\n            contextData.setState({\r\n                ...contextData.state,\r\n                login: false\r\n            })\r\n        })\r\n    };\r\n\r\n    const onTrashHandler = () => {\r\n        contextData.setState({\r\n            ...contextData.state,\r\n            loading: true\r\n        });\r\n        postsBulkAction([state.hoveredId], 'Trash').then(res => {\r\n            setData()\r\n        }).catch(err => {\r\n            contextData.setState({\r\n                ...contextData.state,\r\n                loading: false\r\n            });\r\n        })\r\n\r\n    };\r\n\r\n    // const onDeletePermanentlyHandler = (id)=>{\r\n    //\r\n    // }\r\n\r\n    const onDeletePermanentlyHandler = () => {\r\n        deletePost(state.hoveredId).then(res => {\r\n            const posts = contextData.postsData.posts.filter(post => {\r\n                return post._id !== state.hoveredId\r\n            });\r\n            const report = contextData.state.reports.push(res.data.message)\r\n            contextData.setPostsData({\r\n                ...contextData.postsData,\r\n                posts\r\n            });\r\n            contextData.setState({\r\n                ...contextData.state,\r\n                report\r\n            })\r\n        })\r\n    };\r\n\r\n    const onRestoreHandler = () => {\r\n        contextData.setState({\r\n            ...contextData.state,\r\n            loading: true\r\n        });\r\n        postsBulkAction([state.hoveredId], 'Draft').then(res => {\r\n            setData()\r\n        }).catch(err => {\r\n            contextData.setState({\r\n                ...contextData.state,\r\n                loading: false\r\n            });\r\n        })\r\n    };\r\n\r\n    let HoverOnTitle = (props) => {\r\n        if (props.post._id === state.hoveredId) {\r\n            let editPostPath = `/admin/Post/${props.post._id}`;\r\n            if (props.post.status === 'Trash') {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link to={editPostPath}>Edit</Link>\r\n                        <button onClick={() => onDeletePermanentlyHandler(props.post._id )}>Delete Permanently</button>\r\n                        <button onClick={() => onRestoreHandler()}>Move to Draft</button>\r\n                        {/*<button onClick={() => quickEditBtnHandler(props.post._id)}>QEdit</button>*/}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link to={editPostPath}>Edit</Link>\r\n                        <button onClick={() => onTrashHandler()}>Trash</button>\r\n                        <button>View</button>\r\n                        {/*<button onClick={() => quickEditBtnHandler(props.post._id)}>QEdit</button>*/}\r\n                    </div>\r\n                )\r\n            }\r\n\r\n\r\n        } else return (\r\n            <div className='postControlOptions'>\r\n\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const onCheckHandler = e => {\r\n\r\n        if (e.target.checked) {\r\n            if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n                let pushedItemArr = contextData.postsData.checkedPosts;\r\n                pushedItemArr.push(e.target.name);\r\n                pushedItemArr = [...new Set(pushedItemArr)]\r\n                contextData.setPostsData({\r\n                    ...contextData.postsData,\r\n                    checkedPosts: pushedItemArr\r\n                });\r\n            }\r\n\r\n        } else {\r\n            if (contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n                let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\r\n                    return id !== e.target.name\r\n                });\r\n                pushedItemArr = [...new Set(pushedItemArr)];\r\n                contextData.setPostsData({\r\n                    ...contextData.postsData,\r\n                    checkedPosts: pushedItemArr\r\n                });\r\n            }\r\n        }\r\n    };\r\n\r\n    let renderPosts = contextData.postsData.posts.map(post => {\r\n        let author = post.author;\r\n        if (post.author === contextData.adminData._id) {\r\n            author = contextData.adminData.username\r\n        }\r\n        let isChecked =  contextData.postsData.checkedPosts.includes(post._id)\r\n        return (\r\n            <tr key={post._id} className='BodyTableItems' onMouseEnter={() => {\r\n                setState({...state, hoveredId: post._id})\r\n            }}>\r\n                <td className='postColumn'>\r\n                    <div>\r\n                        <input name={post._id} className=' BodyTableItemCheckBox' type='checkbox'\r\n                               ref={e => selectBoxes.current[contextData.postsData.posts.indexOf(post)] = e}\r\n                            checked={isChecked}\r\n                               onChange={(e) => onCheckHandler(e)}/>\r\n                    </div>\r\n                    <div>\r\n                        <p className='BodyTableItem'>{post.title.en}</p>\r\n                        <HoverOnTitle post={post}/>\r\n                    </div>\r\n                    <div>\r\n                        <p className='BodyTableItem author'>{author}</p>\r\n                    </div>\r\n\r\n                    <div className='tagPreview BodyTableItem'>\r\n                        {post.categories.map(category => {\r\n                            return (\r\n                                <Link to='/' key={category} className='tagPreviewItem'>{category} ,</Link>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <div className='tagPreview BodyTableItem'>\r\n                        {post.tags.map(tag => {\r\n                            return (\r\n                                <Link to='/' key={tag} className='tagPreviewItem'>{tag} ,</Link>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <div className='actorsPreview BodyTableItem'>\r\n                        {post.actors.map(actor => {\r\n                            return (\r\n                                <Link to='/' key={actor} className='actorsPreviewItem'>{actor} ,</Link>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    <div>\r\n                        <p className='BodyTableItem'>{post.status}</p>\r\n                    </div>\r\n                    <div>\r\n                        <img className='BodyTableItem' src={post.imageUrl}/>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <tbody className='BodyTable'>\r\n        {renderPosts}\r\n        </tbody>\r\n    );\r\n};\r\nexport default withRouter(BodyTable);"]},"metadata":{},"sourceType":"module"}