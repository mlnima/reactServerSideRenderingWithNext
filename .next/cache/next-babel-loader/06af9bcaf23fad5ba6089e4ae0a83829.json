{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from \"../../../components/layouts/AppLayout\";\nimport { getMultipleSetting, getSetting, getWidgetsWithData, getMultipleWidgetWithData } from '../../../_variables/ajaxVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport withRouter from 'next/dist/client/with-router';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport RenderMetaDataPages from '../../../components/includes/RenderMetaDataPages/RenderMetaDataPages';\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\nimport CategoriesSidebar from '../../../components/includes/pages/Categories/CategoriesSidebar/CategoriesSidebar';\nimport { Sidebar } from '../../../components/includes/Sidebar/Sidebar';\nimport Footer from '../../../components/includes/Footer/Footer'; // import './categories.scss'import './categories.scss'\n\nconst categories = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    style: {}\n  });\n  useEffect(() => {\n    if (props.identity.categoriesPageSidebar) {\n      setState({\n        style: {\n          gridArea: 'content'\n        }\n      });\n    }\n  }, [props]);\n  const renderCategories = props.categoriesSource.metas.map(meta => {\n    return __jsx(CategoryElement, {\n      key: props.categoriesSource.metas.indexOf(meta),\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(SiteSettingSetter, props), __jsx(\"div\", {\n    style: state.style,\n    className: props.identity.data.categoriesPageSidebar ? 'content withSidebar' : 'content withOutSidebar'\n  }, __jsx(\"div\", null, __jsx(\"div\", {\n    className: \"categories\"\n  }, renderCategories), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getCategoriesData.pageNo,\n    totalCount: props.categoriesSource.totalCount,\n    size: props.getCategoriesData.size,\n    maxPage: Math.ceil(parseInt(props.categoriesSource.totalCount) / parseInt(props.getCategoriesData.size)) - 1,\n    queryData: props.query || props.router.query,\n    pathnameData: props.pathname || props.router.pathname\n  })), __jsx(Sidebar, {\n    key: \"categoriesPageSidebar\",\n    isActive: props.identity.data.categoriesPageSidebar,\n    widgets: props.widgets,\n    position: \"categoriesPageSidebar\"\n  })), __jsx(Footer, {\n    widgets: props.widgets,\n    position: \"footer\"\n  })));\n};\n\ncategories.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  const getCategoriesData = {\n    type: 'category',\n    searchForImageIn: 'categories',\n    pageNo: parseInt(query.page) || 1,\n    size: parseInt(query.size) || 30,\n    sort: query.sort || 'latest'\n  };\n  let widgets;\n  let categoriesSource;\n  let settings;\n  const widgetsData = await getMultipleWidgetWithData({\n    widgets: ['categoriesPageSidebar', 'home', 'footer']\n  }, true);\n  const settingsData = await getMultipleSetting({\n    settings: ['identity', 'navigation', 'design']\n  }, true);\n  const categoriesData = await getMeta(getCategoriesData);\n  widgets = widgetsData.data.widgets ? widgetsData.data.widgets : [];\n  settings = settingsData.data.settings ? settingsData.data.settings : [];\n  categoriesSource = categoriesData.data ? categoriesData.data : [];\n  return _objectSpread({}, settings, {\n    query,\n    categoriesSource,\n    getCategoriesData,\n    pathname,\n    widgets\n  });\n};\n\nexport default withRouter(categories);","map":null,"metadata":{},"sourceType":"module"}