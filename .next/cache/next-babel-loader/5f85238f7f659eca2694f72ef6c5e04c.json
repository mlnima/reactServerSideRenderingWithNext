{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useContext, useEffect } from 'react';\nimport { AppContext } from '../../../context/AppContext';\n\nconst SiteSettingSetter = props => {\n  const contextData = useContext(AppContext);\n  useEffect(() => {\n    if (props.navigation) {\n      contextData.dispatchNavigationData(props.navigation.data);\n    }\n\n    if (props.identity) {\n      contextData.dispatchSiteIdentity(siteIdentity => _objectSpread({}, siteIdentity, {}, props.identity));\n    }\n  }, [props]);\n  return null;\n};\n\nexport default SiteSettingSetter;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/includes/SiteSettingsSetter/SiteSettingsSetter.js"],"names":["React","useContext","useEffect","AppContext","SiteSettingSetter","props","contextData","navigation","dispatchNavigationData","data","identity","dispatchSiteIdentity","siteIdentity"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,UAAT,QAA2B,6BAA3B;;AAEA,MAAMC,iBAAiB,GAAGC,KAAK,IAAI;AAC/B,QAAMC,WAAW,GAAGL,UAAU,CAACE,UAAD,CAA9B;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,KAAK,CAACE,UAAV,EAAsB;AAClBD,MAAAA,WAAW,CAACE,sBAAZ,CAAmCH,KAAK,CAACE,UAAN,CAAiBE,IAApD;AACH;;AACD,QAAIJ,KAAK,CAACK,QAAV,EAAoB;AAChBJ,MAAAA,WAAW,CAACK,oBAAZ,CAAiCC,YAAY,sBACtCA,YADsC,MAEtCP,KAAK,CAACK,QAFgC,CAA7C;AAIH;AACJ,GAVQ,EAUN,CAACL,KAAD,CAVM,CAAT;AAaA,SAAO,IAAP;AACH,CAhBD;;AAiBA,eAAeD,iBAAf","sourcesContent":["import React, { useContext, useEffect } from 'react';\r\nimport { AppContext } from '../../../context/AppContext'\r\n\r\nconst SiteSettingSetter = props => {\r\n    const contextData = useContext(AppContext);\r\n    useEffect(() => {\r\n        if (props.navigation) {\r\n            contextData.dispatchNavigationData(props.navigation.data)\r\n        }\r\n        if (props.identity) {\r\n            contextData.dispatchSiteIdentity(siteIdentity => ({\r\n                ...siteIdentity,\r\n                ...props.identity\r\n            }))\r\n        }\r\n    }, [props]);\r\n\r\n\r\n    return null\r\n};\r\nexport default SiteSettingSetter;\r\n"]},"metadata":{},"sourceType":"module"}