{"ast":null,"code":"export const likeValueCalculator = (likes, dislikes) => {\n  return likes > 0 && dislikes > 0 ? Math.round(likes * 100 / (likes + dislikes)) : likes === 0 && dislikes === 0 ? 0 : likes === 0 && dislikes > 0 ? 0 : likes > 0 && dislikes === 0 ? 100 : 0;\n};\nexport const getAbsolutePath = async req => {\n  return (await req.protocol) + '://' + (await req.get('Host'));\n};\nexport const generateAbsolutePath = () => {\n  return window.location.protocol + '//' + window.location.host;\n};\nexport const clickPathGenerator = (clickedItemName, pathFromContexts) => {\n  if (pathFromContexts === '.') {\n    return './' + clickedItemName;\n  } else {\n    return pathFromContexts + '/' + clickedItemName;\n  }\n};\nexport const trimString = string => {\n  return trimString();\n};\nexport const convertVariableNameToName = name => {\n  return name.replace(/([A-Z])/g, \" $1\").charAt(0).toUpperCase() + name.replace(/([A-Z])/g, \" $1\").slice(1);\n};\nexport const fileTypeDetector = fileName => {\n  const splitFileName = fileName.split('.');\n  const fileFormat = splitFileName[splitFileName.length - 1].toLowerCase();\n  let finalFormat = '';\n  const fileFormats = {\n    image: ['jpg', 'png', 'jpeg', 'svg'],\n    video: ['.mp4', '.3gp'],\n    document: ['.js', '.css', '.env', '.scss'],\n    application: ['.exe'],\n    archive: ['.zip', '.rar']\n  }; // const images = [ '.jpg', '.png', 'jpeg', 'svg' ]\n  // const video = [ '.mp4', '.3gp' ]\n  // const documents = [ '.js', '.css', '.env', '.scss' ]\n\n  Object.keys(fileFormats).forEach(formatArr => {\n    if (fileFormats[formatArr].includes(fileFormat)) {\n      console.log(formatArr);\n      finalFormat = formatArr;\n    }\n  });\n  console.log(finalFormat);\n  return finalFormat;\n};","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/_variables/_variables.js"],"names":["likeValueCalculator","likes","dislikes","Math","round","getAbsolutePath","req","protocol","get","generateAbsolutePath","window","location","host","clickPathGenerator","clickedItemName","pathFromContexts","trimString","string","convertVariableNameToName","name","replace","charAt","toUpperCase","slice","fileTypeDetector","fileName","splitFileName","split","fileFormat","length","toLowerCase","finalFormat","fileFormats","image","video","document","application","archive","Object","keys","forEach","formatArr","includes","console","log"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACpD,SAAQD,KAAK,GAAG,CAAR,IAAaC,QAAQ,GAAG,CAAzB,GAA+BC,IAAI,CAACC,KAAL,CAAYH,KAAK,GAAG,GAAT,IAAiBA,KAAK,GAAGC,QAAzB,CAAX,CAA/B,GACAD,KAAK,KAAK,CAAV,IAAeC,QAAQ,KAAK,CAA7B,GAAkC,CAAlC,GACKD,KAAK,KAAK,CAAV,IAAeC,QAAQ,GAAG,CAA3B,GAAgC,CAAhC,GACKD,KAAK,GAAG,CAAR,IAAaC,QAAQ,KAAK,CAA3B,GAAgC,GAAhC,GACI,CAJlB;AAMH,CAPM;AASP,OAAO,MAAMG,eAAe,GAAG,MAAOC,GAAP,IAAe;AAC1C,SAAO,OAAMA,GAAG,CAACC,QAAV,IAAqB,KAArB,IAA6B,MAAMD,GAAG,CAACE,GAAJ,CAAQ,MAAR,CAAnC,CAAP;AACH,CAFM;AAIP,OAAO,MAAMC,oBAAoB,GAAG,MAAM;AACtC,SAAOC,MAAM,CAACC,QAAP,CAAgBJ,QAAhB,GAA2B,IAA3B,GAAkCG,MAAM,CAACC,QAAP,CAAgBC,IAAzD;AACH,CAFM;AAIP,OAAO,MAAMC,kBAAkB,GAAG,CAACC,eAAD,EAAkBC,gBAAlB,KAAuC;AACrE,MAAIA,gBAAgB,KAAK,GAAzB,EAA8B;AAC1B,WAAO,OAAOD,eAAd;AACH,GAFD,MAEO;AACH,WAAOC,gBAAgB,GAAG,GAAnB,GAAyBD,eAAhC;AACH;AACJ,CANM;AAQP,OAAO,MAAME,UAAU,GAAIC,MAAD,IAAY;AAClC,SAAOD,UAAU,EAAjB;AACH,CAFM;AAIP,OAAO,MAAME,yBAAyB,GAAIC,IAAD,IAAU;AAC/C,SAAOA,IAAI,CAACC,OAAL,CAAa,UAAb,EAAyB,KAAzB,EAAgCC,MAAhC,CAAuC,CAAvC,EAA0CC,WAA1C,KAA0DH,IAAI,CAACC,OAAL,CAAa,UAAb,EAAyB,KAAzB,EAAgCG,KAAhC,CAAsC,CAAtC,CAAjE;AACH,CAFM;AAIP,OAAO,MAAMC,gBAAgB,GAAIC,QAAQ,IAAI;AAEzC,QAAMC,aAAa,GAAGD,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAtB;AACA,QAAMC,UAAU,GAAGF,aAAa,CAACA,aAAa,CAACG,MAAd,GAAuB,CAAxB,CAAb,CAAwCC,WAAxC,EAAnB;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,QAAMC,WAAW,GAAG;AAChBC,IAAAA,KAAK,EAAE,CAAE,KAAF,EAAS,KAAT,EAAgB,MAAhB,EAAwB,KAAxB,CADS;AAEhBC,IAAAA,KAAK,EAAE,CAAE,MAAF,EAAU,MAAV,CAFS;AAGhBC,IAAAA,QAAQ,EAAE,CAAE,KAAF,EAAS,MAAT,EAAiB,MAAjB,EAAyB,OAAzB,CAHM;AAIhBC,IAAAA,WAAW,EAAC,CAAC,MAAD,CAJI;AAKhBC,IAAAA,OAAO,EAAC,CAAC,MAAD,EAAQ,MAAR;AALQ,GAApB,CALyC,CAYzC;AACA;AACA;;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYP,WAAZ,EAAyBQ,OAAzB,CAAmCC,SAAS,IAAE;AAC1C,QAAIT,WAAW,CAACS,SAAD,CAAX,CAAuBC,QAAvB,CAAgCd,UAAhC,CAAJ,EAAgD;AAC5Ce,MAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;AACAV,MAAAA,WAAW,GAAGU,SAAd;AACH;AACJ,GALD;AAMAE,EAAAA,OAAO,CAACC,GAAR,CAAYb,WAAZ;AAEF,SAAOA,WAAP;AACD,CAxBM","sourcesContent":["export const likeValueCalculator = (likes, dislikes) => {\r\n    return (likes > 0 && dislikes > 0) ? (Math.round((likes * 100) / (likes + dislikes)))\r\n        : (likes === 0 && dislikes === 0) ? 0\r\n            : (likes === 0 && dislikes > 0) ? 0\r\n                : (likes > 0 && dislikes === 0) ? 100\r\n                    : 0;\r\n\r\n}\r\n\r\nexport const getAbsolutePath = async (req) => {\r\n    return await req.protocol + '://' + await req.get('Host')\r\n}\r\n\r\nexport const generateAbsolutePath = () => {\r\n    return window.location.protocol + '//' + window.location.host\r\n}\r\n\r\nexport const clickPathGenerator = (clickedItemName, pathFromContexts) => {\r\n    if (pathFromContexts === '.') {\r\n        return './' + clickedItemName\r\n    } else {\r\n        return pathFromContexts + '/' + clickedItemName\r\n    }\r\n};\r\n\r\nexport const trimString = (string) => {\r\n    return trimString()\r\n}\r\n\r\nexport const convertVariableNameToName = (name) => {\r\n    return name.replace(/([A-Z])/g, \" $1\").charAt(0).toUpperCase() + name.replace(/([A-Z])/g, \" $1\").slice(1)\r\n}\r\n\r\nexport const fileTypeDetector =  fileName => {\r\n\r\n    const splitFileName = fileName.split('.')\r\n    const fileFormat = splitFileName[splitFileName.length - 1].toLowerCase()\r\n    let finalFormat = ''\r\n    const fileFormats = {\r\n        image: [ 'jpg', 'png', 'jpeg', 'svg' ],\r\n        video: [ '.mp4', '.3gp' ],\r\n        document: [ '.js', '.css', '.env', '.scss' ],\r\n        application:['.exe'],\r\n        archive:['.zip','.rar']\r\n    }\r\n    // const images = [ '.jpg', '.png', 'jpeg', 'svg' ]\r\n    // const video = [ '.mp4', '.3gp' ]\r\n    // const documents = [ '.js', '.css', '.env', '.scss' ]\r\n    Object.keys(fileFormats).forEach(  formatArr=>{\r\n        if (fileFormats[formatArr].includes(fileFormat)){\r\n            console.log(formatArr )\r\n            finalFormat = formatArr\r\n        }\r\n    })\r\n    console.log(finalFormat )\r\n\r\n  return finalFormat\r\n}"]},"metadata":{},"sourceType":"module"}