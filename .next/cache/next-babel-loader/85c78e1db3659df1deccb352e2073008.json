{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AdminLayout from '../../../../components/layouts/AdminLayout';\nimport './customStyle.scss';\nimport { getSetting, saveCustomStyle } from '../../../../_variables/ajaxVariables';\nimport { getAbsolutePath } from '../../../../_variables/_variables';\n\nconst customStyle = props => {\n  const {\n    0: customStyle,\n    1: setCustomStyle\n  } = useState('');\n\n  const onCustomStyleChangeHandler = e => {\n    setCustomStyle(e.target.value);\n  };\n\n  const onCustomStyleSaveHandler = e => {\n    e.preventDefault();\n    contextData.dispatchState(_objectSpread({}, contextData.state, {\n      loading: true\n    }));\n    saveCustomStyle(customStyle).then(() => {\n      contextData.dispatchState(_objectSpread({}, contextData.state, {\n        loading: false\n      }));\n    });\n  };\n\n  useEffect(() => {\n    console.log(props);\n\n    if (props.customStyles.data) {\n      setCustomStyle(props.customStyles.data);\n    }\n  }, [props]);\n  return __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: \"custom-style\"\n  }, __jsx(\"form\", {\n    className: \"customStyle\",\n    onSubmit: e => onCustomStyleSaveHandler(e)\n  }, __jsx(\"textarea\", {\n    value: customStyle,\n    onChange: e => onCustomStyleChangeHandler(e)\n  }), __jsx(\"button\", {\n    className: \"submitBtn\",\n    type: \"submit\"\n  }, \"Save Custom Style\"))));\n};\n\ncustomStyle.getInitialProps = async ({\n  req\n}) => {\n  const domainName = req ? await getAbsolutePath(req) : '';\n  let customStyles;\n  const customStylesData = await getSetting('customStyle', false, domainName);\n  customStyles = customStylesData.data.setting ? customStylesData.data.setting : {};\n  return {\n    customStyles\n  };\n};\n\nexport default customStyle;","map":null,"metadata":{},"sourceType":"module"}