{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport Link from 'next/link';\n\nconst PaginationComponent = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    pages: []\n  });\n\n  let numberGen = current => {\n    let numArr = [];\n\n    if (current === 1) {\n      for (let i = 1; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current === 2) {\n      numArr.push(1);\n\n      for (let i = 2; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current === 3) {\n      numArr.push(1);\n      numArr.push(2);\n\n      for (let i = 3; i <= 7; i++) {\n        numArr.push(i);\n      }\n    }\n\n    if (current > 3) {\n      let min = current - 3;\n      let max = current + 3;\n\n      for (let i = current; i <= max; i++) {\n        numArr.push(i);\n      }\n\n      for (let i = current; i >= min; i--) {\n        numArr.push(i);\n      }\n    }\n\n    if (current > 3) {\n      numArr.push(1);\n    }\n\n    if (Math.ceil(props.totalCount / props.size)) {\n      numArr.push(parseInt(props.maxPage) - 1);\n    }\n\n    numArr = [...new Set(numArr)];\n    numArr = numArr.sort((x, y) => {\n      return x - y;\n    });\n    return numArr;\n  };\n\n  useEffect(() => {\n    if (!props.currentPage) {\n      let pageNo = 1;\n      setState({\n        pages: numberGen(pageNo)\n      });\n    } else {\n      setState({\n        pages: numberGen(props.currentPage)\n      });\n    }\n  }, [props]);\n  useEffect(() => {\n    console.log(props, state);\n  }, [props]);\n  let pageNumbersGenerator = state.pages.map(num => {\n    //\n    // if (num > 0 && num <= (Math.ceil(props.totalCount / props.size) - 1)) {\n    //     let numInBtn = num.toString();\n    //\n    //\n    // }\n    return __jsx(Link, null, \" \", __jsx(\"a\", null, \" \", num, \" \"), \" \");\n  });\n\n  if (props.isActive) {\n    return __jsx(\"div\", null, pageNumbersGenerator);\n  } else return null;\n};\n\nexport default PaginationComponent;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/includes/PaginationComponent/PaginationComponent.js"],"names":["React","useEffect","useState","useContext","useRef","Link","PaginationComponent","props","state","setState","pages","numberGen","current","numArr","i","push","min","max","Math","ceil","totalCount","size","parseInt","maxPage","Set","sort","x","y","currentPage","pageNo","console","log","pageNumbersGenerator","map","num","isActive"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport Link from 'next/link'\r\n\r\nconst PaginationComponent = props => {\r\n    const [ state, setState ] = useState({\r\n        pages: [],\r\n    });\r\n\r\n    let numberGen = (current) => {\r\n        let numArr = [];\r\n        if (current === 1) {\r\n            for (let i = 1; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 2) {\r\n            numArr.push(1)\r\n            for (let i = 2; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 3) {\r\n            numArr.push(1)\r\n            numArr.push(2)\r\n            for (let i = 3; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current > 3) {\r\n            let min = current - 3\r\n            let max = current + 3\r\n            for (let i = current; i <= max; i++) {\r\n                numArr.push(i)\r\n            }\r\n            for (let i = current; i >= min; i--) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current > 3) {\r\n            numArr.push(1)\r\n        }\r\n        if (Math.ceil(props.totalCount / props.size)) {\r\n            numArr.push(parseInt(props.maxPage) - 1)\r\n        }\r\n\r\n        numArr = [ ...new Set(numArr) ];\r\n        numArr = numArr.sort((x, y) => {\r\n            return x - y\r\n        });\r\n\r\n        return numArr\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (!props.currentPage) {\r\n            let pageNo = 1;\r\n            setState({\r\n                pages: numberGen(pageNo)\r\n            });\r\n        } else {\r\n            setState({\r\n                pages: numberGen(props.currentPage)\r\n            });\r\n        }\r\n\r\n    }, [ props ]);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props,state)\r\n    }, [ props ]);\r\n\r\n    let pageNumbersGenerator = state.pages.map(num => {\r\n        //\r\n        // if (num > 0 && num <= (Math.ceil(props.totalCount / props.size) - 1)) {\r\n        //     let numInBtn = num.toString();\r\n        //\r\n        //\r\n        // }\r\n        return (\r\n            <Link  > <a > { num } </a> </Link>\r\n        )\r\n    });\r\n    if (props.isActive) {\r\n        return (\r\n            <div>\r\n                { pageNumbersGenerator }\r\n            </div>\r\n        );\r\n    } else return null\r\n\r\n};\r\nexport default PaginationComponent;\r\n"]},"metadata":{},"sourceType":"module"}