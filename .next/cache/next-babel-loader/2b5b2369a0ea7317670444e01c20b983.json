{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from '../../../../context/AppContext';\nimport { deleteWidgets, getWidgets, updateWidgets } from '../../../../_variables/ajaxVariables';\nimport { generateAbsolutePath } from '../../../../_variables/_variables';\nimport WidgetsRenderer from '../../../includes/WidgetsRenderer/WidgetsRenderer';\n\nvar WidgetModel = function WidgetModel(props) {\n  var contextData = useContext(AppContext);\n  var title = useRef(null);\n  var categories = useRef(null);\n  var tags = useRef(null);\n  var count = useRef(null);\n  var pagination = useRef(null);\n  var redirectLink = useRef(null);\n\n  var _useState = useState({\n    title: props.data.title || '',\n    categories: props.data.categories || [],\n    tags: props.data.tags || [],\n    count: props.data.count || 6,\n    pagination: props.data.pagination || false,\n    redirectLink: props.data.redirectLink || '',\n    redirectToTitle: props.data.redirectToTitle || '',\n    type: props.data.type || 'posts',\n    metaData: props.data.metaData || [],\n    posts: props.data.posts || [],\n    comments: props.data.comments || [],\n    position: props.data.position || 'home',\n    sortBy: props.data.sortBy || '-id',\n    text: props.data.text || '',\n    textAlign: props.data.textAlign || 'center',\n    customHtml: props.data.customHtml || '',\n    metaType: props.data.metaType || '',\n    pathURL: props.data.pathURL || '',\n    LogoUrl: props.data.LogoUrl || '',\n    LogoText: props.data.LogoText || '',\n    headLine: props.data.headLine || '',\n    viewType: props.data.viewType || ''\n  }),\n      state = _useState[0],\n      setState = _useState[1]; // useEffect(() => {\n  //     console.log(props)\n  // }, [  ]);\n\n\n  var _useState2 = useState({\n    open: false\n  }),\n      widgetSettings = _useState2[0],\n      setWidgetSettings = _useState2[1];\n\n  var onOpenHandler = function onOpenHandler() {\n    widgetSettings.open ? setWidgetSettings(_objectSpread({}, widgetSettings, {\n      open: false\n    })) : setWidgetSettings(_objectSpread({}, widgetSettings, {\n      open: true\n    }));\n  };\n\n  var onDeleteHandler = function onDeleteHandler() {\n    deleteWidgets(props.data._id, contextData.absolutePath).then(function () {\n      getWidgets('all', false, window.location.origin).then(function (res) {\n        contextData.dispatchWidgetsSettings({\n          widgets: _toConsumableArray(res.data.widgets)\n        });\n      });\n    });\n  };\n\n  var onSaveHandler = function onSaveHandler() {\n    updateWidgets(props.data._id, state).then(function (res) {\n      getWidgets('all', false, window.location.origin).then(function (res) {\n        contextData.dispatchWidgetsSettings({\n          widgets: _toConsumableArray(res.data.widgets)\n        });\n      });\n    });\n  };\n\n  var onChangeHandler = function onChangeHandler(e) {\n    setState(_objectSpread({}, state, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var onNewCategoryAddHandler = function onNewCategoryAddHandler() {\n    setState(_objectSpread({}, state, {\n      categories: [].concat(_toConsumableArray(state.categories), [categories.current.value])\n    }));\n    categories.current.value = '';\n  };\n\n  var onNewTagAddHandler = function onNewTagAddHandler() {\n    setState(_objectSpread({}, state, {\n      tags: [].concat(_toConsumableArray(state.tags), [tags.current.value])\n    }));\n    tags.current.value = '';\n  };\n\n  var deleteTagHandler = function deleteTagHandler(e) {\n    setState(_objectSpread({}, state, {\n      tags: state.tags.filter(function (tag) {\n        return tag !== e.target.name;\n      })\n    }));\n  };\n\n  var deleteCategoryHandler = function deleteCategoryHandler(e) {\n    setState(_objectSpread({}, state, {\n      categories: state.categories.filter(function (category) {\n        return category !== e.target.name;\n      })\n    }));\n  };\n\n  var renderTags = state.tags.map(function (tag) {\n    return __jsx(\"button\", {\n      name: tag,\n      onClick: function onClick(e) {\n        return deleteTagHandler(e);\n      }\n    }, tag, \"X\");\n  });\n  var renderCategories = state.categories.map(function (category) {\n    return __jsx(\"button\", {\n      name: category,\n      onClick: function onClick(e) {\n        return deleteCategoryHandler(e);\n      }\n    }, category, \"X\");\n  });\n  useEffect(function () {\n    setTimeout(function () {\n      var items = ['count'];\n      items.forEach(function (item) {\n        if ([item].current) {\n          [item].current.value = state[item];\n        }\n      });\n    }, 2000);\n  }, []);\n\n  var RenderOptionByFormat = function RenderOptionByFormat() {\n    switch (state.type) {\n      case 'posts':\n        // console.log(props)\n        return __jsx(React.Fragment, null, __jsx(\"p\", null, \"Sort By:\"), __jsx(\"select\", {\n          name: \"sortBy\",\n          value: state.sortBy,\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }, __jsx(\"option\", {\n          value: \"_id\"\n        }, \"ID\"), __jsx(\"option\", {\n          value: \"views\"\n        }, \"Views\"), __jsx(\"option\", {\n          value: \"likes\"\n        }, \"Likes\")), __jsx(\"p\", null, \"View Type:\"), __jsx(\"select\", {\n          name: \"viewType\",\n          value: state.viewType,\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }, __jsx(\"option\", {\n          value: \"standard\"\n        }, \"Standard\"), __jsx(\"option\", {\n          value: \"small\"\n        }, \"Small\"), __jsx(\"option\", {\n          value: \"list\"\n        }, \"List\")), __jsx(\"p\", null, \"Categories:\"), __jsx(\"div\", {\n          className: \"inputWithAddBtn\"\n        }, __jsx(\"input\", {\n          ref: categories,\n          name: \"category\",\n          className: \"category\",\n          placeholder: \"Categories\"\n        }), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onNewCategoryAddHandler();\n          }\n        }, \"add\")), __jsx(\"div\", {\n          className: \"categoriesTags\"\n        }, renderCategories), __jsx(\"p\", null, \"Tags:\"), __jsx(\"div\", {\n          className: \"inputWithAddBtn\"\n        }, __jsx(\"input\", {\n          ref: tags,\n          className: \"tags\",\n          name: \"tags\",\n          placeholder: \"Tags\"\n        }), __jsx(\"button\", {\n          onClick: function onClick() {\n            return onNewTagAddHandler();\n          }\n        }, \"add\")), __jsx(\"div\", {\n          className: \"categoriesTags\"\n        }, renderTags), __jsx(\"p\", null, \"Count:\"), __jsx(\"input\", {\n          ref: count,\n          name: \"count\",\n          type: \"number\",\n          className: \"count\",\n          placeholder: \"count\",\n          value: state.count,\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }), __jsx(\"span\", null, \"Pagination:\"), __jsx(\"select\", {\n          name: \"pagination\",\n          value: state.pagination,\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }, __jsx(\"option\", {\n          value: false\n        }, \"false\"), __jsx(\"option\", {\n          value: true\n        }, \"true\")));\n        break;\n\n      case 'meta':\n        return __jsx(React.Fragment, null, __jsx(\"p\", null, \"Sort By:\"), __jsx(\"select\", {\n          name: \"sortBy\",\n          value: state.sortBy,\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }, __jsx(\"option\", {\n          value: \"_id\"\n        }, \"ID\"), __jsx(\"option\", {\n          value: \"count\"\n        }, \"Count\")), __jsx(\"p\", null, \"Meta Type:\"), __jsx(\"select\", {\n          name: \"metaType\",\n          value: state.metaType,\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }, __jsx(\"option\", {\n          value: \"tag\"\n        }, \"Tag\"), __jsx(\"option\", {\n          value: \"category\"\n        }, \"Category\"), __jsx(\"option\", {\n          value: \"actor\"\n        }, \"Actor\")), __jsx(\"p\", null, \"Count:\"), __jsx(\"input\", {\n          ref: count,\n          name: \"count\",\n          type: \"number\",\n          className: \"count\",\n          placeholder: \"count\",\n          value: state.count,\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }));\n        break;\n\n      case 'searchBar':\n        return __jsx(React.Fragment, null, __jsx(\"p\", null, \"path URL\"), __jsx(\"input\", {\n          name: \"pathURL\",\n          value: state.pathURL,\n          className: \"pathURL\",\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }));\n        break;\n\n      case 'logo':\n        return __jsx(React.Fragment, null, __jsx(\"p\", null, \"Logo image URL\"), __jsx(\"input\", {\n          name: \"LogoUrl\",\n          value: state.LogoUrl,\n          className: \"LogoUrl\",\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }), __jsx(\"p\", null, \"Logo Text\"), __jsx(\"input\", {\n          name: \"LogoText\",\n          value: state.LogoText,\n          className: \"LogoText\",\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }), __jsx(\"p\", null, \"Under Logo Headline Text\"), __jsx(\"input\", {\n          name: \"headLine\",\n          value: state.headLine,\n          className: \"headLine\",\n          onChange: function onChange(e) {\n            return onChangeHandler(e);\n          }\n        }));\n        break;\n\n      default:\n        return null;\n        break;\n    }\n  };\n\n  if (widgetSettings.open) {\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"widget-open-control\"\n    }, __jsx(\"p\", null, props.data.title || props.data.type), __jsx(\"button\", {\n      onClick: function onClick() {\n        return onOpenHandler();\n      }\n    }, widgetSettings.open ? 'close' : 'open')), __jsx(\"div\", {\n      className: \"widgetModel\"\n    }, __jsx(\"div\", {\n      className: \"widgetInfo\"\n    }, __jsx(\"label\", {\n      className: \"widgetId\"\n    }, __jsx(\"p\", null, \"ID :\"), \" \", __jsx(\"p\", null, props.data._id))), __jsx(\"p\", null, \"Title:\"), __jsx(\"input\", {\n      name: \"title\",\n      ref: title,\n      className: \"title\",\n      placeholder: \"Title\",\n      value: state.title,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }), __jsx(\"p\", null, \"Type:\"), __jsx(\"select\", {\n      name: \"type\",\n      value: state.type,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }, __jsx(\"option\", {\n      value: \"posts\"\n    }, \"Posts\"), __jsx(\"option\", {\n      value: \"text\"\n    }, \"Text\"), __jsx(\"option\", {\n      value: \"logo\"\n    }, \"Logo\"), __jsx(\"option\", {\n      value: \"recentComments\"\n    }, \"Recent Comments\"), __jsx(\"option\", {\n      value: \"search\"\n    }, \"Search\"), __jsx(\"option\", {\n      value: \"meta\"\n    }, \"Meta\"), __jsx(\"option\", {\n      value: \"video\"\n    }, \"Video\"), __jsx(\"option\", {\n      value: \"navigationMenu\"\n    }, \"Navigation Menu\")), __jsx(\"p\", null, \"Position:\"), __jsx(\"select\", {\n      name: \"position\",\n      value: state.position,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }, __jsx(\"option\", {\n      value: \"home\"\n    }, \"Home\"), __jsx(\"option\", {\n      value: \"header\"\n    }, \"Header\"), __jsx(\"option\", {\n      value: \"homePageSidebar\"\n    }, \"Home Page Sidebar\"), __jsx(\"option\", {\n      value: \"postPageSidebar\"\n    }, \"Post Page SideBar\"), __jsx(\"option\", {\n      value: \"postsPageSidebar\"\n    }, \"Posts Page SideBar\"), __jsx(\"option\", {\n      value: \"categoriesPageSidebar\"\n    }, \"Categories Page SideBar\"), __jsx(\"option\", {\n      value: \"tagsPagesSidebar\"\n    }, \"Tags Page SideBar\"), __jsx(\"option\", {\n      value: \"actorsPagesSidebar\"\n    }, \"Actors Page SideBar\"), __jsx(\"option\", {\n      value: \"footer\"\n    }, \"footer\")), __jsx(\"p\", null, \"Text:\"), __jsx(\"textarea\", {\n      name: \"text\",\n      value: state.text,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }), __jsx(\"p\", null, \"Text Align:\"), __jsx(\"select\", {\n      name: \"textAlign\",\n      value: state.textAlign,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }, __jsx(\"option\", {\n      value: \"left\"\n    }, \"Left\"), __jsx(\"option\", {\n      value: \"center\"\n    }, \"Center\"), __jsx(\"option\", {\n      value: \"right\"\n    }, \"Right\")), __jsx(\"p\", null, \"Redirect Link Title\"), __jsx(\"input\", {\n      className: \"redirectToTitle\",\n      name: \"redirectToTitle\",\n      placeholder: \"Title for Redirect Link\",\n      value: state.redirectToTitle,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }), __jsx(\"p\", null, \"Redirect Link URL:\"), __jsx(\"input\", {\n      className: \"redirectLink\",\n      name: \"redirectLink\",\n      placeholder: \"Redirect\",\n      value: state.redirectLink,\n      onChange: function onChange(e) {\n        return onChangeHandler(e);\n      }\n    }), __jsx(RenderOptionByFormat, null), __jsx(WidgetsRenderer, {\n      widgets: [state],\n      position: state.position\n    }), __jsx(\"div\", {\n      className: \"control\"\n    }, __jsx(\"button\", {\n      onClick: function onClick() {\n        return onSaveHandler();\n      }\n    }, \"Save\"), __jsx(\"button\", {\n      onClick: function onClick() {\n        return onDeleteHandler();\n      }\n    }, \"Delete\"))));\n  } else {\n    return __jsx(\"div\", {\n      className: \"widget-open-control\"\n    }, __jsx(\"p\", null, props.data.title || props.data.type), __jsx(\"button\", {\n      onClick: function onClick() {\n        return onOpenHandler();\n      }\n    }, widgetSettings.open ? 'close' : 'open'));\n  }\n};\n\nexport default WidgetModel;","map":null,"metadata":{},"sourceType":"module"}