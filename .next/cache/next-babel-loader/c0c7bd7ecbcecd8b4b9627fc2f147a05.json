{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent';\n\nvar tags = function tags(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState({\n    metaData: [],\n    totalCount: 0\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n  }, [props]);\n  useEffect(function () {\n    if (props.navigation) {\n      contextData.dispatchNavigationData(props.navigation.data);\n    }\n\n    if (props.identity) {\n      contextData.dispatchSiteIdentity(function (siteIdentity) {\n        return _objectSpread({}, siteIdentity, {}, props.identity);\n      });\n    } // if (props.tags.length){\n    //     setState({\n    //         ...state,\n    //         metaData: props.tags\n    //     })\n    // }\n    // else if (props.tags.length<1){\n    // getMeta({\n    //     type: 'tag',\n    //     pageNo: 1,\n    //     size: 100,\n    //     searchForImageIn:'tags',\n    //     sortBy:'-_id'\n    // }).then(res=>{\n    //     console.log(res )\n    //     setState({\n    //         ...state,\n    //         metaData: res.data.metas\n    //     })\n    // }).catch(err=>{\n    //     console.log( err)\n    // })\n    // }\n\n  }, [props]);\n  var renderTags = props.tagsSource.metas.map(function (meta) {\n    if (meta.count > 0) {\n      return __jsx(TagElement, {\n        key: meta._id,\n        imageUrl: meta.imageUrl,\n        noImageUrl: meta.noImageUrl,\n        name: meta.name,\n        count: meta.count\n      });\n    }\n  });\n  return __jsx(React.Fragment, null, __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"tags\"\n  }, renderTags), __jsx(PaginationComponent, {\n    isActive: true,\n    currentPage: props.getTagsData.pageNo,\n    totalCount: state.totalCount,\n    size: props.getTagsData.size,\n    maxPage: Math.ceil(_parseInt(props.tagsSource.totalCount) / _parseInt(props.getTagsData.size)) - 1 // mainLinkUrl='http://localhost:3000/posts'\n\n  })));\n};\n\ntags.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, navigation, identity, tagsSource, identityData, navigationData, getTagsData, tagsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 3:\n          identityData = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 6:\n          navigationData = _context.sent;\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          getTagsData = {\n            type: 'tag',\n            searchForImageIn: 'tags',\n            pageNo: _parseInt(query.page) || 1,\n            size: _parseInt(query.size) || _parseInt(identity.tagsCountPerPage) || 30,\n            sort: query.sort || 'latest'\n          };\n          _context.next = 12;\n          return _regeneratorRuntime.awrap(getMeta(getTagsData));\n\n        case 12:\n          tagsData = _context.sent;\n          tagsSource = tagsData.data ? tagsData.data : {\n            tags: [],\n            totalCount: 0\n          };\n          return _context.abrupt(\"return\", {\n            identity: identity,\n            navigation: navigation,\n            query: query,\n            tagsSource: tagsSource,\n            getTagsData: getTagsData\n          });\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default tags;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/tags/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","AppContext","TagElement","CategoryElement","PaginationComponent","tags","props","contextData","metaData","totalCount","state","setState","console","log","navigation","dispatchNavigationData","data","identity","dispatchSiteIdentity","siteIdentity","renderTags","tagsSource","metas","map","meta","count","_id","imageUrl","noImageUrl","name","getTagsData","pageNo","size","Math","ceil","getInitialProps","pathname","query","req","res","err","identityData","navigationData","setting","type","searchForImageIn","page","tagsCountPerPage","sort","tagsData"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport TagElement from '../../../components/includes/TagElement/TagElement'\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement'\r\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent'\r\n\r\nconst tags = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        metaData: [],\r\n        totalCount: 0\r\n    });\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props )\r\n    }, [props]);\r\n    useEffect(() => {\r\n        if (props.navigation) {\r\n            contextData.dispatchNavigationData(props.navigation.data)\r\n        }\r\n        if (props.identity) {\r\n            contextData.dispatchSiteIdentity(siteIdentity => ({\r\n                ...siteIdentity,\r\n                ...props.identity\r\n            }))\r\n        }\r\n        // if (props.tags.length){\r\n        //     setState({\r\n        //         ...state,\r\n        //         metaData: props.tags\r\n        //     })\r\n        // }\r\n        // else if (props.tags.length<1){\r\n            // getMeta({\r\n            //     type: 'tag',\r\n            //     pageNo: 1,\r\n            //     size: 100,\r\n            //     searchForImageIn:'tags',\r\n            //     sortBy:'-_id'\r\n            // }).then(res=>{\r\n            //     console.log(res )\r\n            //     setState({\r\n            //         ...state,\r\n            //         metaData: res.data.metas\r\n            //     })\r\n            // }).catch(err=>{\r\n            //     console.log( err)\r\n            // })\r\n        // }\r\n    }, [ props ]);\r\n\r\n    const renderTags = props.tagsSource.metas.map(meta => {\r\n        if (meta.count>0){\r\n            return (\r\n                <TagElement key={meta._id} imageUrl={meta.imageUrl} noImageUrl={meta.noImageUrl} name={meta.name} count={meta.count}/>\r\n            )\r\n        }\r\n\r\n    })\r\n    return (\r\n        <>\r\n        <AppLayout>\r\n            <div className='tags'>\r\n                {renderTags}\r\n            </div>\r\n            <PaginationComponent\r\n                isActive={ true }\r\n                currentPage={props.getTagsData.pageNo }\r\n                totalCount={ state.totalCount }\r\n                size={ props.getTagsData.size }\r\n                maxPage={ Math.ceil(parseInt(props.tagsSource.totalCount) / parseInt(props.getTagsData.size))- 1 }\r\n                // mainLinkUrl='http://localhost:3000/posts'\r\n            />\r\n        </AppLayout>\r\n            </>\r\n    );\r\n};\r\n\r\n\r\n\r\ntags.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let tagsSource;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n\r\n    const getTagsData = {\r\n        type: 'tag',\r\n        searchForImageIn:'tags',\r\n        pageNo: parseInt(query.page) || 1,\r\n        size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) ||30,\r\n        sort: query.sort || 'latest',\r\n\r\n    }\r\n\r\n\r\n        const tagsData = await getMeta(getTagsData)\r\n        tagsSource = tagsData.data ? tagsData.data : {tags:[],totalCount:0}\r\n\r\n\r\n\r\n    return { identity, navigation, query, tagsSource,getTagsData }\r\n}\r\nexport default tags;\r\n"]},"metadata":{},"sourceType":"module"}