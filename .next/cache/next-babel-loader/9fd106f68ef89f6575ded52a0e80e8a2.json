{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\n\nvar tags = function tags(props) {\n  var _useState = useState({\n    metaData: []\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  useEffect(function () {\n    console.log(props);\n  }, [props]); // useEffect(() => {\n  //     if (props.navigation) {\n  //         contextData.dispatchNavigationData(props.navigation.data)\n  //     }\n  //     if (props.identity) {\n  //         contextData.dispatchSiteIdentity(siteIdentity => ({\n  //             ...siteIdentity,\n  //             ...props.identity\n  //         }))\n  //     }\n  //     if (props.tags.length){\n  //         setState({\n  //             ...state,\n  //             metaData: props.categories\n  //         })\n  //     }else if (props.tags.length<1){\n  //         getMeta({\n  //             type: 'tag',\n  //             pageNo: 1,\n  //             size: 100\n  //         }).then(res=>{\n  //             console.log(res )\n  //             setState({\n  //                 ...state,\n  //                 metaData: res.data.meta\n  //             })\n  //         }).catch(err=>{\n  //             console.log( err)\n  //         })\n  //     }\n  // }, [ props ]);\n\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"tags\"\n  }));\n};\n\ntags.getInitialProps = function _callee(_ref) {\n  var pathname, query, req, res, err, navigation, identity, tags, identityData, navigationData, tagsData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          pathname = _ref.pathname, query = _ref.query, req = _ref.req, res = _ref.res, err = _ref.err;\n          tags = [];\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(getSetting('identity'));\n\n        case 4:\n          identityData = _context.sent;\n          _context.next = 7;\n          return _regeneratorRuntime.awrap(getSetting('navigation'));\n\n        case 7:\n          navigationData = _context.sent;\n\n          if (!query.meta) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(getMeta({\n            type: query.meta,\n            pageNo: 1,\n            size: 100\n          }));\n\n        case 11:\n          tagsData = _context.sent;\n          tags = tagsData.data.meta ? tagsData.data.meta : [];\n\n        case 13:\n          identity = identityData.data.setting ? identityData.data.setting.data : {};\n          navigation = navigationData.data.setting ? navigationData.data.setting : {};\n          return _context.abrupt(\"return\", {\n            identity: identity,\n            navigation: navigation,\n            query: query,\n            tags: tags\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default tags;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/tags/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","tags","props","metaData","state","setState","console","log","getInitialProps","pathname","query","req","res","err","identityData","navigationData","meta","type","pageNo","size","tagsData","data","identity","setting","navigation"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,OAAOC,SAAP,MAAsB,uCAAtB;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SAASC,OAAT,QAAwB,wCAAxB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AAAA,kBACUP,QAAQ,CAAC;AACjCQ,IAAAA,QAAQ,EAAE;AADuB,GAAD,CADlB;AAAA,MACVC,KADU;AAAA,MACHC,QADG;;AAIlBX,EAAAA,SAAS,CAAC,YAAM;AACZY,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CAJkB,CAOlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SACI,MAAC,SAAD,QACI;AAAK,IAAA,SAAS,EAAC;AAAf,IADJ,CADJ;AAOH,CA7CD;;AAgDAD,IAAI,CAACO,eAAL,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,QAAT,QAASA,QAAT,EAAmBC,KAAnB,QAAmBA,KAAnB,EAA0BC,GAA1B,QAA0BA,GAA1B,EAA+BC,GAA/B,QAA+BA,GAA/B,EAAoCC,GAApC,QAAoCA,GAApC;AAGfZ,UAAAA,IAHe,GAGR,EAHQ;AAAA;AAAA,2CAIQF,UAAU,CAAC,UAAD,CAJlB;;AAAA;AAIbe,UAAAA,YAJa;AAAA;AAAA,2CAKUf,UAAU,CAAC,YAAD,CALpB;;AAAA;AAKbgB,UAAAA,cALa;;AAAA,eAOfL,KAAK,CAACM,IAPS;AAAA;AAAA;AAAA;;AAAA;AAAA,2CAQQhB,OAAO,CAAC;AAC3BiB,YAAAA,IAAI,EAAEP,KAAK,CAACM,IADe;AAE3BE,YAAAA,MAAM,EAAE,CAFmB;AAG3BC,YAAAA,IAAI,EAAE;AAHqB,WAAD,CARf;;AAAA;AAQTC,UAAAA,QARS;AAafnB,UAAAA,IAAI,GAAGmB,QAAQ,CAACC,IAAT,CAAcL,IAAd,GAAqBI,QAAQ,CAACC,IAAT,CAAcL,IAAnC,GAA0C,EAAjD;;AAbe;AAgBnBM,UAAAA,QAAQ,GAAGR,YAAY,CAACO,IAAb,CAAkBE,OAAlB,GAA4BT,YAAY,CAACO,IAAb,CAAkBE,OAAlB,CAA0BF,IAAtD,GAA6D,EAAxE;AACAG,UAAAA,UAAU,GAAGT,cAAc,CAACM,IAAf,CAAoBE,OAApB,GAA8BR,cAAc,CAACM,IAAf,CAAoBE,OAAlD,GAA4D,EAAzE;AAjBmB,2CAkBZ;AAAED,YAAAA,QAAQ,EAARA,QAAF;AAAYE,YAAAA,UAAU,EAAVA,UAAZ;AAAwBd,YAAAA,KAAK,EAALA,KAAxB;AAA+BT,YAAAA,IAAI,EAAJA;AAA/B,WAlBY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAoBA,eAAeA,IAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\n\r\nconst tags = props => {\r\n    const [ state, setState ] = useState({\r\n        metaData: []\r\n    });\r\n    useEffect(() => {\r\n        console.log(props )\r\n    }, [props]);\r\n    // useEffect(() => {\r\n    //     if (props.navigation) {\r\n    //         contextData.dispatchNavigationData(props.navigation.data)\r\n    //     }\r\n    //     if (props.identity) {\r\n    //         contextData.dispatchSiteIdentity(siteIdentity => ({\r\n    //             ...siteIdentity,\r\n    //             ...props.identity\r\n    //         }))\r\n    //     }\r\n    //     if (props.tags.length){\r\n    //         setState({\r\n    //             ...state,\r\n    //             metaData: props.categories\r\n    //         })\r\n    //     }else if (props.tags.length<1){\r\n    //         getMeta({\r\n    //             type: 'tag',\r\n    //             pageNo: 1,\r\n    //             size: 100\r\n    //         }).then(res=>{\r\n    //             console.log(res )\r\n    //             setState({\r\n    //                 ...state,\r\n    //                 metaData: res.data.meta\r\n    //             })\r\n    //         }).catch(err=>{\r\n    //             console.log( err)\r\n    //         })\r\n    //     }\r\n    // }, [ props ]);\r\n    return (\r\n        <AppLayout>\r\n            <div className='tags'>\r\n\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\n\r\ntags.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let tags = []\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n\r\n    if (query.meta) {\r\n        const tagsData = await getMeta({\r\n            type: query.meta,\r\n            pageNo: 1,\r\n            size: 100\r\n        })\r\n        tags = tagsData.data.meta ? tagsData.data.meta : []\r\n    }\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    return { identity, navigation, query, tags }\r\n}\r\nexport default tags;\r\n"]},"metadata":{},"sourceType":"module"}