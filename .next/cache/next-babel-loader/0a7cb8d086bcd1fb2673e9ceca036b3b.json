{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { getPost } from '../../../_variables/ajaxPostsVariables';\nimport { getAbsolutePath } from '../../../_variables/_variables';\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\nimport TitleDescription from \"../../../components/adminIncludes/PostComponents/TitleDescription/TitleDescription\";\nimport ActionOnPost from \"../../../components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost\";\nimport DropDownWidget from \"../../../components/adminIncludes/PostComponents/DropDownWidget/DropDownWidget\";\nimport { AppContext } from \"../../../context/AppContext\";\nimport Format from \"../../../components/adminIncludes/PostComponents/Format/Format\";\nimport PostCategoriesTagsActors from \"../../../components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors\";\nimport VideoInformation from \"../../../components/adminIncludes/PostComponents/VideoInformation/VideoInformation\";\nimport withRouter from \"next/dist/client/with-router\";\nimport TextInputWithUploadBtn from '../../../components/adminIncludes/PostComponents/TextInputWithUploadBtn/TextInputWithUploadBtn';\nimport ImagePreview from '../../../components/adminIncludes/PostComponents/ImagePreview/ImagePreview';\nimport Link from 'next/link';\n\nconst Index = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    tags: [],\n    categories: [],\n    actors: [],\n    inSlideShow: false\n  });\n\n  const onChangeHandler = async e => {\n    setState(_objectSpread({}, state, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  const onPostMetaChangeHandler = (type, data) => {\n    setState(_objectSpread({}, state, {\n      [type]: data\n    }));\n  };\n\n  useEffect(() => {\n    if (props.router.query.new && state._id) {\n      props.router.reload();\n    } else {\n      setState(props.post);\n    }\n  }, [props]);\n  useEffect(() => {\n    console.log(props.router);\n  }, [props]);\n  return __jsx(React.Fragment, null, __jsx(AdminLayout, null, __jsx(Link, {\n    href: \"/admin/post?new=1\"\n  }, __jsx(\"a\", {\n    className: \"newPostLinkAdminPanel\"\n  }, \"New Post\")), __jsx(\"div\", {\n    className: \"Post\"\n  }, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(TitleDescription, {\n    postData: state,\n    onChangeHandler: onChangeHandler\n  }), __jsx(TextInputWithUploadBtn, {\n    postData: state,\n    onChangeHandler: onChangeHandler,\n    name: \"mainThumbnail\",\n    title: \"Main thumbnail\"\n  }), __jsx(ImagePreview, {\n    postData: state\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    component: VideoInformation,\n    title: \"Video Information\",\n    onChangeHandler: onChangeHandler\n  })), __jsx(\"div\", {\n    className: \"side\"\n  }, __jsx(DropDownWidget, {\n    postData: state,\n    component: ActionOnPost,\n    title: state.status,\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    component: Format,\n    title: \"Format\",\n    onChangeHandler: onChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    isNewPost: props.query.new === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"categories\",\n    title: \"Post Category\",\n    onChangeHandler: onChangeHandler,\n    onPostMetaChangeHandler: onPostMetaChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    isNewPost: props.query.new === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"tags\",\n    title: \"Post Tags\",\n    onChangeHandler: onChangeHandler,\n    onPostMetaChangeHandler: onPostMetaChangeHandler\n  }), __jsx(DropDownWidget, {\n    postData: state,\n    isNewPost: props.query.new === 'true',\n    component: PostCategoriesTagsActors,\n    type: \"actors\",\n    title: \"Post Actors\",\n    onChangeHandler: onChangeHandler,\n    onPostMetaChangeHandler: onPostMetaChangeHandler\n  })))));\n};\n\nIndex.getInitialProps = async ({\n  query,\n  req\n}) => {\n  const domainName = req ? await getAbsolutePath(req) : '';\n  let post;\n  let postData;\n  let requestBody;\n  const newPostData = {\n    status: 'published',\n    postType: 'video',\n    tags: [],\n    categories: [],\n    actors: [],\n    inSlideShow: false,\n    quality: '2160p',\n    views: 0,\n    likes: 0,\n    disLikes: 0\n  };\n\n  if (query.new) {\n    post = newPostData;\n  } else if (query.postTitle || query.id) {\n    requestBody = {\n      postTitle: query.postTitle,\n      _id: query.id\n    };\n    postData = await getPost(requestBody, true, domainName);\n    post = postData.data ? postData.data.post : newPostData;\n  }\n\n  return {\n    post,\n    query\n  };\n};\n\nexport default withRouter(Index);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/post/index.js"],"names":["React","useEffect","useState","useContext","useRef","getPost","getAbsolutePath","AdminLayout","TitleDescription","ActionOnPost","DropDownWidget","AppContext","Format","PostCategoriesTagsActors","VideoInformation","withRouter","TextInputWithUploadBtn","ImagePreview","Link","Index","props","contextData","state","setState","tags","categories","actors","inSlideShow","onChangeHandler","e","target","name","value","onPostMetaChangeHandler","type","data","router","query","new","_id","reload","post","console","log","status","getInitialProps","req","domainName","postData","requestBody","newPostData","postType","quality","views","likes","disLikes","postTitle","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { getPost } from '../../../_variables/ajaxPostsVariables';\r\nimport { getAbsolutePath } from '../../../_variables/_variables'\r\n\r\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\r\nimport TitleDescription from \"../../../components/adminIncludes/PostComponents/TitleDescription/TitleDescription\";\r\nimport ActionOnPost from \"../../../components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost\";\r\nimport DropDownWidget from \"../../../components/adminIncludes/PostComponents/DropDownWidget/DropDownWidget\";\r\nimport { AppContext } from \"../../../context/AppContext\";\r\nimport Format from \"../../../components/adminIncludes/PostComponents/Format/Format\";\r\nimport PostCategoriesTagsActors from \"../../../components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors\";\r\nimport VideoInformation from \"../../../components/adminIncludes/PostComponents/VideoInformation/VideoInformation\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport TextInputWithUploadBtn from '../../../components/adminIncludes/PostComponents/TextInputWithUploadBtn/TextInputWithUploadBtn'\r\nimport ImagePreview from '../../../components/adminIncludes/PostComponents/ImagePreview/ImagePreview';\r\nimport Link from 'next/link'\r\n\r\nconst Index = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ state, setState ] = useState({\r\n        tags: [],\r\n        categories: [],\r\n        actors: [],\r\n        inSlideShow: false\r\n    })\r\n\r\n    const onChangeHandler = async e => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    const onPostMetaChangeHandler = (type, data) => {\r\n        setState({\r\n            ...state,\r\n            [type]: data\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.router.query.new&& state._id){\r\n            props.router.reload()\r\n        }else {\r\n            setState(props.post)\r\n        }\r\n    }, [ props ]);\r\n\r\n    useEffect(() => {\r\n        console.log(props.router )\r\n    }, [props]);\r\n\r\n    return (\r\n        <>\r\n            <AdminLayout>\r\n                <Link href='/admin/post?new=1'><a className='newPostLinkAdminPanel'>New Post</a></Link>\r\n                <div className='Post'>\r\n\r\n                    <div className=\"content\">\r\n                        <TitleDescription postData={ state } onChangeHandler={ onChangeHandler }/>\r\n                        <TextInputWithUploadBtn postData={ state } onChangeHandler={ onChangeHandler } name='mainThumbnail' title='Main thumbnail'/>\r\n                        <ImagePreview postData={ state }/>\r\n                        <DropDownWidget postData={ state } component={ VideoInformation } title='Video Information' onChangeHandler={ onChangeHandler }/>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"side\">\r\n                        <DropDownWidget postData={ state } component={ ActionOnPost } title={ state.status } onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget postData={ state } component={ Format } title='Format' onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget postData={ state } isNewPost={ props.query.new === 'true' }\r\n                                        component={ PostCategoriesTagsActors }\r\n                                        type='categories' title='Post Category'\r\n                                        onChangeHandler={ onChangeHandler } onPostMetaChangeHandler={ onPostMetaChangeHandler }/>\r\n                        <DropDownWidget postData={ state } isNewPost={ props.query.new === 'true' }\r\n                                        component={ PostCategoriesTagsActors }\r\n                                        type='tags' title='Post Tags'\r\n                                        onChangeHandler={ onChangeHandler } onPostMetaChangeHandler={ onPostMetaChangeHandler }/>\r\n                        <DropDownWidget postData={ state } isNewPost={ props.query.new === 'true' }\r\n                                        component={ PostCategoriesTagsActors }\r\n                                        type='actors' title='Post Actors'\r\n                                        onChangeHandler={ onChangeHandler } onPostMetaChangeHandler={ onPostMetaChangeHandler }/>\r\n                    </div>\r\n\r\n                </div>\r\n            </AdminLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nIndex.getInitialProps = async ({ query, req }) => {\r\n    const domainName = req ? await getAbsolutePath(req) : '';\r\n    let post;\r\n    let postData\r\n    let requestBody;\r\n\r\n    const newPostData = {\r\n        status: 'published',\r\n        postType: 'video',\r\n        tags: [],\r\n        categories: [],\r\n        actors: [],\r\n        inSlideShow: false,\r\n        quality: '2160p',\r\n        views: 0,\r\n        likes: 0,\r\n        disLikes: 0\r\n    }\r\n\r\n    if (query.new) {\r\n        post = newPostData\r\n    } else if (query.postTitle || query.id) {\r\n        requestBody = {\r\n            postTitle: query.postTitle,\r\n            _id: query.id,\r\n        };\r\n        postData = await getPost(requestBody, true, domainName)\r\n        post = postData.data ? postData.data.post : newPostData\r\n    }\r\n\r\n    return { post, query }\r\n};\r\nexport default withRouter(Index);"]},"metadata":{},"sourceType":"module"}