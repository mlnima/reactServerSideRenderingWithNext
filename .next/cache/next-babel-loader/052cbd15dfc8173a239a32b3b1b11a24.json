{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\nimport Filters from \"../../../components/adminIncludes/PostsComponents/Filters/Filters\";\nimport PostsDataTable from \"../../../components/adminIncludes/PostsComponents/PostsDataTable/PostsDataTable\";\nimport { getAbsolutePath } from '../../../_variables/_variables';\nimport { getPosts } from '../../../_variables/ajaxPostsVariables';\n\nconst adminPosts = props => {\n  // useEffect(() => {\n  //     console.log( props)\n  // }, [props]);\n  return __jsx(React.Fragment, null, __jsx(AdminLayout, null, __jsx(\"div\", {\n    className: \"Posts\"\n  }, __jsx(Filters, props), __jsx(PostsDataTable, props))));\n};\n\nadminPosts.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  const domainName = req ? await getAbsolutePath(req) : '';\n  let postsSource;\n  const getPostsData = {\n    size: parseInt(query.size) || 30,\n    pageNo: parseInt(query.page) || 1,\n    postType: query.type || 'all',\n    fields: ['author', 'title', 'mainThumbnail', 'status', 'actors', 'tags', 'categories'],\n    keyword: query.keyword || '',\n    author: query.author || 'all',\n    actor: query.actor || 'all',\n    status: query.status || 'all',\n    tag: query.tag || 'all',\n    category: query.category || 'all',\n    sort: query.sort || 'latest'\n  };\n  const postsData = await getPosts(getPostsData, true, domainName);\n  postsSource = postsData.data ? postsData.data : [];\n  return {\n    query,\n    postsSource,\n    getPostsData,\n    pathname\n  };\n};\n\nexport default adminPosts;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/admin/posts/index.js"],"names":["React","useEffect","AdminLayout","Filters","PostsDataTable","getAbsolutePath","getPosts","adminPosts","props","getInitialProps","pathname","query","req","res","err","domainName","postsSource","getPostsData","size","parseInt","pageNo","page","postType","type","fields","keyword","author","actor","status","tag","category","sort","postsData","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,yCAAxB;AACA,OAAOC,OAAP,MAAoB,mEAApB;AACA,OAAOC,cAAP,MAA2B,iFAA3B;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,QAAT,QAAyB,wCAAzB;;AAEA,MAAMC,UAAU,GAAGC,KAAK,IAAI;AAExB;AACA;AACA;AAEA,SACI,4BACI,MAAC,WAAD,QACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,MAAC,OAAD,EAAaA,KAAb,CADJ,EAEI,MAAC,cAAD,EAAoBA,KAApB,CAFJ,CADJ,CADJ,CADJ;AAUH,CAhBD;;AAkBAD,UAAU,CAACE,eAAX,GAA6B,OAAO;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,KAAZ;AAAmBC,EAAAA,GAAnB;AAAwBC,EAAAA,GAAxB;AAA6BC,EAAAA;AAA7B,CAAP,KAA8C;AACvE,QAAMC,UAAU,GAAGH,GAAG,GAAG,MAAMP,eAAe,CAACO,GAAD,CAAxB,GAAgC,EAAtD;AACA,MAAII,WAAJ;AACA,QAAMC,YAAY,GAAG;AACjBC,IAAAA,IAAI,EAAEC,QAAQ,CAACR,KAAK,CAACO,IAAP,CAAR,IAAyB,EADd;AAEjBE,IAAAA,MAAM,EAAED,QAAQ,CAACR,KAAK,CAACU,IAAP,CAAR,IAAwB,CAFf;AAGjBC,IAAAA,QAAQ,EAAEX,KAAK,CAACY,IAAN,IAAc,KAHP;AAIjBC,IAAAA,MAAM,EAAE,CAAE,QAAF,EAAY,OAAZ,EAAqB,eAArB,EAAsC,QAAtC,EAAgD,QAAhD,EAA0D,MAA1D,EAAkE,YAAlE,CAJS;AAKjBC,IAAAA,OAAO,EAAEd,KAAK,CAACc,OAAN,IAAiB,EALT;AAMjBC,IAAAA,MAAM,EAAEf,KAAK,CAACe,MAAN,IAAgB,KANP;AAOjBC,IAAAA,KAAK,EAAEhB,KAAK,CAACgB,KAAN,IAAe,KAPL;AAQjBC,IAAAA,MAAM,EAAEjB,KAAK,CAACiB,MAAN,IAAgB,KARP;AASjBC,IAAAA,GAAG,EAAElB,KAAK,CAACkB,GAAN,IAAa,KATD;AAUjBC,IAAAA,QAAQ,EAAEnB,KAAK,CAACmB,QAAN,IAAkB,KAVX;AAWjBC,IAAAA,IAAI,EAAEpB,KAAK,CAACoB,IAAN,IAAc;AAXH,GAArB;AAaA,QAAMC,SAAS,GAAG,MAAM1B,QAAQ,CAACW,YAAD,EAAe,IAAf,EAAqBF,UAArB,CAAhC;AACAC,EAAAA,WAAW,GAAGgB,SAAS,CAACC,IAAV,GAAiBD,SAAS,CAACC,IAA3B,GAAkC,EAAhD;AAEA,SAAO;AAAEtB,IAAAA,KAAF;AAASK,IAAAA,WAAT;AAAsBC,IAAAA,YAAtB;AAAoCP,IAAAA;AAApC,GAAP;AACH,CApBD;;AAsBA,eAAeH,UAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\r\nimport Filters from \"../../../components/adminIncludes/PostsComponents/Filters/Filters\";\r\nimport PostsDataTable from \"../../../components/adminIncludes/PostsComponents/PostsDataTable/PostsDataTable\";\r\nimport { getAbsolutePath } from '../../../_variables/_variables'\r\nimport { getPosts } from '../../../_variables/ajaxPostsVariables'\r\n\r\nconst adminPosts = props => {\r\n\r\n    // useEffect(() => {\r\n    //     console.log( props)\r\n    // }, [props]);\r\n\r\n    return (\r\n        <>\r\n            <AdminLayout>\r\n                <div className='Posts'>\r\n                    <Filters {...props}/>\r\n                    <PostsDataTable {...props}/>\r\n                </div>\r\n            </AdminLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nadminPosts.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    const domainName = req ? await getAbsolutePath(req) : ''\r\n    let postsSource;\r\n    const getPostsData = {\r\n        size: parseInt(query.size)  || 30,\r\n        pageNo: parseInt(query.page) || 1,\r\n        postType: query.type || 'all',\r\n        fields: [ 'author', 'title', 'mainThumbnail', 'status', 'actors', 'tags', 'categories' ],\r\n        keyword: query.keyword || '',\r\n        author: query.author || 'all',\r\n        actor: query.actor || 'all',\r\n        status: query.status || 'all',\r\n        tag: query.tag || 'all',\r\n        category: query.category || 'all',\r\n        sort: query.sort || 'latest',\r\n    }\r\n    const postsData = await getPosts(getPostsData, true, domainName)\r\n    postsSource = postsData.data ? postsData.data : []\r\n\r\n    return { query, postsSource, getPostsData, pathname }\r\n}\r\n\r\nexport default adminPosts;"]},"metadata":{},"sourceType":"module"}