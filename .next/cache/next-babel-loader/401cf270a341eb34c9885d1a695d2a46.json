{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef, createRef } from 'react'; // import {Link, withRouter} from \"react-router-dom\";\n// import {updatePostStatus, deletePost, postsBulkAction, getPosts} from \"../../../../../variables/_ajaxPostsVariable\";\n// import QuickEdit from \"../QuickEdit/QuickEdit\";\n// import {adminTokenValidator} from \"../../../../../variables/_ajaxAuthVariables\";\n\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from \"next/dist/client/with-router\";\nimport Link from \"next/link\";\nimport './BodyTable.scss';\n\nconst BodyTable = props => {\n  const contextData = useContext(AppContext);\n  let selectBoxes = useRef(contextData.adminPosts.map(() => createRef()));\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    hoveredId: ''\n  });\n\n  const setData = () => {\n    // getPosts(\n    //     contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo,\n    //     ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status,\n    //     contextData.postsData.author, contextData.postsData.keyword).then(res => {\n    //     contextData.setPostsData({\n    //         ...contextData.postsData,\n    //         posts: res.data.posts,\n    //         error: res.data.error,\n    //         totalCount: res.data.totalCount\n    //     });\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         loading: false\n    //     });\n    // }).catch(() => {\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         login: false\n    //     })\n    // })\n    return null;\n  };\n\n  const onTrashHandler = () => {// contextData.setState({\n    //     ...contextData.state,\n    //     loading: true\n    // });\n    // postsBulkAction([state.hoveredId], 'Trash').then(res => {\n    //     setData()\n    // }).catch(err => {\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         loading: false\n    //     });\n    // })\n  }; // const onDeletePermanentlyHandler = (id)=>{\n  //\n  // }\n\n\n  const onDeletePermanentlyHandler = () => {// deletePost(state.hoveredId).then(res => {\n    //     const posts = contextData.postsData.posts.filter(post => {\n    //         return post._id !== state.hoveredId\n    //     });\n    //     const report = contextData.state.reports.push(res.data.message)\n    //     contextData.setPostsData({\n    //         ...contextData.postsData,\n    //         posts\n    //     });\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         report\n    //     })\n    // })\n  };\n\n  const onRestoreHandler = () => {// contextData.setState({\n    //     ...contextData.state,\n    //     loading: true\n    // });\n    // postsBulkAction([state.hoveredId], 'Draft').then(res => {\n    //     setData()\n    // }).catch(err => {\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         loading: false\n    //     });\n    // })\n  };\n\n  let HoverOnTitle = props => {\n    if (props.post._id === state.hoveredId) {\n      let editPostPath = `/admin/Post/${props.post._id}`;\n\n      if (props.post.status === 'Trash') {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          to: editPostPath\n        }, \"Edit\"), __jsx(\"button\", {\n          onClick: () => onDeletePermanentlyHandler(props.post._id)\n        }, \"Delete Permanently\"), __jsx(\"button\", {\n          onClick: () => onRestoreHandler()\n        }, \"Move to Draft\"));\n      } else {\n        return __jsx(\"div\", {\n          className: \"postControlOptions\"\n        }, __jsx(Link, {\n          to: editPostPath\n        }, \"Edit\"), __jsx(\"button\", {\n          onClick: () => onTrashHandler()\n        }, \"Trash\"), __jsx(\"button\", null, \"View\"));\n      }\n    } else return __jsx(\"div\", {\n      className: \"postControlOptions\"\n    });\n  };\n\n  const onCheckHandler = e => {//\n    // if (e.target.checked) {\n    //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts;\n    //         pushedItemArr.push(e.target.name);\n    //         pushedItemArr = [...new Set(pushedItemArr)]\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    //\n    // } else {\n    //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\n    //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\n    //             return id !== e.target.name\n    //         });\n    //         pushedItemArr = [...new Set(pushedItemArr)];\n    //         contextData.setPostsData({\n    //             ...contextData.postsData,\n    //             checkedPosts: pushedItemArr\n    //         });\n    //     }\n    // }\n  };\n\n  const RenderMeta = props => {\n    if (props.meta) {\n      return __jsx(Link, {\n        href: \"/\",\n        key: props.meta,\n        className: \"tagPreviewItem\"\n      }, \" \", __jsx(\"a\", null, tag), \",\");\n    }\n  };\n\n  let renderPosts = contextData.adminPosts.map(post => {\n    // console.log(post )\n    let author = post.author;\n\n    if (post.author === contextData.userData._id) {\n      author = contextData.userData.username;\n    }\n\n    let isChecked = contextData.adminPostsData.checkedPosts.includes(post._id);\n    return __jsx(\"tr\", {\n      key: post._id,\n      className: \"BodyTableItems\",\n      onMouseEnter: () => {\n        setState(_objectSpread({}, state, {\n          hoveredId: post._id\n        }));\n      }\n    }, __jsx(\"td\", {\n      className: \"postColumn\"\n    }, __jsx(\"div\", null, __jsx(\"input\", {\n      name: post._id,\n      className: \" BodyTableItemCheckBox\",\n      type: \"checkbox\",\n      ref: e => selectBoxes.current[contextData.adminPosts.indexOf(post)] = e,\n      checked: isChecked,\n      onChange: e => onCheckHandler(e)\n    })), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem\"\n    }, post.title), () => {\n      if (post._id === state.hoveredId) {\n        console.log(post._id);\n      }\n    }), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem author\"\n    }, author)), __jsx(\"div\", {\n      className: \"tagPreview BodyTableItem\"\n    }, __jsx(RenderMeta, {\n      meta: post\n    })), __jsx(\"div\", null, __jsx(\"p\", {\n      className: \"BodyTableItem\"\n    }, post.status)), __jsx(\"div\", null, __jsx(\"img\", {\n      className: \"BodyTableItem\",\n      src: post.mainThumbnail\n    }))));\n  });\n  return __jsx(\"tbody\", {\n    className: \"BodyTable\"\n  }, renderPosts, \"xxc\");\n};\n\nexport default withRouter(BodyTable);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostsComponents/PostsDataTable/BodyTable.js"],"names":["React","useEffect","useState","useContext","useRef","createRef","AppContext","withRouter","Link","BodyTable","props","contextData","selectBoxes","adminPosts","map","state","setState","hoveredId","setData","onTrashHandler","onDeletePermanentlyHandler","onRestoreHandler","HoverOnTitle","post","_id","editPostPath","status","onCheckHandler","e","RenderMeta","meta","tag","renderPosts","author","userData","username","isChecked","adminPostsData","checkedPosts","includes","current","indexOf","title","console","log","mainThumbnail"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,UAApC,EAAgDC,MAAhD,EAAwDC,SAAxD,QAAwE,OAAxE,C,CACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAO,kBAAP;;AAEA,MAAMC,SAAS,GAAGC,KAAK,IAAI;AACvB,QAAMC,WAAW,GAAGR,UAAU,CAACG,UAAD,CAA9B;AACA,MAAIM,WAAW,GAAGR,MAAM,CAACO,WAAW,CAACE,UAAZ,CAAuBC,GAAvB,CAA2B,MAAMT,SAAS,EAA1C,CAAD,CAAxB;AACA,QAAM;AAAA,OAACU,KAAD;AAAA,OAAQC;AAAR,MAAoBd,QAAQ,CAAC;AAC/Be,IAAAA,SAAS,EAAE;AADoB,GAAD,CAAlC;;AAIA,QAAMC,OAAO,GAAG,MAAM;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAO,IAAP;AACH,GAtBD;;AAwBA,QAAMC,cAAc,GAAG,MAAM,CACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,GAdD,CA/BuB,CA+CvB;AACA;AACA;;;AAEA,QAAMC,0BAA0B,GAAG,MAAM,CACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAfD;;AAiBA,QAAMC,gBAAgB,GAAG,MAAM,CAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAbD;;AAeA,MAAIC,YAAY,GAAIZ,KAAD,IAAW;AAC1B,QAAIA,KAAK,CAACa,IAAN,CAAWC,GAAX,KAAmBT,KAAK,CAACE,SAA7B,EAAwC;AACpC,UAAIQ,YAAY,GAAI,eAAcf,KAAK,CAACa,IAAN,CAAWC,GAAI,EAAjD;;AACA,UAAId,KAAK,CAACa,IAAN,CAAWG,MAAX,KAAsB,OAA1B,EAAmC;AAC/B,eACI;AAAK,UAAA,SAAS,EAAC;AAAf,WACI,MAAC,IAAD;AAAM,UAAA,EAAE,EAAED;AAAV,kBADJ,EAEI;AAAQ,UAAA,OAAO,EAAE,MAAML,0BAA0B,CAACV,KAAK,CAACa,IAAN,CAAWC,GAAZ;AAAjD,gCAFJ,EAGI;AAAQ,UAAA,OAAO,EAAE,MAAMH,gBAAgB;AAAvC,2BAHJ,CADJ;AAQH,OATD,MASO;AACH,eACI;AAAK,UAAA,SAAS,EAAC;AAAf,WACI,MAAC,IAAD;AAAM,UAAA,EAAE,EAAEI;AAAV,kBADJ,EAEI;AAAQ,UAAA,OAAO,EAAE,MAAMN,cAAc;AAArC,mBAFJ,EAGI,6BAHJ,CADJ;AAQH;AAGJ,KAvBD,MAuBO,OACH;AAAK,MAAA,SAAS,EAAC;AAAf,MADG;AAKV,GA7BD;;AA+BA,QAAMQ,cAAc,GAAGC,CAAC,IAAI,CACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAzBD;;AA2BA,QAAMC,UAAU,GAAGnB,KAAK,IAAG;AACrB,QAAIA,KAAK,CAACoB,IAAV,EAAe;AACX,aACI,MAAC,IAAD;AAAM,QAAA,IAAI,EAAC,GAAX;AAAe,QAAA,GAAG,EAAEpB,KAAK,CAACoB,IAA1B;AAAgC,QAAA,SAAS,EAAC;AAA1C,cAA4D,iBAAIC,GAAJ,CAA5D,MADJ;AAGH;AACN,GAND;;AAUA,MAAIC,WAAW,GAAGrB,WAAW,CAACE,UAAZ,CAAuBC,GAAvB,CAA2BS,IAAI,IAAI;AACjD;AACA,QAAIU,MAAM,GAAGV,IAAI,CAACU,MAAlB;;AACA,QAAIV,IAAI,CAACU,MAAL,KAAgBtB,WAAW,CAACuB,QAAZ,CAAqBV,GAAzC,EAA8C;AAC1CS,MAAAA,MAAM,GAAGtB,WAAW,CAACuB,QAAZ,CAAqBC,QAA9B;AACH;;AACD,QAAIC,SAAS,GAAIzB,WAAW,CAAC0B,cAAZ,CAA2BC,YAA3B,CAAwCC,QAAxC,CAAiDhB,IAAI,CAACC,GAAtD,CAAjB;AACA,WACI;AAAI,MAAA,GAAG,EAAED,IAAI,CAACC,GAAd;AAAmB,MAAA,SAAS,EAAC,gBAA7B;AAA8C,MAAA,YAAY,EAAE,MAAM;AAC9DR,QAAAA,QAAQ,mBAAKD,KAAL;AAAYE,UAAAA,SAAS,EAAEM,IAAI,CAACC;AAA5B,WAAR;AACH;AAFD,OAGI;AAAI,MAAA,SAAS,EAAC;AAAd,OACI,mBAEI;AAAO,MAAA,IAAI,EAAED,IAAI,CAACC,GAAlB;AAAuB,MAAA,SAAS,EAAC,wBAAjC;AAA0D,MAAA,IAAI,EAAC,UAA/D;AACO,MAAA,GAAG,EAAEI,CAAC,IAAIhB,WAAW,CAAC4B,OAAZ,CAAoB7B,WAAW,CAACE,UAAZ,CAAuB4B,OAAvB,CAA+BlB,IAA/B,CAApB,IAA4DK,CAD7E;AAEI,MAAA,OAAO,EAAEQ,SAFb;AAGO,MAAA,QAAQ,EAAGR,CAAD,IAAOD,cAAc,CAACC,CAAD;AAHtC,MAFJ,CADJ,EAQI,mBACI;AAAG,MAAA,SAAS,EAAC;AAAb,OAA8BL,IAAI,CAACmB,KAAnC,CADJ,EAEK,MAAI;AACD,UAAInB,IAAI,CAACC,GAAL,KAAaT,KAAK,CAACE,SAAvB,EAAiC;AAC7B0B,QAAAA,OAAO,CAACC,GAAR,CAAarB,IAAI,CAACC,GAAlB;AACH;AACJ,KANL,CARJ,EAiBI,mBACI;AAAG,MAAA,SAAS,EAAC;AAAb,OAAqCS,MAArC,CADJ,CAjBJ,EAqBI;AAAK,MAAA,SAAS,EAAC;AAAf,OACG,MAAC,UAAD;AAAY,MAAA,IAAI,EAAEV;AAAlB,MADH,CArBJ,EAsCI,mBACI;AAAG,MAAA,SAAS,EAAC;AAAb,OAA8BA,IAAI,CAACG,MAAnC,CADJ,CAtCJ,EAyCI,mBACI;AAAK,MAAA,SAAS,EAAC,eAAf;AAA+B,MAAA,GAAG,EAAEH,IAAI,CAACsB;AAAzC,MADJ,CAzCJ,CAHJ,CADJ;AAmDH,GA1DiB,CAAlB;AA4DA,SACI;AAAO,IAAA,SAAS,EAAC;AAAjB,KACCb,WADD,QADJ;AAMH,CAzND;;AA0NA,eAAezB,UAAU,CAACE,SAAD,CAAzB","sourcesContent":["import React, {useEffect, useState, useContext, useRef, createRef} from 'react';\r\n// import {Link, withRouter} from \"react-router-dom\";\r\n// import {updatePostStatus, deletePost, postsBulkAction, getPosts} from \"../../../../../variables/_ajaxPostsVariable\";\r\n// import QuickEdit from \"../QuickEdit/QuickEdit\";\r\n// import {adminTokenValidator} from \"../../../../../variables/_ajaxAuthVariables\";\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport Link from \"next/link\";\r\nimport './BodyTable.scss'\r\n\r\nconst BodyTable = props => {\r\n    const contextData = useContext(AppContext);\r\n    let selectBoxes = useRef(contextData.adminPosts.map(() => createRef()));\r\n    const [state, setState] = useState({\r\n        hoveredId: '',\r\n    });\r\n\r\n    const setData = () => {\r\n        // getPosts(\r\n        //     contextData.postsData.type, contextData.postsData.size, contextData.postsData.pageNo,\r\n        //     ['author', 'title', 'imageUrl', 'status', 'actors', 'tags', 'categories'], contextData.postsData.status,\r\n        //     contextData.postsData.author, contextData.postsData.keyword).then(res => {\r\n        //     contextData.setPostsData({\r\n        //         ...contextData.postsData,\r\n        //         posts: res.data.posts,\r\n        //         error: res.data.error,\r\n        //         totalCount: res.data.totalCount\r\n        //     });\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         loading: false\r\n        //     });\r\n        // }).catch(() => {\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         login: false\r\n        //     })\r\n        // })\r\n        return null\r\n    };\r\n\r\n    const onTrashHandler = () => {\r\n        // contextData.setState({\r\n        //     ...contextData.state,\r\n        //     loading: true\r\n        // });\r\n        // postsBulkAction([state.hoveredId], 'Trash').then(res => {\r\n        //     setData()\r\n        // }).catch(err => {\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         loading: false\r\n        //     });\r\n        // })\r\n\r\n    };\r\n\r\n    // const onDeletePermanentlyHandler = (id)=>{\r\n    //\r\n    // }\r\n\r\n    const onDeletePermanentlyHandler = () => {\r\n        // deletePost(state.hoveredId).then(res => {\r\n        //     const posts = contextData.postsData.posts.filter(post => {\r\n        //         return post._id !== state.hoveredId\r\n        //     });\r\n        //     const report = contextData.state.reports.push(res.data.message)\r\n        //     contextData.setPostsData({\r\n        //         ...contextData.postsData,\r\n        //         posts\r\n        //     });\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         report\r\n        //     })\r\n        // })\r\n    };\r\n\r\n    const onRestoreHandler = () => {\r\n        // contextData.setState({\r\n        //     ...contextData.state,\r\n        //     loading: true\r\n        // });\r\n        // postsBulkAction([state.hoveredId], 'Draft').then(res => {\r\n        //     setData()\r\n        // }).catch(err => {\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         loading: false\r\n        //     });\r\n        // })\r\n    };\r\n\r\n    let HoverOnTitle = (props) => {\r\n        if (props.post._id === state.hoveredId) {\r\n            let editPostPath = `/admin/Post/${props.post._id}`;\r\n            if (props.post.status === 'Trash') {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link to={editPostPath}>Edit</Link>\r\n                        <button onClick={() => onDeletePermanentlyHandler(props.post._id )}>Delete Permanently</button>\r\n                        <button onClick={() => onRestoreHandler()}>Move to Draft</button>\r\n                        {/*<button onClick={() => quickEditBtnHandler(props.post._id)}>QEdit</button>*/}\r\n                    </div>\r\n                )\r\n            } else {\r\n                return (\r\n                    <div className='postControlOptions'>\r\n                        <Link to={editPostPath}>Edit</Link>\r\n                        <button onClick={() => onTrashHandler()}>Trash</button>\r\n                        <button>View</button>\r\n                        {/*<button onClick={() => quickEditBtnHandler(props.post._id)}>QEdit</button>*/}\r\n                    </div>\r\n                )\r\n            }\r\n\r\n\r\n        } else return (\r\n            <div className='postControlOptions'>\r\n\r\n            </div>\r\n        )\r\n    };\r\n\r\n    const onCheckHandler = e => {\r\n        //\r\n        // if (e.target.checked) {\r\n        //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts;\r\n        //         pushedItemArr.push(e.target.name);\r\n        //         pushedItemArr = [...new Set(pushedItemArr)]\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        //\r\n        // } else {\r\n        //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\r\n        //             return id !== e.target.name\r\n        //         });\r\n        //         pushedItemArr = [...new Set(pushedItemArr)];\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        // }\r\n    };\r\n\r\n    const RenderMeta = props =>{\r\n          if (props.meta){\r\n              return(\r\n                  <Link href='/' key={props.meta} className='tagPreviewItem'> <a>{tag}</a>,</Link>\r\n              )\r\n          }\r\n    };\r\n\r\n\r\n\r\n    let renderPosts = contextData.adminPosts.map(post => {\r\n        // console.log(post )\r\n        let author = post.author;\r\n        if (post.author === contextData.userData._id) {\r\n            author = contextData.userData.username\r\n        }\r\n        let isChecked =  contextData.adminPostsData.checkedPosts.includes(post._id);\r\n        return (\r\n            <tr key={post._id} className='BodyTableItems' onMouseEnter={() => {\r\n                setState({...state, hoveredId: post._id})\r\n            }}>\r\n                <td className='postColumn'>\r\n                    <div>\r\n\r\n                        <input name={post._id} className=' BodyTableItemCheckBox' type='checkbox'\r\n                               ref={e => selectBoxes.current[contextData.adminPosts.indexOf(post)] = e}\r\n                            checked={isChecked}\r\n                               onChange={(e) => onCheckHandler(e)}/>\r\n                    </div>\r\n                    <div>\r\n                        <p className='BodyTableItem'>{post.title}</p>\r\n                        {()=>{\r\n                            if (post._id === state.hoveredId){\r\n                                console.log( post._id)\r\n                            }\r\n                        }}\r\n                        {/*<HoverOnTitle post={post}/>*/}\r\n                    </div>\r\n                    <div>\r\n                        <p className='BodyTableItem author'>{author}</p>\r\n                    </div>\r\n\r\n                    <div className='tagPreview BodyTableItem'>\r\n                       <RenderMeta meta={post}/>\r\n                    </div>\r\n                    {/*<div className='tagPreview BodyTableItem'>*/}\r\n                    {/*    {post.tags.map(tag => {*/}\r\n                    {/*        return (*/}\r\n                    {/*            <Link href='/' key={tag} className='tagPreviewItem'> <a>{tag}</a>,</Link>*/}\r\n                    {/*        )*/}\r\n                    {/*    })}*/}\r\n                    {/*</div>*/}\r\n                    {/*<div className='actorsPreview BodyTableItem'>*/}\r\n                    {/*    {post.actors.map(actor => {*/}\r\n                    {/*        return (*/}\r\n                    {/*            <Link href='/' key={actor} className='actorsPreviewItem'>{actor} ,</Link>*/}\r\n                    {/*        )*/}\r\n                    {/*    })}*/}\r\n                    {/*</div>*/}\r\n                    <div>\r\n                        <p className='BodyTableItem'>{post.status}</p>\r\n                    </div>\r\n                    <div>\r\n                        <img className='BodyTableItem' src={post.mainThumbnail}/>\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <tbody className='BodyTable'>\r\n        {renderPosts}\r\n        xxc\r\n        </tbody>\r\n    );\r\n};\r\nexport default withRouter(BodyTable);"]},"metadata":{},"sourceType":"module"}