{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport AppLayout from '../../../components/layouts/AppLayout';\nimport { getSetting } from '../../../_variables/ajaxVariables';\nimport { getMeta } from '../../../_variables/ajaxPostsVariables';\nimport { AppContext } from '../../../context/AppContext';\nimport TagElement from '../../../components/includes/TagElement/TagElement';\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement';\n\nconst tags = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    metaData: []\n  });\n  useEffect(() => {\n    console.log(props);\n  }, [props]);\n  useEffect(() => {\n    if (props.navigation) {\n      contextData.dispatchNavigationData(props.navigation.data);\n    }\n\n    if (props.identity) {\n      contextData.dispatchSiteIdentity(siteIdentity => _objectSpread({}, siteIdentity, {}, props.identity));\n    }\n\n    if (props.tags.length) {\n      setState(_objectSpread({}, state, {\n        metaData: props.tags\n      }));\n    } else if (props.tags.length < 1) {\n      getMeta({\n        type: 'tag',\n        pageNo: 1,\n        size: 100,\n        searchForImageIn: 'tags',\n        sortBy: '-_id'\n      }).then(res => {\n        console.log(res);\n        setState(_objectSpread({}, state, {\n          metaData: res.data.metas\n        }));\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  }, [props]);\n  const renderTags = state.metaData.map(meta => {\n    return __jsx(TagElement, {\n      key: meta._id,\n      imageUrl: meta.imageUrl,\n      noImageUrl: meta.noImageUrl,\n      name: meta.name,\n      count: meta.count\n    });\n  });\n  return __jsx(AppLayout, null, __jsx(\"div\", {\n    className: \"tags\"\n  }, renderTags));\n};\n\ntags.getInitialProps = async ({\n  pathname,\n  query,\n  req,\n  res,\n  err\n}) => {\n  let navigation;\n  let identity;\n  let tags = [];\n  const identityData = await getSetting('identity');\n  const navigationData = await getSetting('navigation');\n\n  if (query.meta) {\n    const tagsData = await getMeta({\n      type: query.meta,\n      searchForImageIn: 'tags',\n      pageNo: 1,\n      size: 100\n    });\n    tags = tagsData.data.metas ? tagsData.data.metas : [];\n  }\n\n  identity = identityData.data.setting ? identityData.data.setting.data : {};\n  navigation = navigationData.data.setting ? navigationData.data.setting : {};\n  return {\n    identity,\n    navigation,\n    query,\n    tags\n  };\n};\n\nexport default tags;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/pages/page/tags/index.js"],"names":["React","useEffect","useState","useContext","useRef","AppLayout","getSetting","getMeta","AppContext","TagElement","CategoryElement","tags","props","contextData","state","setState","metaData","console","log","navigation","dispatchNavigationData","data","identity","dispatchSiteIdentity","siteIdentity","length","type","pageNo","size","searchForImageIn","sortBy","then","res","metas","catch","err","renderTags","map","meta","_id","imageUrl","noImageUrl","name","count","getInitialProps","pathname","query","req","identityData","navigationData","tagsData","setting"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { getSetting } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport TagElement from '../../../components/includes/TagElement/TagElement'\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement'\r\n\r\nconst tags = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        metaData: []\r\n    });\r\n    useEffect(() => {\r\n        console.log(props )\r\n    }, [props]);\r\n    useEffect(() => {\r\n        if (props.navigation) {\r\n            contextData.dispatchNavigationData(props.navigation.data)\r\n        }\r\n        if (props.identity) {\r\n            contextData.dispatchSiteIdentity(siteIdentity => ({\r\n                ...siteIdentity,\r\n                ...props.identity\r\n            }))\r\n        }\r\n        if (props.tags.length){\r\n            setState({\r\n                ...state,\r\n                metaData: props.tags\r\n            })\r\n        }else if (props.tags.length<1){\r\n            getMeta({\r\n                type: 'tag',\r\n                pageNo: 1,\r\n                size: 100,\r\n                searchForImageIn:'tags',\r\n                sortBy:'-_id'\r\n            }).then(res=>{\r\n                console.log(res )\r\n                setState({\r\n                    ...state,\r\n                    metaData: res.data.metas\r\n                })\r\n            }).catch(err=>{\r\n                console.log( err)\r\n            })\r\n        }\r\n    }, [ props ]);\r\n\r\n    const renderTags = state.metaData.map(meta => {\r\n        return (\r\n            <TagElement key={meta._id} imageUrl={meta.imageUrl} noImageUrl={meta.noImageUrl} name={meta.name} count={meta.count}/>\r\n        )\r\n    })\r\n    return (\r\n        <AppLayout>\r\n            <div className='tags'>\r\n                {renderTags}\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\n\r\n\r\ntags.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let tags = []\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n\r\n    if (query.meta) {\r\n        const tagsData = await getMeta({\r\n            type: query.meta,\r\n            searchForImageIn:'tags',\r\n            pageNo: 1,\r\n            size: 100\r\n        })\r\n        tags = tagsData.data.metas ? tagsData.data.metas : []\r\n    }\r\n\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    return { identity, navigation, query, tags }\r\n}\r\nexport default tags;\r\n"]},"metadata":{},"sourceType":"module"}