{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext } from 'react';\n\nconst VideoPlayer = props => {\n  useEffect(() => {\n    console.log(props);\n  }, [props]); //\"video/mp4\"\n\n  const WhatToRender = () => {\n    if (props.videoUrl) {\n      return __jsx(React.Fragment, null, __jsx(\"video\", null, __jsx(\"source\", {\n        src: props.videoUrl\n      })));\n    } else if (!props.videoUrl && props.iframeCode) {\n      return __jsx(\"iframe\", {\n        src: props.iframeCode,\n        frameBorder: \"0\",\n        width: \"640\",\n        height: \"360\",\n        scrolling: \"no\"\n      });\n    } else return null;\n  };\n\n  if (props.iframeCode) {\n    return __jsx(\"div\", {\n      className: \"video-player\"\n    }, __jsx(\"meta\", {\n      itemProp: \"name\",\n      content: props.meta.title\n    }), __jsx(\"meta\", {\n      itemProp: \"description\",\n      content: props.meta.description\n    }), __jsx(\"meta\", {\n      itemProp: \"duration\",\n      content: props.meta.duration\n    }), __jsx(\"meta\", {\n      itemProp: \"thumbnailUrl\",\n      content: props.meta.thumbnailUrl\n    }), __jsx(\"meta\", {\n      itemProp: \"embedURL\",\n      content: props.meta.embedURL\n    }), __jsx(\"meta\", {\n      itemProp: \"uploadDate\",\n      content: props.meta.uploadDate\n    }), __jsx(\"div\", {\n      className: \"responsive-player\"\n    }, __jsx(WhatToRender, null), __jsx(\"iframe\", {\n      src: props.iframeCode,\n      frameBorder: \"0\",\n      width: \"640\",\n      height: \"360\",\n      scrolling: \"no\"\n    })));\n  } else return null;\n};\n\nexport default VideoPlayer;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/includes/Post/VideoPlayer/VideoPlayer.js"],"names":["React","useEffect","useState","useContext","VideoPlayer","props","console","log","WhatToRender","videoUrl","iframeCode","meta","title","description","duration","thumbnailUrl","embedURL","uploadDate"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AACzBJ,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,GAFQ,EAEN,CAAEA,KAAF,CAFM,CAAT,CADyB,CAI7B;;AACI,QAAMG,YAAY,GAAG,MAAM;AACvB,QAAIH,KAAK,CAACI,QAAV,EAAoB;AAChB,aACI,4BACI,qBACI;AAAQ,QAAA,GAAG,EAAEJ,KAAK,CAACI;AAAnB,QADJ,CADJ,CADJ;AAOH,KARD,MAQO,IAAI,CAACJ,KAAK,CAACI,QAAP,IAAmBJ,KAAK,CAACK,UAA7B,EAAyC;AAC5C,aACI;AAAQ,QAAA,GAAG,EAAGL,KAAK,CAACK,UAApB;AAAiC,QAAA,WAAW,EAAC,GAA7C;AAAiD,QAAA,KAAK,EAAC,KAAvD;AAA6D,QAAA,MAAM,EAAC,KAApE;AAA0E,QAAA,SAAS,EAAC;AAApF,QADJ;AAGH,KAJM,MAIA,OAAO,IAAP;AACV,GAdD;;AAgBA,MAAIL,KAAK,CAACK,UAAV,EAAsB;AAClB,WACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI;AAAM,MAAA,QAAQ,EAAC,MAAf;AAAsB,MAAA,OAAO,EAAGL,KAAK,CAACM,IAAN,CAAWC;AAA3C,MADJ,EAEI;AAAM,MAAA,QAAQ,EAAC,aAAf;AAA6B,MAAA,OAAO,EAAGP,KAAK,CAACM,IAAN,CAAWE;AAAlD,MAFJ,EAGI;AAAM,MAAA,QAAQ,EAAC,UAAf;AAA0B,MAAA,OAAO,EAAGR,KAAK,CAACM,IAAN,CAAWG;AAA/C,MAHJ,EAII;AAAM,MAAA,QAAQ,EAAC,cAAf;AAA8B,MAAA,OAAO,EAAGT,KAAK,CAACM,IAAN,CAAWI;AAAnD,MAJJ,EAKI;AAAM,MAAA,QAAQ,EAAC,UAAf;AAA0B,MAAA,OAAO,EAAGV,KAAK,CAACM,IAAN,CAAWK;AAA/C,MALJ,EAMI;AAAM,MAAA,QAAQ,EAAC,YAAf;AAA4B,MAAA,OAAO,EAAGX,KAAK,CAACM,IAAN,CAAWM;AAAjD,MANJ,EAOI;AAAK,MAAA,SAAS,EAAC;AAAf,OACI,MAAC,YAAD,OADJ,EAEI;AAAQ,MAAA,GAAG,EAAGZ,KAAK,CAACK,UAApB;AAAiC,MAAA,WAAW,EAAC,GAA7C;AAAiD,MAAA,KAAK,EAAC,KAAvD;AAA6D,MAAA,MAAM,EAAC,KAApE;AAA0E,MAAA,SAAS,EAAC;AAApF,MAFJ,CAPJ,CADJ;AAgBH,GAjBD,MAiBO,OAAO,IAAP;AAEV,CAxCD;;AAyCA,eAAeN,WAAf","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\n\r\nconst VideoPlayer = props => {\r\n    useEffect(() => {\r\n        console.log(props)\r\n    }, [ props ]);\r\n//\"video/mp4\"\r\n    const WhatToRender = () => {\r\n        if (props.videoUrl) {\r\n            return (\r\n                <>\r\n                    <video>\r\n                        <source src={props.videoUrl}/>\r\n                    </video>\r\n                </>\r\n            )\r\n        } else if (!props.videoUrl && props.iframeCode) {\r\n            return (\r\n                <iframe src={ props.iframeCode } frameBorder=\"0\" width='640' height='360' scrolling=\"no\"/>\r\n            )\r\n        } else return null\r\n    }\r\n\r\n    if (props.iframeCode) {\r\n        return (\r\n            <div className='video-player'>\r\n                <meta itemProp=\"name\" content={ props.meta.title }/>\r\n                <meta itemProp=\"description\" content={ props.meta.description }/>\r\n                <meta itemProp=\"duration\" content={ props.meta.duration }/>\r\n                <meta itemProp=\"thumbnailUrl\" content={ props.meta.thumbnailUrl }/>\r\n                <meta itemProp=\"embedURL\" content={ props.meta.embedURL }/>\r\n                <meta itemProp=\"uploadDate\" content={ props.meta.uploadDate }/>\r\n                <div className=\"responsive-player\">\r\n                    <WhatToRender/>\r\n                    <iframe src={ props.iframeCode } frameBorder=\"0\" width='640' height='360' scrolling=\"no\"/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        );\r\n    } else return null\r\n\r\n};\r\nexport default VideoPlayer;"]},"metadata":{},"sourceType":"module"}