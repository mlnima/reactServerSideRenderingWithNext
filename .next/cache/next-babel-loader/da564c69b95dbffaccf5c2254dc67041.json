{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport FA from \"react-fontawesome\";\n\nvar PostCategoriesTagsActors = function PostCategoriesTagsActors(props) {\n  var contextData = useContext(AppContext);\n\n  var _useState = useState([]),\n      items = _useState[0],\n      setItems = _useState[1];\n\n  var newItemsElement = useRef(null);\n\n  var deleteItem = function deleteItem(e) {\n    var deletedItemFromType = props.postData[props.type].filter(function (i) {\n      return i !== e.currentTarget.name;\n    });\n    props.onPostMetaChangeHandler(props.type, deletedItemFromType);\n  };\n\n  var addNewItem = function addNewItem() {\n    if (newItemsElement.current.value.includes(',')) {\n      console.log('has ,');\n      var newItems = newItemsElement.current.value.split(',');\n      console.log(newItems);\n      var addedItemFromType = [].concat(_toConsumableArray(props.postData[props.type]), [newItems]);\n      props.onPostMetaChangeHandler(props.type, addedItemFromType);\n    } else {\n      console.log('has not ,');\n\n      var _addedItemFromType = [].concat(_toConsumableArray(props.postData[props.type]), [newItemsElement.current.value]);\n\n      props.onPostMetaChangeHandler(props.type, _addedItemFromType);\n    }\n  };\n\n  var addedItems = props.postData[props.type].map(function (item) {\n    var icon = props.type === 'tags' ? 'tags' : props.type === 'actors' ? 'star' : props.type === 'categories' ? 'folder' : '';\n    return __jsx(\"div\", {\n      key: item,\n      className: \"item\"\n    }, __jsx(\"p\", null, item), __jsx(\"button\", {\n      name: item,\n      onClick: function onClick(e) {\n        return deleteItem(e);\n      }\n    }, __jsx(FA, {\n      className: \"fontawesomeMedium\",\n      name: \"times\"\n    })));\n  });\n  return __jsx(\"div\", {\n    className: \"PostCategoriesTagsActors\"\n  }, __jsx(\"div\", {\n    className: \"addNewTag\"\n  }, __jsx(\"input\", {\n    ref: newItemsElement,\n    type: \"text\"\n  }), __jsx(\"button\", {\n    onClick: function onClick() {\n      return addNewItem();\n    }\n  }, \" Add\")), __jsx(\"span\", {\n    className: \"small-info\"\n  }, \"Separate tags with commas\"), __jsx(\"div\", {\n    className: \"items\"\n  }, addedItems));\n};\n\nexport default PostCategoriesTagsActors;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors.js"],"names":["React","useEffect","useState","useContext","useRef","AppContext","FA","PostCategoriesTagsActors","props","contextData","items","setItems","newItemsElement","deleteItem","e","deletedItemFromType","postData","type","filter","i","currentTarget","name","onPostMetaChangeHandler","addNewItem","current","value","includes","console","log","newItems","split","addedItemFromType","addedItems","map","item","icon"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport FA from \"react-fontawesome\";\r\n\r\nconst PostCategoriesTagsActors = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ items, setItems ] = useState([]);\r\n    let newItemsElement = useRef(null);\r\n\r\n\r\n    const deleteItem = (e) => {\r\n        const deletedItemFromType = props.postData[props.type].filter(i => {\r\n            return i !== e.currentTarget.name\r\n        })\r\n        props.onPostMetaChangeHandler(props.type, deletedItemFromType)\r\n    };\r\n\r\n    const addNewItem = () => {\r\n        if (newItemsElement.current.value.includes(',')) {\r\n            console.log( 'has ,')\r\n            let newItems = newItemsElement.current.value.split(',');\r\n            console.log( newItems)\r\n            const addedItemFromType = [ ...props.postData[props.type], newItems ]\r\n            props.onPostMetaChangeHandler(props.type, addedItemFromType)\r\n        } else {\r\n            console.log( 'has not ,')\r\n            const addedItemFromType = [ ...props.postData[props.type], newItemsElement.current.value ]\r\n            props.onPostMetaChangeHandler(props.type, addedItemFromType)\r\n        }\r\n    };\r\n\r\n    const addedItems = props.postData[props.type].map(item => {\r\n        let icon = props.type === 'tags' ? 'tags'\r\n            : props.type === 'actors' ? 'star'\r\n                : props.type === 'categories' ? 'folder'\r\n                    : '';\r\n        return (\r\n            <div key={ item }  className='item'>\r\n                <p>{ item }</p>\r\n\r\n                <button name={ item } onClick={ (e) => deleteItem(e) } ><FA className='fontawesomeMedium' name='times'/></button>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className='PostCategoriesTagsActors'>\r\n            <div className=\"addNewTag\">\r\n                <input ref={ newItemsElement } type='text'/>\r\n                <button onClick={ () => addNewItem() }> Add</button>\r\n            </div>\r\n            <span className='small-info'>Separate tags with commas</span>\r\n            <div className=\"items\">\r\n             { addedItems }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default PostCategoriesTagsActors;"]},"metadata":{},"sourceType":"module"}