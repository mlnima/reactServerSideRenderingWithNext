{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { DelayInput } from 'react-delay-input';\nimport SaveDesignChangesBtn from './SaveDesignChangesBtn';\nimport { AppContext } from '../../../context/AppContext';\nimport { convertVariableNameToName } from '../../../_variables/_variables';\n\nconst ColorSection = props => {\n  const contextData = useContext(AppContext);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  useEffect(() => {}, []);\n\n  const onChangeHandler = e => {\n    contextData.dispatchSiteDesign(_objectSpread({}, contextData.siteDesign, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: \"colorSettingSection\"\n  }, __jsx(\"p\", null, convertVariableNameToName(props.designName), \" : \"), __jsx(\"div\", null, __jsx(DelayInput, {\n    className: \"colorSettingSectionInput\",\n    name: props.designName,\n    value: contextData.siteDesign[props.designName],\n    delayTimeout: 1000,\n    onChange: e => onChangeHandler(e)\n  }), __jsx(\"div\", {\n    className: \"previewColor\",\n    style: {\n      backgroundColor: contextData.siteDesign[props.designName]\n    }\n  })), __jsx(SaveDesignChangesBtn, null));\n};\n\nexport default ColorSection;","map":null,"metadata":{},"sourceType":"module"}