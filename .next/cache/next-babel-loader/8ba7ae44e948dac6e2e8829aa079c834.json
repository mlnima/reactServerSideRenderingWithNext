{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { DelayInput } from 'react-delay-input';\nimport SaveDesignChangesBtn from './SaveDesignChangesBtn';\n\nconst ColorSection = props => {\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  useEffect(() => {}, []);\n\n  const onChangeHandler = e => {\n    contextData.dispatchSiteDesign(_objectSpread({}, contextData.siteDesign, {\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return __jsx(\"div\", {\n    className: \"colorSettingSection\"\n  }, __jsx(DelayInput, {\n    className: \"colorSettingSectionInput\",\n    name: props.designName,\n    value: contextData.siteDesign[props.designName],\n    delayTimeout: 1000,\n    onChange: e => onChangeHandler(e)\n  }), __jsx(\"div\", {\n    className: \"previewColor\",\n    style: {\n      backgroundColor: contextData.siteDesign.topBarBackgroundColor\n    }\n  }), __jsx(SaveDesignChangesBtn, null));\n};\n\nexport default ColorSection;","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/design/ColorSection.js"],"names":["React","useEffect","useState","useContext","useRef","DelayInput","SaveDesignChangesBtn","ColorSection","props","state","setState","onChangeHandler","e","contextData","dispatchSiteDesign","siteDesign","target","name","value","designName","backgroundColor","topBarBackgroundColor"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC1B,QAAM;AAAA,OAAEC,KAAF;AAAA,OAASC;AAAT,MAAsBR,QAAQ,CAAC,EAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAM,CACf,CADQ,EACN,EADM,CAAT;;AAGA,QAAMU,eAAe,GAAGC,CAAC,IAAI;AACzBC,IAAAA,WAAW,CAACC,kBAAZ,mBACOD,WAAW,CAACE,UADnB;AAEI,OAACH,CAAC,CAACI,MAAF,CAASC,IAAV,GAAiBL,CAAC,CAACI,MAAF,CAASE;AAF9B;AAIH,GALD;;AAOA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI,MAAC,UAAD;AAAY,IAAA,SAAS,EAAC,0BAAtB;AAAiD,IAAA,IAAI,EAAEV,KAAK,CAACW,UAA7D;AAAyE,IAAA,KAAK,EAAGN,WAAW,CAACE,UAAZ,CAAuBP,KAAK,CAACW,UAA7B,CAAjF;AAA4H,IAAA,YAAY,EAAG,IAA3I;AAAkJ,IAAA,QAAQ,EAAGP,CAAC,IAAID,eAAe,CAACC,CAAD;AAAjL,IADJ,EAEI;AAAK,IAAA,SAAS,EAAC,cAAf;AAA8B,IAAA,KAAK,EAAG;AAAEQ,MAAAA,eAAe,EAAEP,WAAW,CAACE,UAAZ,CAAuBM;AAA1C;AAAtC,IAFJ,EAGI,MAAC,oBAAD,OAHJ,CADJ;AAOH,CAnBD;;AAoBA,eAAed,YAAf","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { DelayInput } from 'react-delay-input'\r\nimport SaveDesignChangesBtn from './SaveDesignChangesBtn'\r\n\r\nconst ColorSection = props => {\r\n    const [ state, setState ] = useState({});\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n    const onChangeHandler = e => {\r\n        contextData.dispatchSiteDesign({\r\n            ...contextData.siteDesign,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className='colorSettingSection'>\r\n            <DelayInput className='colorSettingSectionInput' name={props.designName} value={ contextData.siteDesign[props.designName] } delayTimeout={ 1000 } onChange={ e => onChangeHandler(e) }/>\r\n            <div className=\"previewColor\" style={ { backgroundColor: contextData.siteDesign.topBarBackgroundColor } }/>\r\n            <SaveDesignChangesBtn/>\r\n        </div>\r\n    );\r\n};\r\nexport default ColorSection;\r\n"]},"metadata":{},"sourceType":"module"}