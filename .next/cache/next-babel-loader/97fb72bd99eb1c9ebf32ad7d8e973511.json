{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState, useContext, useRef } from 'react';\n\nconst VideoPlayer = props => {\n  const playerElement = useRef(null);\n\n  const WhatToRender = () => {\n    if (props.videoUrl) {\n      return __jsx(React.Fragment, null, __jsx(\"video\", null, __jsx(\"source\", {\n        src: props.videoUrl\n      })));\n    } else if (!props.videoUrl && props.videoEmbedCode) {\n      return __jsx(\"iframe\", {\n        src: props.videoEmbedCode,\n        frameBorder: \"0\",\n        width: \"640\",\n        height: \"360\",\n        scrolling: \"no\"\n      });\n    } else if (!props.videoUrl && !props.videoEmbedCode && props.videoScriptCode) {\n      // if(playerElement.current){\n      //     playerElement.current.innerHTML = props.videoScriptCode\n      // }else return null\n      return props.videoScriptCode;\n    } else return null;\n  };\n\n  return __jsx(\"div\", {\n    className: \"video-player\"\n  }, __jsx(\"meta\", {\n    itemProp: \"name\",\n    content: props.title\n  }), __jsx(\"meta\", {\n    itemProp: \"description\",\n    content: props.description\n  }), __jsx(\"meta\", {\n    itemProp: \"duration\",\n    content: props.duration\n  }), __jsx(\"meta\", {\n    itemProp: \"thumbnailUrl\",\n    content: props.thumbnailUrl\n  }), __jsx(\"meta\", {\n    itemProp: \"embedURL\",\n    content: props.embedURL\n  }), __jsx(\"meta\", {\n    itemProp: \"uploadDate\",\n    content: props.uploadDate\n  }), __jsx(\"div\", {\n    ref: playerElement,\n    className: \"responsive-player\"\n  }, __jsx(WhatToRender, null)));\n};\n\nexport default VideoPlayer;","map":null,"metadata":{},"sourceType":"module"}