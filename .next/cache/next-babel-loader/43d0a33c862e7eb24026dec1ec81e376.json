{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState, useContext, useRef } from 'react';\nimport { AppContext } from \"../../../../context/AppContext\";\nimport withRouter from 'next/dist/client/with-router';\n\nconst FilterDropDownActions = props => {\n  const contextData = useContext(AppContext);\n  const bulkAction = useRef(null);\n  const typeToDisplay = useRef(null);\n  const {\n    0: state,\n    1: setState\n  } = useState({});\n  useEffect(() => {\n    console.log(props);\n  }, [props]);\n\n  const onFormatChangeHandler = e => {// if (bulkAction.current.value !== 'none') {\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         loading:true\n    //     });\n    //     postsBulkAction(contextData.postsData.checkedPosts,bulkAction.current.value).then(()=>{\n    //        setData()\n    //     }).catch(err=>{\n    //         contextData.setState({\n    //             ...contextData.state,\n    //             loading:false\n    //         })\n    //     })\n    // }\n  };\n\n  const changePostsTypeToDisplay = e => {\n    props.router.push({\n      pathname: props.router.pathname,\n      query: _objectSpread({}, props.query, {\n        type: e.target.value\n      })\n    }); // if (e.target.value !== 'none') {\n    //     contextData.setPostsData({\n    //         ...contextData.postsData,\n    //         type: e.target.value\n    //     })\n    // }\n  };\n\n  const onEmptyTrashHandler = () => {// emptyTrash().then(res=>{\n    //     if (res.data.error){\n    //         contextData.setState({\n    //             ...contextData.state,\n    //             report:res.data.message,\n    //             reportColor:'red'\n    //         })\n    //     }else {\n    //         contextData.setState({\n    //             ...contextData.state,\n    //             loading: false\n    //         });\n    //         setData();\n    //         contextData.setState({\n    //             ...contextData.state,\n    //             report:res.data.message,\n    //             reportColor:'green'\n    //         })\n    //     }\n    // }).catch(()=>{\n    //     contextData.setState({\n    //         ...contextData.state,\n    //         report:'Can Not Communicate With Server'\n    //     })\n    // })\n  };\n\n  const EmptyTrash = () => {\n    // if (contextData.postsData.status === 'Trash'){\n    //     return (\n    //         <button onClick={()=>onEmptyTrashHandler()}>Empty Trash</button>\n    //     )\n    // }else\n    return null;\n  };\n\n  return __jsx(\"div\", {\n    className: \"FilterDropDownActions\"\n  }, __jsx(\"div\", {\n    className: \"bulkAction\"\n  }, __jsx(\"select\", {\n    ref: bulkAction,\n    placeholder: \"Bulk Actions\"\n  }, __jsx(\"option\", {\n    value: \"none\"\n  }, \"Bulk Actions\"), __jsx(\"option\", {\n    value: \"Published\"\n  }, \"Published\"), __jsx(\"option\", {\n    value: \"Draft\"\n  }, \"Draft\"), __jsx(\"option\", {\n    value: \"Trash\"\n  }, \"Trash\")), __jsx(\"button\", {\n    className: \"actionBtn\",\n    onClick: () => onFormatChangeHandler()\n  }, \"Apply\")), __jsx(\"div\", {\n    className: \"DateCategoryFormat\"\n  }, __jsx(\"select\", {\n    ref: typeToDisplay,\n    onChange: e => changePostsTypeToDisplay(e)\n  }, __jsx(\"option\", {\n    value: \"video\"\n  }, \"Video\"), __jsx(\"option\", {\n    value: \"standard\"\n  }, \"Standard\"))), __jsx(EmptyTrash, null));\n};\n\nexport default withRouter(FilterDropDownActions);","map":{"version":3,"sources":["G:/Dev Project/reactServerSideRenderingWithNext/components/adminIncludes/PostsComponents/Filters/FilterDropDownActions.js"],"names":["React","useEffect","useState","useContext","useRef","AppContext","withRouter","FilterDropDownActions","props","contextData","bulkAction","typeToDisplay","state","setState","console","log","onFormatChangeHandler","e","changePostsTypeToDisplay","router","push","pathname","query","type","target","value","onEmptyTrashHandler","EmptyTrash"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;;AAEA,MAAMC,qBAAqB,GAAGC,KAAK,IAAI;AACnC,QAAMC,WAAW,GAAGN,UAAU,CAACE,UAAD,CAA9B;AACA,QAAMK,UAAU,GAAGN,MAAM,CAAC,IAAD,CAAzB;AACA,QAAMO,aAAa,GAAGP,MAAM,CAAC,IAAD,CAA5B;AAEA,QAAM;AAAA,OAAEQ,KAAF;AAAA,OAASC;AAAT,MAAsBX,QAAQ,CAAC,EAAD,CAApC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,OAAO,CAACC,GAAR,CAAaP,KAAb;AACH,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;;AAGA,QAAMQ,qBAAqB,GAAGC,CAAC,IAAI,CAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAhBD;;AAkBA,QAAMC,wBAAwB,GAAGD,CAAC,IAAI;AAClCT,IAAAA,KAAK,CAACW,MAAN,CAAaC,IAAb,CAAkB;AACdC,MAAAA,QAAQ,EAACb,KAAK,CAACW,MAAN,CAAaE,QADR;AAEdC,MAAAA,KAAK,oBAAKd,KAAK,CAACc,KAAX;AAAiBC,QAAAA,IAAI,EAACN,CAAC,CAACO,MAAF,CAASC;AAA/B;AAFS,KAAlB,EADkC,CAIlC;AACA;AACA;AACA;AACA;AACA;AACH,GAVD;;AAYA,QAAMC,mBAAmB,GAAG,MAAM,CAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GA1BD;;AA4BA,QAAMC,UAAU,GAAG,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA,WAAO,IAAP;AACH,GAPD;;AASA,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAQ,IAAA,GAAG,EAAGjB,UAAd;AAA2B,IAAA,WAAW,EAAC;AAAvC,KACI;AAAQ,IAAA,KAAK,EAAC;AAAd,oBADJ,EAEI;AAAQ,IAAA,KAAK,EAAC;AAAd,iBAFJ,EAGI;AAAQ,IAAA,KAAK,EAAC;AAAd,aAHJ,EAII;AAAQ,IAAA,KAAK,EAAC;AAAd,aAJJ,CADJ,EAOI;AAAQ,IAAA,SAAS,EAAC,WAAlB;AAA8B,IAAA,OAAO,EAAG,MAAMM,qBAAqB;AAAnE,aAPJ,CADJ,EAUI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AAAQ,IAAA,GAAG,EAAGL,aAAd;AAA8B,IAAA,QAAQ,EAAGM,CAAC,IAAIC,wBAAwB,CAACD,CAAD;AAAtE,KACI;AAAQ,IAAA,KAAK,EAAC;AAAd,aADJ,EAEI;AAAQ,IAAA,KAAK,EAAC;AAAd,gBAFJ,CADJ,CAVJ,EAgBI,MAAC,UAAD,OAhBJ,CADJ;AAoBH,CAjGD;;AAkGA,eAAeX,UAAU,CAACC,qBAAD,CAAzB","sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport withRouter from 'next/dist/client/with-router'\r\n\r\nconst FilterDropDownActions = props => {\r\n    const contextData = useContext(AppContext);\r\n    const bulkAction = useRef(null);\r\n    const typeToDisplay = useRef(null);\r\n\r\n    const [ state, setState ] = useState({});\r\n\r\n    useEffect(() => {\r\n        console.log( props)\r\n    }, [props]);\r\n    const onFormatChangeHandler = e => {\r\n\r\n        // if (bulkAction.current.value !== 'none') {\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         loading:true\r\n        //     });\r\n        //     postsBulkAction(contextData.postsData.checkedPosts,bulkAction.current.value).then(()=>{\r\n        //        setData()\r\n        //     }).catch(err=>{\r\n        //         contextData.setState({\r\n        //             ...contextData.state,\r\n        //             loading:false\r\n        //         })\r\n        //     })\r\n        // }\r\n    };\r\n\r\n    const changePostsTypeToDisplay = e => {\r\n        props.router.push({\r\n            pathname:props.router.pathname,\r\n            query:{...props.query,type:e.target.value}})\r\n        // if (e.target.value !== 'none') {\r\n        //     contextData.setPostsData({\r\n        //         ...contextData.postsData,\r\n        //         type: e.target.value\r\n        //     })\r\n        // }\r\n    };\r\n\r\n    const onEmptyTrashHandler = () => {\r\n        // emptyTrash().then(res=>{\r\n        //     if (res.data.error){\r\n        //         contextData.setState({\r\n        //             ...contextData.state,\r\n        //             report:res.data.message,\r\n        //             reportColor:'red'\r\n        //         })\r\n        //     }else {\r\n        //         contextData.setState({\r\n        //             ...contextData.state,\r\n        //             loading: false\r\n        //         });\r\n        //         setData();\r\n        //         contextData.setState({\r\n        //             ...contextData.state,\r\n        //             report:res.data.message,\r\n        //             reportColor:'green'\r\n        //         })\r\n        //     }\r\n        // }).catch(()=>{\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         report:'Can Not Communicate With Server'\r\n        //     })\r\n        // })\r\n    }\r\n\r\n    const EmptyTrash = () => {\r\n        // if (contextData.postsData.status === 'Trash'){\r\n        //     return (\r\n        //         <button onClick={()=>onEmptyTrashHandler()}>Empty Trash</button>\r\n        //     )\r\n        // }else\r\n        return null\r\n    };\r\n\r\n    return (\r\n        <div className='FilterDropDownActions'>\r\n            <div className=\"bulkAction\">\r\n                <select ref={ bulkAction } placeholder='Bulk Actions'>\r\n                    <option value='none'>Bulk Actions</option>\r\n                    <option value='Published'>Published</option>\r\n                    <option value='Draft'>Draft</option>\r\n                    <option value='Trash'>Trash</option>\r\n                </select>\r\n                <button className='actionBtn' onClick={ () => onFormatChangeHandler() }>Apply</button>\r\n            </div>\r\n            <div className=\"DateCategoryFormat\">\r\n                <select ref={ typeToDisplay } onChange={ e => changePostsTypeToDisplay(e) }>\r\n                    <option value='video'>Video</option>\r\n                    <option value='standard'>Standard</option>\r\n                </select>\r\n            </div>\r\n            <EmptyTrash/>\r\n        </div>\r\n    );\r\n};\r\nexport default withRouter(FilterDropDownActions) ;"]},"metadata":{},"sourceType":"module"}