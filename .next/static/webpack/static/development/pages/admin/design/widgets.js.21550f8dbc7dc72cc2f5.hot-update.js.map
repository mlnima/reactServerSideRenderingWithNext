{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\design\\widgets.js.21550f8dbc7dc72cc2f5.hot-update.js","sources":["webpack:///./pages/admin/design/widgets/index.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../../components/layouts/AdminLayout'\r\nimport AddWidgetMenu from '../../../../components/adminIncludes/widgetsModel/AddWidgetMenu/AddWidgetMenu'\r\nimport { AppContext } from '../../../../context/AppContext'\r\nimport WidgetModel from '../../../../components/adminIncludes/widgetsModel/WidgetModel/WidgetModel';\r\nimport { getSetting, getWidgets, getWidgetsWithData, updateSetting, getMultipleWidgetWithData } from '../../../../_variables/ajaxVariables'\r\nimport { getAbsolutePath } from '../../../../_variables/_variables'\r\nimport ColorSection from '../../../../components/adminIncludes/design/ColorSection'\r\n\r\nconst HomePageWidgets = props => {\r\n\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        home: [],\r\n        homePageSidebar: [],\r\n        postPageSidebar: [],\r\n        postsPageSidebar: [],\r\n        footer: [],\r\n        tagsPageSidebar: [],\r\n        categoriesPageSidebar: [],\r\n        actorsPageSidebar: [],\r\n        header: []\r\n    })\r\n    useEffect(() => {\r\n\r\n        if (props.widgets) {\r\n            contextData.dispatchWidgetsSettings({\r\n                ...contextData.widgetsSettings,\r\n                widgets: [ ...props.widgets ]\r\n            })\r\n\r\n            //=============\r\n        }\r\n    }, []);\r\n\r\n\r\n\r\n    const renderHomeWidgets = contextData.widgetsSettings.widgets.map(widget => {\r\n        if (widget.position === 'home') {\r\n            return (\r\n                <WidgetModel key={ contextData.widgetsSettings.widgets.indexOf(widget) } data={ widget }/>\r\n            )\r\n        }\r\n    })\r\n    const renderHomePageSidebarWidgets = contextData.widgetsSettings.widgets.map(widget => {\r\n        if (widget.position === 'homePageSidebar') {\r\n            return (\r\n                <WidgetModel key={ contextData.widgetsSettings.widgets.indexOf(widget) } data={ widget }/>\r\n            )\r\n        }\r\n    })\r\n    const renderPostPageSidebarWidgets = contextData.widgetsSettings.widgets.map(widget => {\r\n        if (widget.position === 'postPageSidebar') {\r\n            return (\r\n                <WidgetModel key={ contextData.widgetsSettings.widgets.indexOf(widget) } data={ widget }/>\r\n            )\r\n        }\r\n    })\r\n    const renderPostsPageSidebarWidgets = contextData.widgetsSettings.widgets.map(widget => {\r\n        if (widget.position === 'postsPageSidebar') {\r\n            return (\r\n                <WidgetModel key={ contextData.widgetsSettings.widgets.indexOf(widget) } data={ widget }/>\r\n            )\r\n        }\r\n    })\r\n    const renderFooterWidgets = contextData.widgetsSettings.widgets.map(widget => {\r\n        if (widget.position === 'footer') {\r\n            return (\r\n                <WidgetModel key={ contextData.widgetsSettings.widgets.indexOf(widget) } data={ widget }/>\r\n            )\r\n        }\r\n    })\r\n    const renderTagsPageSidebarWidgets = contextData.widgetsSettings.widgets.map(widget => {\r\n        if (widget.position === 'tagsPageSidebar') {\r\n            return (\r\n                <WidgetModel key={ contextData.widgetsSettings.widgets.indexOf(widget) } data={ widget }/>\r\n            )\r\n        }\r\n    })\r\n    const renderCategoriesPageSidebarWidgets = contextData.widgetsSettings.widgets.map(widget => {\r\n        if (widget.position === 'categoriesPageSidebar') {\r\n            return (\r\n                <WidgetModel key={ contextData.widgetsSettings.widgets.indexOf(widget) } data={ widget }/>\r\n            )\r\n        }\r\n    })\r\n    const renderActorsPageSidebarWidgets = contextData.widgetsSettings.widgets.map(widget => {\r\n        if (widget.position === 'actorsPageSidebar') {\r\n            return (\r\n                <WidgetModel key={ contextData.widgetsSettings.widgets.indexOf(widget) } data={ widget }/>\r\n            )\r\n        }\r\n    })\r\n    const renderHeaderPageSidebarWidgets = contextData.widgetsSettings.widgets.map(widget => {\r\n        if (widget.position === 'header') {\r\n            return (\r\n                <WidgetModel key={ contextData.widgetsSettings.widgets.indexOf(widget) } data={ widget }/>\r\n            )\r\n        }\r\n    })\r\n\r\n    return (\r\n        <AdminLayout>\r\n\r\n            <h1>Widgets Settings :</h1>\r\n\r\n\r\n            <h2>Add Widgets:</h2>\r\n\r\n            <div id='HomePageWidgets'>\r\n                <div className=\"sidePanel\">\r\n                    <AddWidgetMenu/>\r\n                </div>\r\n                <div className=\"widgets\">\r\n                    <div className='widgetAdminPanelItem'>\r\n                        <p className='widgetAdminPanelItemHeader'>Homepage</p>\r\n                        { renderHomeWidgets }\r\n                    </div>\r\n                    <div className='widgetAdminPanelItem'>\r\n                        <p className='widgetAdminPanelItemHeader'>Header</p>\r\n                        { renderHeaderPageSidebarWidgets }\r\n                    </div>\r\n                    <div className='widgetAdminPanelItem'>\r\n                        <p className='widgetAdminPanelItemHeader'>Home Page Sidebar</p>\r\n                        { renderHomePageSidebarWidgets }\r\n                    </div>\r\n                    <div className='widgetAdminPanelItem'>\r\n                        <p className='widgetAdminPanelItemHeader'>Post Page</p>\r\n                        { renderPostPageSidebarWidgets }\r\n                    </div>\r\n                    <div className='widgetAdminPanelItem'>\r\n                        <p className='widgetAdminPanelItemHeader'>Posts Page</p>\r\n                        { renderPostsPageSidebarWidgets }\r\n                    </div>\r\n                    <div className='widgetAdminPanelItem'>\r\n                        <p className='widgetAdminPanelItemHeader'>Tags Page</p>\r\n                        { renderTagsPageSidebarWidgets }\r\n                    </div>\r\n                    <div className='widgetAdminPanelItem'>\r\n                        <p className='widgetAdminPanelItemHeader'>Categories Page</p>\r\n                        { renderCategoriesPageSidebarWidgets }\r\n                    </div>\r\n                    <div className='widgetAdminPanelItem'>\r\n                        <p className='widgetAdminPanelItemHeader'>Actors Page</p>\r\n                        { renderActorsPageSidebarWidgets }\r\n                    </div>\r\n                    <div className='widgetAdminPanelItem'>\r\n                        <p className='widgetAdminPanelItemHeader'>Footer</p>\r\n                        { renderFooterWidgets }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <h2>Color Widget:</h2>\r\n            <div className='colorSettingSections'>\r\n                <ColorSection designName='widgetHeaderBackgroundColor'/>\r\n                <ColorSection designName='widgetHeaderTextColor'/>\r\n                <ColorSection designName='widgetHeaderRedirectLinkBackgroundColor'/>\r\n                <ColorSection designName='widgetHeaderRedirectLinkTextColor'/>\r\n                <ColorSection designName='widgetBodyBackgroundColor'/>\r\n                <ColorSection designName='widgetBodyTextColor'/>\r\n                <ColorSection designName='widgetBodyBorder'/>\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\nHomePageWidgets.getInitialProps = async ({ asPath, pathname, query, req, res, err }) => {\r\n    const domainName = req ? await getAbsolutePath(req) : '';\r\n    let widgets;\r\n    const widgetsData = await getMultipleWidgetWithData({ widgets: [ 'all' ] }, false, domainName,Date.now())\r\n    widgets = widgetsData.data.widgets ? widgetsData.data.widgets : []\r\n\r\n    return { widgets, domainName }\r\n}\r\n\r\nexport default HomePageWidgets;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAHA;AAAA;AACA;AAaA;AAEA;AACA;AAEA;AAFA;AAMA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAQA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAOA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAGA;AAAA;AACA;AAJA;AAGA;AACA;AAJA;AAMA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;;;;A","sourceRoot":""}