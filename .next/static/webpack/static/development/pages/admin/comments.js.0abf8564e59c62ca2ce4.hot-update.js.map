{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\comments.js.0abf8564e59c62ca2ce4.hot-update.js","sources":["webpack:///./pages/admin/comments/index.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AdminLayout from '../../../components/layouts/AdminLayout'\r\nimport {getComments} from '../../../_variables/ajaxPostsVariables'\r\nimport AdminRenderComments from '../../../components/adminIncludes/commentsPageComponents/AdminRenderComments/AdminRenderComments'\r\nimport AdminCommentsControl from '../../../components/adminIncludes/commentsPageComponents/AdminCommentsControl/AdminCommentsControl'\r\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent'\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\n\r\nconst comments = props => {\r\n    const [ state, setState ] = useState({});\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        setState(props)\r\n    },[ props]);\r\n\r\n\r\n\r\n    return (\r\n        <AdminLayout>\r\n            <div>\r\n                <AdminCommentsControl\r\n                    queryData={props.query || props.router.query}\r\n                    pathnameData={props.pathname ||props.router.pathname }\r\n                />\r\n                <PaginationComponent\r\n                    isActive={ true }\r\n                    currentPage={ props.getCommentsData.pageNo }\r\n                    totalCount={ props.totalComments }\r\n                    size={ props.getCommentsData.size }\r\n                    maxPage={ Math.ceil(parseInt(props.totalComments) / parseInt(props.getCommentsData.size)) }\r\n                    queryData={props.query || props.router.query}\r\n                    pathnameData={props.pathname ||props.router.pathname }\r\n                />\r\n               <AdminRenderComments {...state}/>\r\n            </div>\r\n        </AdminLayout>\r\n    );\r\n};\r\n\r\ncomments.getInitialProps = async ({ pathname, query, req, res, err }) =>{\r\n    let comments;\r\n    const getCommentsData = {\r\n        size: parseInt(query.size)  ||30,\r\n        pageNo: parseInt(query.page) || 1,\r\n        keyword: query.keyword || '',\r\n        sort: query.sort || 'latest',\r\n        status: query.status || 'all',\r\n    }\r\n    const commentsData = await getComments(getCommentsData)\r\n    comments=commentsData.data\r\n    return {  query,pathname,comments:comments.comments,totalComments:comments.count,getCommentsData }\r\n}\r\nexport default comments;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAIA;AAIA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAaA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAAA;AACA;AADA;AASA;AACA;AAVA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;;;;A","sourceRoot":""}