{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\post.js.7823ff385689e8e66f05.hot-update.js","sources":["webpack:///./pages/admin/post/index.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { getPost } from '../../../_variables/ajaxPostsVariables';\r\nimport { getAbsolutePath } from '../../../_variables/_variables'\r\n\r\nimport AdminLayout from \"../../../components/layouts/AdminLayout\";\r\nimport TitleDescription from \"../../../components/adminIncludes/PostComponents/TitleDescription/TitleDescription\";\r\nimport ActionOnPost from \"../../../components/adminIncludes/PostComponents/ActionOnPost/ActionOnPost\";\r\nimport DropDownWidget from \"../../../components/adminIncludes/PostComponents/DropDownWidget/DropDownWidget\";\r\nimport { AppContext } from \"../../../context/AppContext\";\r\nimport Format from \"../../../components/adminIncludes/PostComponents/Format/Format\";\r\nimport PostCategoriesTagsActors from \"../../../components/adminIncludes/PostComponents/PostCategoriesTagsActors/PostCategoriesTagsActors\";\r\nimport VideoInformation from \"../../../components/adminIncludes/PostComponents/VideoInformation/VideoInformation\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport TextInputWithUploadBtn from '../../../components/adminIncludes/PostComponents/TextInputWithUploadBtn/TextInputWithUploadBtn'\r\nimport ImagePreview from '../../../components/adminIncludes/PostComponents/ImagePreview/ImagePreview';\r\nimport Link from 'next/link'\r\nimport dataDecoder from '../../../server/tools/dataDecoder'\r\n\r\nconst Index = props => {\r\n    const contextData = useContext(AppContext);\r\n\r\n    const [ state, setState ] = useState({\r\n        tags: [],\r\n        categories: [],\r\n        actors: [],\r\n        inSlideShow: false\r\n    })\r\n\r\n    const onChangeHandler = e => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    const onPostMetaChangeHandler = (type, data) => {\r\n        setState({\r\n            ...state,\r\n            [type]: data\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (props.router.query.new&& state._id){\r\n            props.router.reload()\r\n        }else {\r\n            setState(props.post)\r\n        }\r\n    }, [ props ]);\r\n\r\n    useEffect(() => {\r\n        console.log(props.router )\r\n    }, [props]);\r\n\r\n    return (\r\n        <>\r\n            <AdminLayout>\r\n                <Link href='/admin/post?new=1'><a className='newPostLinkAdminPanel'>New Post</a></Link>\r\n                <div className='Post'>\r\n\r\n                    <div className=\"content\">\r\n                        <TitleDescription postData={ state } onChangeHandler={ onChangeHandler }/>\r\n                        <TextInputWithUploadBtn postData={ state } onChangeHandler={ onChangeHandler } name='mainThumbnail' title='Main thumbnail'/>\r\n                        <ImagePreview postData={ state }/>\r\n                        <DropDownWidget postData={ state } component={ VideoInformation } title='Video Information' onChangeHandler={ onChangeHandler }/>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"side\">\r\n                        <DropDownWidget postData={ state } component={ ActionOnPost } title={ state.status } onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget postData={ state } component={ Format } title='Format' onChangeHandler={ onChangeHandler }/>\r\n                        <DropDownWidget postData={ state } isNewPost={ props.query.new === 'true' }\r\n                                        component={ PostCategoriesTagsActors }\r\n                                        type='categories' title='Post Category'\r\n                                        onChangeHandler={ onChangeHandler } onPostMetaChangeHandler={ onPostMetaChangeHandler }/>\r\n                        <DropDownWidget postData={ state } isNewPost={ props.query.new === 'true' }\r\n                                        component={ PostCategoriesTagsActors }\r\n                                        type='tags' title='Post Tags'\r\n                                        onChangeHandler={ onChangeHandler } onPostMetaChangeHandler={ onPostMetaChangeHandler }/>\r\n                        <DropDownWidget postData={ state } isNewPost={ props.query.new === 'true' }\r\n                                        component={ PostCategoriesTagsActors }\r\n                                        type='actors' title='Post Actors'\r\n                                        onChangeHandler={ onChangeHandler } onPostMetaChangeHandler={ onPostMetaChangeHandler }/>\r\n                    </div>\r\n\r\n                </div>\r\n            </AdminLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nIndex.getInitialProps = async ({ query, req }) => {\r\n    const domainName = req ? await getAbsolutePath(req) : '';\r\n    let post;\r\n    let postData\r\n    let requestBody;\r\n\r\n    const newPostData = {\r\n        status: 'published',\r\n        postType: 'video',\r\n        tags: [],\r\n        categories: [],\r\n        actors: [],\r\n        inSlideShow: false,\r\n        quality: '2160p',\r\n        views: 0,\r\n        likes: 0,\r\n        disLikes: 0\r\n    }\r\n\r\n    if (query.new) {\r\n        post = newPostData\r\n    } else if (query.postTitle || query.id) {\r\n        requestBody = {\r\n            postTitle: query.postTitle,\r\n            _id: query.id,\r\n        };\r\n        postData = await getPost(requestBody, true, domainName)\r\n        post = postData.data ? dataDecoder(postData.data.post).post : newPostData\r\n    }\r\n\r\n    return { post, query }\r\n};\r\nexport default withRouter(Index);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAJA;AAHA;AAAA;AACA;AASA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAHA;AAIA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAHA;AAIA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAHA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AACA;AAPA;AAAA;AAAA;AAAA;AACA;AAmBA;AApBA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AAqBA;AACA;AACA;AAFA;AAtBA;AAAA;AACA;AADA;AA0BA;AACA;AACA;AA5BA;AAAA;AA8BA;AAAA;AAAA;AACA;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AA+BA;;;;A","sourceRoot":""}