{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\settings\\widgets.js.50d442c0870efd78ee64.hot-update.js","sources":["webpack:///./components/adminIncludes/widgetsModel/AddWidgetMenu/AddWidgetMenu.js","webpack:///./components/adminIncludes/widgetsModel/AddWidgetMenu/AddWidgetWithPositionMenu.js","webpack:///./components/adminIncludes/widgetsModel/WidgetModel/WidgetModel.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { widgetModels } from './models'\r\nimport { AppContext } from '../../../../context/AppContext';\r\nimport { addNewWidget, getWidgets } from '../../../../_variables/ajaxVariables'\r\nimport AddWidgetWithPositionMenu from './AddWidgetWithPositionMenu'\r\n\r\nconst AddWidgetMenu = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({});\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n    const onAddNewWidget = (position, type) => {\r\n        let dataToSave = widgetModels;\r\n        dataToSave.position = position\r\n        dataToSave.type = type\r\n        addNewWidget(widgetModels).then(res => {\r\n            getWidgets('home').then(res => {\r\n                contextData.dispatchWidgetsSettings({\r\n                    widgets: [ ...res.data.widgets ]\r\n                })\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='AddWidgetMenu'>\r\n            <AddWidgetWithPositionMenu type='text' name='Text'/>\r\n            <AddWidgetWithPositionMenu type='posts' name='Posts'/>\r\n            <AddWidgetWithPositionMenu type='recentComments' name='Recent Comments'/>\r\n            <AddWidgetWithPositionMenu type='search' name='Search'/>\r\n            <AddWidgetWithPositionMenu type='tagsCloud' name='Tags Cloud'/>\r\n            <AddWidgetWithPositionMenu type='video' name='Video'/>\r\n            <AddWidgetWithPositionMenu type='navigationMenu' name='Navigation Menu'/>\r\n        </div>\r\n    );\r\n};\r\nexport default AddWidgetMenu;\r\n\r\n\r\n// image recentComments search tagCloud categoriesCloud video navigationMenu\r\n","import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport './AddWidgetWithPositionMenu.scss'\r\nimport { widgetModels } from './models'\r\nimport { addNewWidget, getWidgets } from '../../../../_variables/ajaxVariables'\r\nimport { AppContext } from '../../../../context/AppContext'\r\n\r\nconst AddWidgetWithPositionMenu = props => {\r\n    const contextData = useContext(AppContext);\r\n    const [ state, setState ] = useState({\r\n        open:false\r\n    });\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n    const onOpenHandler =()=>{\r\n        state.open?setState({\r\n            ...state,\r\n            open: false\r\n        }):setState({\r\n            ...state,\r\n            open: true\r\n        })\r\n    }\r\n\r\n    const onAddNewWidget = (position, type) => {\r\n        let dataToSave = widgetModels;\r\n        dataToSave.position = position\r\n        dataToSave.type = type\r\n        addNewWidget(widgetModels).then(res => {\r\n            getWidgets('home').then(res => {\r\n                contextData.dispatchWidgetsSettings({\r\n                    widgets: [ ...res.data.widgets ]\r\n                })\r\n            })\r\n        })\r\n\r\n    }\r\n\r\n\r\n    if (state.open){\r\n        return (\r\n            <div className='AddWidgetWithPositionMenu'>\r\n                <button className='positionsOpener' onClick={()=>onOpenHandler()}>{props.name}</button>\r\n                <div className=\"AddWidgetWithPositionMenuPositions\">\r\n                    <button className='AddWidgetWithPositionMenuPositionsBtn' onClick={ () => onAddNewWidget('home', props.type) }>Home Page</button>\r\n                    <button className='AddWidgetWithPositionMenuPositionsBtn' onClick={ () => onAddNewWidget('homePageSidebar', props.type) }>Home Page Sidebar</button>\r\n                    <button className='AddWidgetWithPositionMenuPositionsBtn' onClick={ () => onAddNewWidget('postPageSidebar', props.type) }>Post Page Sidebar</button>\r\n                    <button className='AddWidgetWithPositionMenuPositionsBtn' onClick={ () => onAddNewWidget('postsPageSidebar', props.type) }>Posts Page Sidebar</button>\r\n                    <button className='AddWidgetWithPositionMenuPositionsBtn' onClick={ () => onAddNewWidget('tagsPageSidebar', props.type) }>Tags Page Sidebar</button>\r\n                    <button className='AddWidgetWithPositionMenuPositionsBtn' onClick={ () => onAddNewWidget('categoriesPageSidebar', props.type) }>Categories Page Sidebar</button>\r\n                    <button className='AddWidgetWithPositionMenuPositionsBtn' onClick={ () => onAddNewWidget('actorsPageSidebar', props.type) }>Actors Page Sidebar</button>\r\n                    <button className='AddWidgetWithPositionMenuPositionsBtn' onClick={ () => onAddNewWidget('footer', props.type) }>Footer</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }else {\r\n        return (\r\n            <div className='AddWidgetWithPositionMenu'>\r\n                <button className='positionsOpener' onClick={()=>onOpenHandler()}>{props.name}</button>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n};\r\nexport default AddWidgetWithPositionMenu;\r\n","import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { AppContext } from '../../../../context/AppContext'\r\nimport { deleteWidgets, getWidgets, updateWidgets } from '../../../../_variables/ajaxVariables'\r\n\r\nconst WidgetModel = props => {\r\n    const contextData = useContext(AppContext);\r\n    const title = useRef(null)\r\n    const categories = useRef(null)\r\n    const tags = useRef(null)\r\n    const count = useRef(null)\r\n    const pagination = useRef(null)\r\n    const redirectLink = useRef(null)\r\n    const [ state, setState ] = useState({\r\n        title: props.data.title || '',\r\n        categories: props.data.categories || [],\r\n        tags: props.data.tags || [],\r\n        count: props.data.count || 6,\r\n        pagination: props.data.pagination || false,\r\n        redirectLink: props.data.redirectLink || '',\r\n        redirectToTitle:props.data.redirectToTitle ||'',\r\n        type: props.data.type || 'posts',\r\n        position: props.data.position || 'home',\r\n        sortBy: props.data.sortBy || '-id',\r\n        text: props.data.text || '',\r\n        textAlign:props.data.text || 'center',\r\n        customHtml: props.data.customHtml || ''\r\n    });\r\n\r\n    const [widgetSettings,setWidgetSettings] = useState({\r\n        open:false\r\n    })\r\n\r\n\r\n    const onOpenHandler = ()=>{\r\n        widgetSettings.open?setWidgetSettings({...widgetSettings,open: false}):setWidgetSettings({...widgetSettings,open: true})\r\n    }\r\n\r\n\r\n\r\n    const onDeleteHandler = () => {\r\n        deleteWidgets(props.data._id).then(() => {\r\n            contextData.dispatchWidgetsSettings({\r\n                widgets: contextData.widgetsSettings.widgets.filter(w => w._id !== props.data._id)\r\n            })\r\n        })\r\n    }\r\n    const onSaveHandler = () => {\r\n        updateWidgets(props.data._id, state).then(res => {\r\n            // let newData = res.data.updatedWidgets\r\n            // setState({ ...state, ...newData })\r\n            getWidgets('all').then(res => {\r\n                contextData.dispatchWidgetsSettings({\r\n                    widgets: [ ...res.data.widgets ]\r\n                })\r\n            })\r\n        })\r\n    }\r\n    const onChangeHandler = e => {\r\n        setState({\r\n            ...state,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    const onNewCategoryAddHandler = () => {\r\n        setState({\r\n            ...state,\r\n            categories: [ ...state.categories, categories.current.value ]\r\n        })\r\n        categories.current.value = ''\r\n    }\r\n    const onNewTagAddHandler = () => {\r\n        setState({\r\n            ...state,\r\n            tags: [ ...state.tags, tags.current.value ]\r\n        })\r\n        tags.current.value = ''\r\n    }\r\n    const deleteTagHandler = e => {\r\n        setState({\r\n            ...state,\r\n            tags: state.tags.filter(tag => tag !== e.target.name)\r\n        })\r\n    }\r\n    const deleteCategoryHandler = e => {\r\n        setState({\r\n            ...state,\r\n            categories: state.categories.filter(category => category !== e.target.name)\r\n        })\r\n    }\r\n\r\n    const renderTags = state.tags.map(tag => {\r\n        return (\r\n            <button name={ tag } onClick={ e => deleteTagHandler(e) }>{ tag }X</button>\r\n        )\r\n    })\r\n    const renderCategories = state.categories.map(category => {\r\n        return (\r\n            <button name={ category } onClick={ e => deleteCategoryHandler(e) }>{ category }X</button>\r\n        )\r\n    })\r\n\r\n\r\n    useEffect(()=>{\r\n\r\n\r\n        setTimeout(()=>{\r\n            let items= ['count']\r\n            items.forEach(item=>{\r\n                if ([item].current){\r\n                    [item].current.value=state[item]\r\n                }\r\n            })\r\n        },2000)\r\n\r\n    },[])\r\n\r\n    const RenderOptionByFormat = () => {\r\n        switch ( state.type ) {\r\n            case 'posts':\r\n                return (\r\n                    <>\r\n                        <p>Sort By:</p>\r\n                        <select name='sortBy' value={ state.sortBy } onChange={ e => onChangeHandler(e) }>\r\n                            <option value='id'>ID</option>\r\n                            <option value='views'>Views</option>\r\n                            <option value='likes'>Likes</option>\r\n                        </select>\r\n                        <p>Categories:</p>\r\n                        <div className='inputWithAddBtn'>\r\n                            <input ref={ categories } name='category' className='category' placeholder='Categories'/>\r\n                            <button onClick={ () => onNewCategoryAddHandler() }>add</button>\r\n                        </div>\r\n\r\n                        <div className='categoriesTags'>\r\n                            { renderCategories }\r\n                        </div>\r\n                        <p>Tags:</p>\r\n                        <div className='inputWithAddBtn'>\r\n                            <input ref={ tags } className='tags' name='tags' placeholder='Tags'/>\r\n                            <button onClick={ () => onNewTagAddHandler() }>add</button>\r\n                        </div>\r\n\r\n                        <div className='categoriesTags'>\r\n                            { renderTags }\r\n                        </div>\r\n                        <p>Count:</p>\r\n                        <input ref={count} name='count' type='number' className='count' placeholder='count' value={state.count}  onChange={ e => onChangeHandler(e) }/>\r\n                        <span>Pagination:</span>\r\n                        <select name='pagination' value={ state.pagination } onChange={ e => onChangeHandler(e) }>\r\n                            <option value={ false }>false</option>\r\n                            <option value={ true }>true</option>\r\n                        </select>\r\n                    </>\r\n                )\r\n                break\r\n            case 'text':\r\n                return (\r\n                    <>\r\n\r\n                    </>\r\n                )\r\n                break\r\n            default:\r\n                return null\r\n                break\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n    if(widgetSettings.open){\r\n        return (\r\n            <>\r\n                <div className='widget-open-control'>\r\n                    <p>{props.data.title||props.data.type}</p>\r\n                    <button onClick={()=>onOpenHandler()}>{widgetSettings.open?'close':'open'}</button>\r\n                </div>\r\n            <div className='widgetModel'>\r\n                <div className='widgetInfo'>\r\n                    <label className='widgetId'><p>ID :</p> <p>{ props.data._id }</p></label>\r\n                </div>\r\n                <p>Title:</p>\r\n                <input name='title' ref={ title } className='title' placeholder='Title' value={ state.title } onChange={ e => onChangeHandler(e) }/>\r\n                <p>Type:</p>\r\n                <select name='type' value={ state.type } onChange={ e => onChangeHandler(e) }>\r\n                    <option value='posts'>Posts</option>\r\n                    <option value='text'>Text</option>\r\n                    <option value='recentComments'>Recent Comments</option>\r\n                    <option value='search'>Search</option>\r\n                    <option value='tagsCloud'>Tags Cloud</option>\r\n                    <option value='video'>Video</option>\r\n                    <option value='navigationMenu'>Navigation Menu</option>\r\n                </select>\r\n                <p>Position:</p>\r\n                <select name='position' value={ state.position } onChange={ e => onChangeHandler(e) }>\r\n                    <option value='home'>Home</option>\r\n                    <option value='homePageSidebar'>Home Page Sidebar</option>\r\n                    <option value='postPageSidebar'>Post Page SideBar</option>\r\n                    <option value='postsPageSidebar'>Posts Page SideBar</option>\r\n                    <option value='categoriesPageSidebar'>Categories Page SideBar</option>\r\n                    <option value='tagsPagesSidebar'>Tags Page SideBar</option>\r\n                    <option value='actorsPagesSidebar'>Actors Page SideBar</option>\r\n                    <option value='footer'>footer</option>\r\n                </select>\r\n                <p>Text:</p>\r\n                <textarea name='text' value={state.text} onChange={e=>onChangeHandler(e)}/>\r\n                <p>Text Align:</p>\r\n                <select name='textAlign' value={ state.textAlign } onChange={ e => onChangeHandler(e) }>\r\n                    <option value='left'>Left</option>\r\n                    <option value='center'>Center</option>\r\n                    <option value='right'>Right</option>\r\n                </select>\r\n                <RenderOptionByFormat/>\r\n                <p>Redirect Link:</p>\r\n                <input className='redirectLink' name='redirectLink' placeholder='Redirect' value={ state.redirectLink } onChange={ e => onChangeHandler(e) }/>\r\n                <p>Title for Redirect Link</p>\r\n                <input className='redirectToTitle' name='redirectToTitle' placeholder='Title for Redirect Link' value={ state.redirectToTitle } onChange={ e => onChangeHandler(e) }/>\r\n                <div className='control'>\r\n                    <button onClick={ () => onSaveHandler() }>Save</button>\r\n                    <button onClick={ () => onDeleteHandler() }>Delete</button>\r\n                </div>\r\n            </div>\r\n                </>\r\n        );\r\n    }else {\r\n        return (\r\n            <div className='widget-open-control'>\r\n                <p>{props.data.title||props.data.type}</p>\r\n                <button onClick={()=>onOpenHandler()}>{widgetSettings.open?'close':'open'}</button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n};\r\nexport default WidgetModel;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AADA;AAFA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAFA;AAKA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AARA;AAAA;AACA;AADA;AAyBA;AADA;AAxBA;AAAA;AACA;AA4BA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AADA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAFA;AAIA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAIA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AACA;AACA;AA/CA;AAkDA;AACA;AAGA;AACA;AAEA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAQA;AACA;AAAA;;;;A","sourceRoot":""}