{"version":3,"file":"static/webpack/static\\development\\pages\\admin\\posts.js.779f178f56f8fa03baed.hot-update.js","sources":["webpack:///./components/adminIncludes/PostsComponents/PostsDataTable/BodyTable.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef, createRef } from 'react';\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport Link from \"next/link\";\r\n\r\nconst BodyTable = props => {\r\n    const contextData = useContext(AppContext);\r\n    let selectBoxes = useRef(contextData.adminPosts.map(() => createRef()));\r\n    const [ state, setState ] = useState({\r\n        hoveredId: '',\r\n        isMobile: false\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (window.innerWidth < 768) {\r\n            setState({\r\n                ...state,\r\n                isMobile: true\r\n            })\r\n        }\r\n    }, []);\r\n\r\n    const onDeletePermanentlyHandler = () => {\r\n        // deletePost(state.hoveredId).then(res => {\r\n        //     const posts = contextData.postsData.posts.filter(post => {\r\n        //         return post._id !== state.hoveredId\r\n        //     });\r\n        //     const report = contextData.state.reports.push(res.data.message)\r\n        //     contextData.setPostsData({\r\n        //         ...contextData.postsData,\r\n        //         posts\r\n        //     });\r\n        //     contextData.setState({\r\n        //         ...contextData.state,\r\n        //         report\r\n        //     })\r\n        // })\r\n    };\r\n\r\n    let HoverOnTitle = (props) => {\r\n        if (props.post._id === state.hoveredId) {\r\n            let editPostPath = `/admin/post?id=${ props.post._id }`;\r\n            if (props.post.status === 'trash') {\r\n                return (\r\n                    <th className='postControlOptions'>\r\n                        <Link href={ editPostPath }><a><button>Edit</button></a></Link>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'delete') }>Delete</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'draft') }>Draft</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'pending') }>Pending</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'published') }>Publish</button>\r\n                        <button>View</button>\r\n                    </th>\r\n                )\r\n            }else if (props.post.status === 'published'){\r\n                return (\r\n                    <th className='postControlOptions'>\r\n                        <Link href={ editPostPath }><a><button>Edit</button></a></Link>\r\n                        {/*<button onClick={ () => onDeletePermanentlyHandler(props.post._id) }>Delete</button>*/}\r\n                        <button onClick={ () => contextData.functions.bulkActionPost([ state.hoveredId ], 'trash') }>Trash</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'draft') }>Draft</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'pending') }>Pending</button>\r\n                        <button>View</button>\r\n                    </th>\r\n                )\r\n            }else {\r\n                return (\r\n                    <th className='postControlOptions'>\r\n                        <Link href={ editPostPath }><a><button>Edit</button></a></Link>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'draft') }>Draft</button>\r\n                        <button onClick={ () => contextData.functions.bulkActionPost([ state.hoveredId ], 'pending') }>Pending</button>\r\n                        <button>View</button>\r\n                        <button onClick={ () => contextData.functions.bulkActionPost([ state.hoveredId ], 'trash') }>Trash</button>\r\n                        <button onClick={ () =>  contextData.functions.bulkActionPost([ state.hoveredId ], 'published') }>Publish</button>\r\n                    </th>\r\n                )\r\n            }\r\n\r\n        } else return null\r\n    };\r\n\r\n    const onCheckHandler = e => {\r\n        //\r\n        // if (e.target.checked) {\r\n        //     if (!contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts;\r\n        //         pushedItemArr.push(e.target.name);\r\n        //         pushedItemArr = [...new Set(pushedItemArr)]\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        //\r\n        // } else {\r\n        //     if (contextData.postsData.checkedPosts.includes(e.target.name)) {\r\n        //         let pushedItemArr = contextData.postsData.checkedPosts.filter(id => {\r\n        //             return id !== e.target.name\r\n        //         });\r\n        //         pushedItemArr = [...new Set(pushedItemArr)];\r\n        //         contextData.setPostsData({\r\n        //             ...contextData.postsData,\r\n        //             checkedPosts: pushedItemArr\r\n        //         });\r\n        //     }\r\n        // }\r\n    };\r\n\r\n    let renderPosts = props.postsSource.posts.map(post => {\r\n\r\n        const renderTags = post.tags.map(item => {\r\n            return (\r\n                <Link href='/' key={ item } > <a className='tagPreviewItem'>{ item }</a>,</Link>)\r\n        });\r\n\r\n        let author = post.author;\r\n        if (post.author === contextData.userData._id) {\r\n            author = contextData.userData.username\r\n        }\r\n\r\n        let isChecked = contextData.adminPostsData.checkedPosts.includes(post._id);\r\n        return (\r\n\r\n\r\n            <tr key={ post._id } className='BodyTableItems' onTouchStart={ () => {\r\n                setState({ ...state, hoveredId: post._id })\r\n            } } onMouseEnter={ () => {\r\n                setState({ ...state, hoveredId: post._id })\r\n            } }>\r\n                <td className='postColumn'>\r\n                    <div>\r\n                        <input name={ post._id } className=' BodyTableItemCheckBox' type='checkbox'\r\n                               ref={ e => selectBoxes.current[contextData.adminPosts.indexOf(post)] = e }\r\n                               checked={ isChecked }\r\n                               onChange={ (e) => onCheckHandler(e) }/>\r\n                    </div>\r\n                    <div>\r\n                        <p className='BodyTableItem'>{ post.title }</p>\r\n\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p className='BodyTableItem author noMobile'>{ author }</p>\r\n                    </div>\r\n                    <div className='tagCategoriesActorsPreview BodyTableItem noMobile'>\r\n                        <span>   { post.categories + ' , ' }</span>\r\n\r\n\r\n                    </div>\r\n                    <div className='tagCategoriesActorsPreview BodyTableItem noMobile'>\r\n                        <span>   { post.tags + ' , ' }</span>\r\n\r\n                    </div>\r\n\r\n                    <div className='tagCategoriesActorsPreview BodyTableItem noMobile'>\r\n                        <span>      { post.actors + ' , ' }</span>\r\n\r\n                    </div>\r\n\r\n                    <div>\r\n                        <p className='BodyTableItem noMobile'>{ post.status }</p>\r\n                    </div>\r\n                    < div>\r\n                        < img className='BodyTableItem noMobile' src={ post.mainThumbnail }/>\r\n                    </div>\r\n                </td>\r\n                <HoverOnTitle post={ post }/>\r\n               </tr>\r\n\r\n\r\n        )\r\n    });\r\n\r\n    return (\r\n        <tbody className='BodyTable'>\r\n        { renderPosts }\r\n        </tbody>\r\n    );\r\n};\r\nexport default withRouter(BodyTable);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAHA;AAIA;AACA;AAFA;AAHA;AAAA;AACA;AAOA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAJA;AAKA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAHA;AAMA;AAAA;AAKA;AAAA;AAEA;AAAA;AAKA;AAAA;AAKA;AAAA;AAMA;AAAA;AAGA;AAAA;AAAA;AAGA;AAAA;AAKA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;;;;A","sourceRoot":""}