{"version":3,"file":"static/webpack/static\\development\\pages\\page\\actors.js.2cb64a9002248d43d62b.hot-update.js","sources":["webpack:///./pages/page/actors/index.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport AppLayout from '../../../components/layouts/AppLayout'\r\nimport { AppContext } from '../../../context/AppContext'\r\nimport TagElement from '../../../components/includes/TagElement/TagElement'\r\nimport { getSetting, getWidgetsWithData } from '../../../_variables/ajaxVariables'\r\nimport { getMeta } from '../../../_variables/ajaxPostsVariables'\r\nimport CategoryElement from '../../../components/includes/CategoryElement/CategoryElement'\r\nimport ActorElement from '../../../components/includes/ActorElement/ActorElement'\r\nimport SiteSettingSetter from '../../../components/includes/SiteSettingsSetter/SiteSettingsSetter'\r\nimport PaginationComponent from '../../../components/includes/PaginationComponent/PaginationComponent'\r\nimport withRouter from 'next/dist/client/with-router'\r\nimport SideBar from '../../../components/includes/Sidebar/Sidebar'\r\nconst actors = props => {\r\n    const [state,setState]=useState({\r\n        style:{}\r\n    })\r\n    const renderActors = props.actorsSource.metas.map(meta => {\r\n        return (\r\n            <ActorElement key={ meta._id } imageUrl={ meta.imageUrl } noImageUrl={ meta.noImageUrl } name={ meta.name } count={ meta.count }/>\r\n        )\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log( props)\r\n        if (props.identity.actorsPageSidebar){\r\n            setState({\r\n                style: {\r\n                    gridArea:'content'\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [props]);\r\n    return (\r\n        <>\r\n            <AppLayout>\r\n                <SiteSettingSetter  { ...props }/>\r\n                <div style={state.style} className={ props.identity.actorsPageSidebar ? 'content withSidebar':'content withOutSidebar'  } >\r\n                    <div>\r\n                        <div className='actors'>\r\n                            { renderActors }\r\n                        </div>\r\n                        <PaginationComponent\r\n                            isActive={ true }\r\n                            currentPage={props.getActorsData.pageNo }\r\n                            totalCount={ props.actorsSource.totalCount }\r\n                            size={ props.getActorsData.size }\r\n                            maxPage={ Math.ceil(parseInt(props.actorsSource.totalCount) / parseInt(props.getActorsData.size))- 1 }\r\n                            queryData={props.query || props.router.query}\r\n                            pathnameData={props.pathname ||props.router.pathname }\r\n                        />\r\n                    </div>\r\n                    <SideBar isActive={props.identity.actorsPageSidebar} widgets={props.widgets} position='actorsPageSidebar'/>\r\n                </div>\r\n\r\n            </AppLayout>\r\n        </>\r\n    );\r\n};\r\n\r\nactors.getInitialProps = async ({ pathname, query, req, res, err }) => {\r\n    let navigation;\r\n    let identity;\r\n    let actorsSource ;\r\n    let widgets;\r\n    const identityData = await getSetting('identity');\r\n    const navigationData = await getSetting('navigation');\r\n    const widgetsData = await getWidgetsWithData('actorsPageSidebar')\r\n    identity = identityData.data.setting ? identityData.data.setting.data : {}\r\n    navigation = navigationData.data.setting ? navigationData.data.setting : {}\r\n    widgets = widgetsData.data.widgets ? widgetsData.data.widgets : []\r\n    const getActorsData = {\r\n        type: 'actor',\r\n        searchForImageIn:'actors',\r\n        pageNo: parseInt(query.page) || 1,\r\n        size: parseInt(query.size) || parseInt(identity.tagsCountPerPage) ||30,\r\n        sort: query.sort || 'latest',\r\n    }\r\n\r\n    const categoriesData = await getMeta(getActorsData)\r\n    actorsSource = categoriesData.data ? categoriesData.data : []\r\n\r\n    return { identity, navigation, query, actorsSource,getActorsData,pathname,widgets }\r\n}\r\nexport default withRouter(actors);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AADA;AADA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AADA;AAKA;AAEA;AACA;AAIA;AAAA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAUA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAMA;AANA;AAAA;AACA;AADA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAXA;AAAA;AACA;AADA;AAmBA;AACA;AApBA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;;;;A","sourceRoot":""}