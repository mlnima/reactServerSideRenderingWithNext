{"version":3,"file":"static/webpack/static\\development\\pages\\posts.js.b873e0453aeea8f78773.hot-update.js","sources":["webpack:///./components/includes/PaginationComponent/PaginationComponent.js"],"sourcesContent":["import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport Link from 'next/link'\r\nimport withRouter from 'next/dist/client/with-router'\r\n\r\nconst PaginationComponent = props => {\r\n    const [ state, setState ] = useState({\r\n        pages: [],\r\n        elements:[]\r\n    });\r\n\r\n    let numberGen = (current) => {\r\n        console.log( current)\r\n        let numArr = [];\r\n        if (current === 1) {\r\n            for (let i = 1; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 2) {\r\n            numArr.push(1)\r\n            for (let i = 2; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 3) {\r\n            numArr.push(1)\r\n            numArr.push(2)\r\n            for (let i = 3; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current > 3) {\r\n            let min = current - 3\r\n            let max = current + 3\r\n            for (let i = current; i <= max; i++) {\r\n                numArr.push(i)\r\n            }\r\n            for (let i = current; i >= min; i--) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current > 3) {\r\n            numArr.push(1)\r\n        }\r\n        if (Math.ceil(props.totalCount / props.size)) {\r\n            numArr.push(parseInt(props.maxPage) - 1)\r\n        }\r\n\r\n        numArr = [ ...new Set(numArr) ];\r\n        numArr = numArr.sort((x, y) => {\r\n            return x - y\r\n        });\r\n\r\n        return numArr\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setState({\r\n            pages: numberGen(props.currentPage)\r\n        });\r\n\r\n    }, [ props ]);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        console.log(state)\r\n    }, [ props ]);\r\n\r\n\r\n\r\n    const renderPaginationItems= numberGen(props.currentPage).map(page=>{\r\n        if (props.router){\r\n            let newQueryData = props.router.query;\r\n            newQueryData.page = page\r\n            console.log(newQueryData )\r\n            return(\r\n                <Link href={{\r\n                    pathname:props.router.pathname,query:{...newQueryData.page,page}\r\n                }}><a>{page}</a></Link>\r\n            )\r\n        }\r\n        // let path = props.router.pathname ? props.router.pathname + '?' : ''\r\n        // for (const item in props.router.query){\r\n        //     let string = item === 'page'? `${item}=${page}` : `${item}=${props.router.query[item]}`\r\n        //     path += '&' + string\r\n        // }\r\n\r\n    })\r\n\r\n    if (props.isActive) {\r\n        return (\r\n            <div className='pagination'>\r\n                {renderPaginationItems }\r\n            </div>\r\n        );\r\n    } else return null\r\n\r\n};\r\nexport default withRouter(PaginationComponent);\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AADA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AADA;AAIA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAIA;AAEA;AACA;AAAA;;;;A","sourceRoot":""}