{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.97a15f727f61b1fc6812.hot-update.js","sources":["webpack:///./components/includes/VideoElement/VideoElement.js"],"sourcesContent":["import React, {useState, useContext, useRef, useEffect} from 'react';\r\n\r\nimport withRouter from \"next/dist/client/with-router\";\r\nimport Link from \"next/link\";\r\n// import {Link} from \"react-router-dom\";\r\nimport {AppContext} from \"../../../context/AppContext\";\r\n// import {withRouter} from \"react-router-dom\";\r\nimport ProgressBar from \"../ProgressBar/ProgressBar\";\r\nimport FA  from 'react-fontawesome'\r\n// import {deletedVideoAutoRemover} from \"../../../variables/ajaxRequestVariables\";\r\n\r\nconst VideoElement = props => {\r\n    let qualityLabel = useRef(null);\r\n    let durationLabel = useRef(null);\r\n    let viewLabel = useRef(null);\r\n    let element = useRef(null)\r\n    let videoElement = useRef(null)\r\n    let contextData = useContext(AppContext);\r\n    let path = '/post/' + props.state._id + '/' + props.state.title;\r\n\r\n    let [state, setState] = useState({\r\n            isHover: false,\r\n            isWatched: false\r\n        });\r\n\r\n\r\n    // useEffect(()=>{\r\n    //     console.log( props.state)\r\n    // },[ ]);\r\n    useEffect(() => {\r\n        hoverCleaner()\r\n    }, [state.isHover]);\r\n    useEffect(() => {\r\n        if (contextData.state.videoPreviewID !== props.state._id) {\r\n            setState({\r\n                ...state,\r\n                isHover: false\r\n            })\r\n        }\r\n    }, [contextData.state.videoPreviewID]);\r\n\r\n    let isHoverHandler = () => {\r\n        if (props.state.videoTrailerUrl){\r\n            contextData.dispatchState({\r\n                ...contextData.state,\r\n                videoPreviewID: props.state._id\r\n            });\r\n            state.isHover ? setState({...state, isHover: false}) : setState({...state, isHover: true})\r\n        }\r\n\r\n    };\r\n    const hoverCleaner = () => {\r\n        if (props.state.videoTrailerUrl){\r\n            if (state.isHover) {\r\n                qualityLabel.current.style.visibility = 'hidden';\r\n                durationLabel.current.style.visibility = 'hidden';\r\n                viewLabel.current.style.visibility = 'hidden';\r\n            } else {\r\n                qualityLabel.current.style.visibility = 'visible';\r\n                durationLabel.current.style.visibility = 'visible';\r\n                viewLabel.current.style.visibility = 'visible';\r\n            }\r\n        }\r\n    };\r\n    const imageContent = () => {\r\n        let dataToRender = () => {\r\n            if (state.isHover && props.state._id === contextData.state.videoPreviewID && props.state.videoTrailerUrl) {\r\n                return (\r\n                    <video ref={videoElement} src={props.state.videoTrailerUrl} autoPlay={true} loop={true}\r\n                           onMouseOut={e => {\r\n\r\n                               isHoverHandler()\r\n\r\n                           }}\r\n                    />)\r\n\r\n            } else if (!state.isHover) {\r\n                return (<img src={props.state.mainThumbnail} alt={props.state.title} onError={err=>{\r\n                    // deletedVideoAutoRemover(props.state)\r\n                    console.log( props.state)\r\n                }} onMouseEnter={() =>\r\n\r\n                    isHoverHandler()\r\n\r\n                }/>)\r\n            }\r\n        };\r\n        return dataToRender()\r\n    };\r\n    const VideoPreviewMobileBtnLogo = () => {\r\n        let element = <i className=\"fas fa-fast-forward\"/>\r\n        if (state.isHover) {\r\n            element = <i className=\"fas fa-stop\"/>\r\n        } else {\r\n            element = <i className=\"fas fa-fast-forward\"/>\r\n        }\r\n        return element\r\n    };\r\n    const MobilePreviewBtn = ()=>{\r\n        if (props.state.videoTrailerUrl){\r\n            return (\r\n                <button className='videoPreviewMobile' onClick={() => {\r\n                    contextData.dispatchState({\r\n                        ...contextData.state,\r\n                        videoPreviewID: props.state._id\r\n                    });\r\n                    state.isHover ? setState({...state, isHover: false}) : setState({...state, isHover: true})\r\n                }}>   <VideoPreviewMobileBtnLogo/>  </button>\r\n            )\r\n        }else return null\r\n\r\n    }\r\n    return (\r\n        < div ref={element} className='videoElementDiv'>\r\n            <Link as={`/${props.state.title}`} href={{\r\n                pathname:'/post',\r\n                query:{\r\n                    postTitle:props.state.title\r\n                }\r\n            }}>\r\n                <a>\r\n                <div className='VideoElement' key={props.state.title}>\r\n                    <div className=\"image\">\r\n                        <span ref={qualityLabel} className='quality'>{props.state.quality}</span>\r\n                        {imageContent()}\r\n                        <span ref={viewLabel} className='views'><FA className='fontawesomeSmall' name=\"eye\" />{props.state.views}</span>\r\n                        <span ref={durationLabel} className='duration'>{props.state.duration}</span>\r\n\r\n                    </div>\r\n                    <ProgressBar value={contextData.functions.likeValueCalculator(props.state.likes, props.state.disLikes)} percent={true}/>\r\n                    <h3>{props.state.title}</h3>\r\n                </div>\r\n                </a>\r\n            </Link>\r\n                <MobilePreviewBtn/>\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withRouter(VideoElement);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AAFA;AATA;AAAA;AAgBA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AALA;AAQA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAFA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AANA;AAQA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAAA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAUA;AACA;AACA;;;;A","sourceRoot":""}