{"version":3,"file":"static/webpack/static\\development\\pages\\posts.js.bd0e9a9573e1736d3a86.hot-update.js","sources":["webpack:///./components/includes/Header/Navigation/Navigation.js","webpack:///./components/includes/PaginationComponent/PaginationComponent.js"],"sourcesContent":["import React, { useState, useRef, useEffect, useContext } from 'react';\r\nimport Link from \"next/link\";\r\nimport FA from 'react-fontawesome'\r\nimport { AppContext } from \"../../../../context/AppContext\";\r\n// import  BarsIcon from '../../../../styles/icons/bars-solid.svg'\r\n\r\nconst Navigation = props => {\r\n    const contextData = useContext(AppContext);\r\n    const navigation = useRef(null)\r\n    const [ navigationData, setNavigationData ] = useState({\r\n        isOpen: false,\r\n        items: []\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (window.innerWidth < 768) {\r\n            setNavigationData({\r\n                ...navigationData,\r\n                isOpen: false\r\n            });\r\n\r\n        } else {\r\n            setNavigationData({\r\n                ...navigationData,\r\n                isOpen: true\r\n            })\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        if (navigation.current) {\r\n            if (navigationData.isOpen) {\r\n                navigation.current.style.display = 'flex'\r\n            } else {\r\n                navigation.current.style.display = 'none'\r\n            }\r\n        }\r\n    }, [ navigationData.isOpen ]);\r\n\r\n    useEffect(() => {\r\n        setNavigationData(navigationData=>({\r\n            ...navigationData,\r\n            items: contextData.navigationData\r\n        }))\r\n    }, [ contextData.navigationData ]);\r\n\r\n    const onNavigationMobileBtnClickHandler = () => {\r\n        navigationData.isOpen ? setNavigationData({ ...navigationData, isOpen: false }) : setNavigationData({ ...navigationData, isOpen: true })\r\n    };\r\n\r\n    const renderNavigationItems = navigationData.items.map(item=>{\r\n        return(\r\n            <Link  key={item.title} href={item.url}><a>{item.title}</a></Link>\r\n        )\r\n    })\r\n''\r\n\r\n\r\n    return (\r\n        <>\r\n            <button className='navigationMobileBtn' onClick={ () => onNavigationMobileBtnClickHandler() }><FA className='fontawesomeMedium' name={ navigationData.isOpen ? 'times' : 'bars' }/></button>\r\n\r\n            <div ref={ navigation } className='Navigation'>\r\n                {renderNavigationItems}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Navigation;\r\n","import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport Link from 'next/link'\r\n\r\nconst PaginationComponent = props => {\r\n    const [ state, setState ] = useState({\r\n        pages: [],\r\n        elements:[]\r\n    });\r\n\r\n    let numberGen = (current) => {\r\n        console.log( current)\r\n        let numArr = [];\r\n        if (current === 1) {\r\n            for (let i = 1; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 2) {\r\n            numArr.push(1)\r\n            for (let i = 2; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current === 3) {\r\n            numArr.push(1)\r\n            numArr.push(2)\r\n            for (let i = 3; i <= 7; i++) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current > 3) {\r\n            let min = current - 3\r\n            let max = current + 3\r\n            for (let i = current; i <= max; i++) {\r\n                numArr.push(i)\r\n            }\r\n            for (let i = current; i >= min; i--) {\r\n                numArr.push(i)\r\n            }\r\n        }\r\n        if (current > 3) {\r\n            numArr.push(1)\r\n        }\r\n        if (Math.ceil(props.totalCount / props.size)) {\r\n            numArr.push(parseInt(props.maxPage) - 1)\r\n        }\r\n\r\n        numArr = [ ...new Set(numArr) ];\r\n        numArr = numArr.sort((x, y) => {\r\n            return x - y\r\n        });\r\n\r\n        return numArr\r\n    };\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        setState({\r\n            pages: numberGen(props.currentPage)\r\n        });\r\n\r\n    }, [ props ]);\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props)\r\n        console.log(state)\r\n    }, [ props ]);\r\n\r\n\r\n\r\n    let pageNumbersGenerator = state.pages.map(pageNumber => {\r\n        return (\r\n                 <Link href='/posts'><a> { pageNumber } </a> </Link>\r\n        )\r\n    });\r\n\r\n    if (props.isActive) {\r\n        return (\r\n            <div>\r\n                {pageNumbersGenerator }\r\n            </div>\r\n        );\r\n    } else return null\r\n\r\n};\r\nexport default PaginationComponent;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AAIA;AACA;AAFA;AAHA;AAAA;AACA;AAOA;AACA;AACA;AAEA;AAFA;AAKA;AACA;AAEA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AAFA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAKA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AACA;AAAA;AAEA;AACA;AAFA;AADA;AAAA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AADA;AAIA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAAA;;;;A","sourceRoot":""}