import { getDictionary } from '../../../../../get-dictionary';
import SidebarWidgetAreaRenderer
  from '@components/widgets/widgetAreas/SidebarWidgetAreaRenderer/SidebarWidgetAreaRenderer';
import './page.styles.scss';
import postMetaGenerator from './components/postMetaGenerator/postMetaGenerator';
import Soft404 from '@components/Soft404/Soft404';
import { IPageProps, IPageSettings, IPost, PostPageProps } from '@repo/typescript-types';
import localDetector from '@lib/localDetector';
import getPost from '@lib/actions/database/posts/getPost';
import getSettings from '@lib/actions/database/settings/getSettings';
import getWidgets from '@lib/actions/database/widgets/getWidgets';
import Comments from './components/Comments/Comments';
import React from 'react';
import RelatedPostsRenderer from './components/RelatedPostsRenderer/RelatedPostsRenderer';
import WidgetsRenderer from '@components/widgets/widgetRenderer/WidgetsRenderer';
import { ServerActionResponse, unwrapResponse } from '@lib/actions/response';
import dynamic from 'next/dynamic';
import getAllPublishedPosts from '@lib/actions/database/posts/getAllPublishedPosts';
const VideoTypePostPage = dynamic(() => import('./components/VideoTypePostPage/VideoTypePostPage'));
const ArticleTypePostPage = dynamic(() => import('./components/ArticleTypePostPage/ArticleTypePostPage'));
const PromotionTypePostPage = dynamic(() => import('./components/PromotionTypePostPage/PromotionTypePostPage'));
const LearnTypePostPage = dynamic(() => import('./components/LearnTypePostPage/LearnTypePostPage'));

export const revalidate = 3600

export const generateMetadata = postMetaGenerator;

export async function generateStaticParams() {
  try {
    const { data } = await getAllPublishedPosts() as ServerActionResponse<{
      posts:IPost[]
    }> ;

    if (!data || !data.posts) {
      return [];
    }

    const params = [];

    // Get supported languages from environment variable
    const supportedLangs = process.env.NEXT_PUBLIC_LOCALES?.split(',') || ['en'];

    for (const post of data.posts) {
      for (const lang of supportedLangs) {
        // @ts-expect-error: it's fine
        params.push({
          lang: lang.trim(),
          identifier: post._id || post.title ,
          postType: post.type || 'article'
        });
      }
    }

    return params;
  } catch (error) {
    console.error('Error generating static params:', error);
    return [];
  }
}

const PostPage = async (props: IPageProps) => {
  const params = await props.params;
  const locale = localDetector(params.lang);
  const dictionary = await getDictionary(locale);
  const { identifier, postType } = params;
  const { data, success } = await getPost(identifier as string);

  if (!success || !data || !data.post) {
    return <Soft404 dictionary={dictionary} />;
  }

  const postId = data?.post._id;

  const { postPageSettings } = unwrapResponse(
    await getSettings(['postPageSettings']) as unknown as ServerActionResponse<{
      postPageSettings: IPageSettings | undefined;
    }>,
  );

  const widgets = await getWidgets(
    ['postPageLeftSidebar', 'postPageRightSidebar', 'underPost'],
    locale,
  );

  const sidebar = postPageSettings?.sidebar;

  const postProps: PostPageProps = {
    widgets: widgets?.['underPost'],
    post: data?.post,
    views: data.post?.views || 0,
    likes: data.post?.likes || 0,
    hasSidebar: !!sidebar,
    relatedPosts: data?.relatedPosts || [],
    dictionary: dictionary,
    locale: locale,
  };


  return (
    <>

      <div id={'content'} className={`page-${sidebar || 'no'}-sidebar`}>
        <main id={'primary'} className={'main postPage'}>
          {postType === 'video' ? <VideoTypePostPage {...postProps} /> : postType === 'article' ? (
            <ArticleTypePostPage {...postProps} />
          ) : postType === 'promotion' ? (
            <PromotionTypePostPage {...postProps} />
          ) : postType === 'learn' ? (
            <LearnTypePostPage {...postProps} />
          ) : null}
          <RelatedPostsRenderer locale={locale} relatedPosts={data?.relatedPosts || []} dictionary={dictionary} />
          <div className="under-post-widget-area">
            <WidgetsRenderer widgets={widgets?.['underPost']} position="underPost" hasSidebar={sidebar} locale={locale}
                             dictionary={dictionary} />
          </div>
          {(data.post._id && data?.post?.status === 'published') &&
            <Comments dictionary={dictionary} postId={data.post._id} />}
        </main>
        <SidebarWidgetAreaRenderer
          leftSideWidgets={widgets?.['postPageLeftSidebar']}
          rightSideWidgets={widgets?.['postPageRightSidebar']}
          dictionary={dictionary}
          locale={locale}
          sidebar={sidebar || 'no'}
          position={'postPage'}
        />
      </div>
    </>
  );
};

export default PostPage;