import React, {ReactNode} from 'react';
import dynamic from "next/dynamic";
import {fetchSettings, fetchWidgets} from "fetch-requests";
import './globals.css'
import GlobalStyles from "@components/global/styles/GlobalStyles";
import ReduxProvider from "@store/ReduxProvider";
// import WebSocketInitializer from "@components/WebSocketInitializer/WebSocketInitializer";
import ThemeProvider from "@providers/ThemeProvider";
import Csr from "@components/global/Csr";
import useTranslation from "next-translate/useTranslation";
import * as process from "process";
import i18n from '../../i18n'
import { redirect } from 'next/navigation'

const TopbarWidgetArea = dynamic(() => import("@components/widgets/widgetAreas/TopbarWidgetArea"))
const HeaderWidgetArea = dynamic(() => import("@components/widgets/widgetAreas/HeaderWidgetArea"))
const NavigationWidgetArea = dynamic(() => import("@components/widgets/widgetAreas/NavigationWidgetArea"))
const FooterWidgetArea = dynamic(() => import("@components/widgets/widgetAreas/FooterWidgetArea"))

export async function generateStaticParams() {
    return i18n.locales.map((lng:string) => ({ lng }))
}

export const metadata = {
    title: 'Create Next App',
    description: 'Generated by create next app',
}



const RootLayout = async ({children, params: {lang}}: { children: ReactNode, params: { lang: string } }) => {

    // console.log('lang=> ',lang)
    // if (!i18n.locales.includes(lang) || !lang){
    //     console.log('redirect=> ',`/${i18n.defaultLocale}`)
    //     redirect(`/${i18n.defaultLocale}`)
    // }
    const locale = lang || process.env?.NEXT_PUBLIC_DEFAULT_LOCAL || 'en'
    const { t } = useTranslation('common')
    const initialSettingsData = await fetchSettings(['initialSettings'])
    const staticWidgetsData = await fetchWidgets(['footer', 'header', 'topBar', 'navigation'], locale)

    return (
        <html lang={locale}>
        <body className={`dark `}>
        <ReduxProvider>
            {/*<ThemeProvider>*/}
                {/*<I18nTranslationProvider lang={lang}>*/}
                <div className="flex flex-col min-h-screen">

                    {initialSettingsData?.settings?.initialSettings?.layoutSettings?.topbar &&
                        <TopbarWidgetArea widgets={staticWidgetsData?.widgets?.topBar} locale={locale}/>}
                    {initialSettingsData?.settings?.initialSettings?.layoutSettings?.header &&
                        <HeaderWidgetArea widgets={staticWidgetsData?.widgets?.header} locale={locale}/>}
                    {initialSettingsData?.settings?.initialSettings?.layoutSettings?.navigation &&
                        <NavigationWidgetArea widgets={staticWidgetsData?.widgets?.navigation}
                                              locale={locale}/>}
                    <div id={'page'} className={'App'}>
                        {/*{children}*/}
                    </div>
                    {initialSettingsData?.settings?.initialSettings?.layoutSettings?.footer &&
                        <FooterWidgetArea widgets={staticWidgetsData?.widgets?.footer} locale={locale}/>}
                </div>
                {/*</I18nTranslationProvider>*/}
                {/*<WebSocketInitializer/>*/}
                <Csr>
                    <GlobalStyles customColors={ initialSettingsData?.settings?.layoutSettings?.customColors}
                                  customStyles={ initialSettingsData?.settings?.layoutSettings?.customStyles}/>
                </Csr>
            {/*</ThemeProvider>*/}

        </ReduxProvider>
        </body>
        </html>
    )
}

export default RootLayout;